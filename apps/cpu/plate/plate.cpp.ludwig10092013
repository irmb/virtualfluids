

#include <iostream>
#include <string>
#include <math.h> 

#include <vfluids.h>

using namespace std;


void run(const char *cstr)
{
   try
   {
      string machine = QUOTEME(CAB_MACHINE);
	  UBLOG(logINFO,"Testcase plate");
      string pathname; 
      string pathGeo;
	  string BrueckeFilename;
	  string ZckbndFilename;
      int numOfThreads =1;
      bool logfile = false;
      stringstream logFilename;
      double availMem = 0;

      UbLog::reportingLevel() = logDEBUG;

      CommunicatorPtr comm(new MPICommunicator());
      int myid = comm->getProcessID();
      
      if(machine == "PIPPINNEU") 
      {

		  pathname = "f:/temp/plateBfluid";
		  pathGeo = "e:/geometriedatenstls";
         numOfThreads = 1;
         logfile = false;
         availMem = 3.0e9;
      }
      else if(machine == "M01" || machine == "M02")      
      {
		  pathname = "/work/sonjaOutputs/plateBfluidNeud";
		  pathGeo = "/home/sonuphof/Stl-Zeichnungen";
         numOfThreads = 1;
         availMem = 12.0e9;
         logfile = true;

         //if(myid ==0)
         //{
            logFilename <<  pathname + "/logfile"+UbSystem::toString(UbSystem::getTimeStamp())+"_"+UbSystem::toString(myid)+".txt";
         //}
      }
      else throw UbException(UB_EXARGS, "unknown CAB_MACHINE");

	  BrueckeFilename = pathGeo + "/platte_raw.stl"; 
	  ZckbndFilename= pathGeo + "/2zackenbaender0.stl";

      //if(myid ==0 && logfile)
      //{
         UbLog::output_policy::setStream(logFilename.str());
      //}

      int baseLevel, refineLevel,nx[3],blocknx[3];
      double Re,velocity,rhoInit,vx1Init;//,vx2Init,vx3Init;

	  //////////////////////////////////////////////////////////////////////////
	  //physik
	  //////////////////////////////////////////////////////////////////////////
	  Re            = 11900;// 13286;//13286;//gemessen 18.98 m/s...*5.0 zum  testen ob was passiert
	  velocity      = 0.01;  
	  vx1Init       = 0.01;  
	  rhoInit       = 1.0;
	  SimulationParametersPtr param = SimulationParameters::getInstanz();
	  param->setCollisionModelType(SimulationParameters::COMPRESSIBLE);

	  int H=200;//200;//392;
	  ///////////////Knotenabmessungen:
	  nx[0]      = 120;//60;//86;//43;//65;//50;  //länge
	  nx[1]      = 3;//6;///1;//5;// //breite
	  nx[2]      = 32;//18;//5;//15;//15; //höhe gebiet
	  blocknx[0] = 9;
	  blocknx[1] = 9;
	  blocknx[2] = 9;

	  baseLevel   = 0;
	  refineLevel = 2;//1;//5;



	  ///////////////Weltabmessungen:
	  double kanalhoeheSI  = 60.0/100.0;//60.0/100.0;//cm, Kanalhöhe
	  double kanalbreiteSI = kanalhoeheSI*120.0/2.0;//=kanalhöhe*nx1/nx2//1.65/100.0;//13.2/100.0;////40.0/100.0; //cm, Kanalbreite //13.2 zeilbreite
	  double kanallaengeSI = kanalhoeheSI*120.0/32.0;//80.0/100.0;//cm, Kanallänge, ist nicht angegeben

	  // double refinewidth1=kanalhoeheSI/10.0;

	  double fineNodeDx   = (kanalhoeheSI) / (double)( blocknx[2]*nx[2]*(1<<refineLevel)+1 ); //+1--> gitter liegt jeweils 0.5dx innerhalb
	  double coarseNodeDx = fineNodeDx * (double)(1<<refineLevel);//geowerte

	  double blockLengthx1 = blocknx[0]*coarseNodeDx; //geowerte
	  double blockLengthx2 = blockLengthx1;
	  double blockLengthx3 = blockLengthx1;

	  double originX1 = 0.0;//-50.0*propellerDurchmesser;  //geowerte
	  double originX2 = 0.0;//-0.5*blockLengthx2*nx2;
	  double originX3 = 0.0;// minX3 + 0.5*fineNodeDx;

	  double geoLength[]   = {  nx[0]*blockLengthx1, nx[1]*blockLengthx2, nx[2]*blockLengthx3}; 

	  //position vorderkante cube
	  double originBridgeX1 = 20.0/100.0; //cm, geraten
	  double originBridgeX2 = 0.0;//0.5*params.nx[1]*blockLengthx2-0.5*H-fineNodeDx;
	  double originBridgeX3 = kanalhoeheSI*0.5;//H*0.0-fineNodeDx; //boden

	  bool periodicx1 = false;
	  bool periodicx2 = true;
	  bool periodicx3 = true;

	  //##########################################################################
	  //## physical parameters
	  //##########################################################################

	  double smagorinskiConstant = 0.18;


	  double rhoLB         = 1.0;
	  double rhoReal       = 1.0;
	  double nueReal  = 0.000015;//0.015;

	  double hReal         = 0.0105;//<-m     1.05;//Plattendicke in cm(! cm nicht m !)
	  double uReal         = Re*nueReal/hReal;

	  //##Machzahl:
	  //#Ma     = uReal/csReal
	  double Ma      = 0.05;//0.0553;//Ma-Real!
	  double csReal  = uReal/Ma;
	  double hLB     = hReal/coarseNodeDx;

	  LBMUnitConverterPtr unitConverter = LBMUnitConverterPtr(new LBMUnitConverter(hReal, csReal, rhoReal, hLB));

	  double uLB           = uReal   * unitConverter->getFactorVelocityWToLb();
	  double nueLB         = nueReal * unitConverter->getFactorViscosityWToLb();
	  double timestep      = unitConverter->getFactorTimeLbToW(coarseNodeDx);

	  velocity = uLB;
	  double viscosity = nueLB;

	  //////////////////////////////////////////////////////////////////////////
	  Grid3DPtr grid(new Grid3D(comm));
	  UbSchedulerPtr rSch(new UbScheduler(5000,5000,1000000));
	  RestartPostprocessor rp(grid, rSch, comm, pathname+"/checkpoints", RestartPostprocessor::BINARY);

      std::string opt;

      if(cstr!= NULL)
         opt = std::string(cstr);

      if(/*(cstr== NULL)*/cstr!= NULL)
      {
         opt = std::string(cstr);

         if(myid==0) UBLOG(logINFO,"Restart step: " << opt);

         grid = rp.restart(UbSystem::stringTo<int>(opt));

         //set connectors
         D3Q27InterpolationProcessorPtr iProcessor(new D3Q27OffsetInterpolationProcessor());
         D3Q27SetConnectorsBlockVisitor setConnsVisitor(comm, true, D3Q27System::ENDDIR, nueLB, iProcessor);
         grid->accept( setConnsVisitor );

         //domain decomposition
         //PQueuePartitioningGridVisitor pqPartVisitor(numOfThreads);
         //grid->accept(pqPartVisitor);
      }
      else
      {
      //bounding box
      double g_minX1 = originX1;
      double g_minX2 = originX2;
      double g_minX3 = originX3;

      double g_maxX1 = originX1 + geoLength[0];
      double g_maxX2 = originX2 + geoLength[1];
      double g_maxX3 = originX3 + geoLength[2];

      //set grid
      grid->setDeltaX(coarseNodeDx);
      grid->setBlockNX(blocknx[0], blocknx[1], blocknx[2]);
      grid->setPeriodicX1(periodicx1);
      grid->setPeriodicX2(periodicx2);
      grid->setPeriodicX3(periodicx3);
	  
      
      GbObject3DPtr gridCube(new GbCuboid3D(g_minX1, g_minX2, g_minX3, g_maxX1, g_maxX2, g_maxX3));
      if(myid == 0) GbSystem3D::writeGeoObject(gridCube.get(), pathname+"/geo/gridCube", WbWriterVtkXmlASCII::getInstance());

      GenBlocksGridVisitor genBlocks;
      genBlocks.addGeoObject(gridCube);
      grid->accept(genBlocks);


	  /////////////////////////////////////////////////7
	  //interactoren definieren



	  double geoOverlap = 3.0*coarseNodeDx;

	  //inflow
      GbCuboid3DPtr velBCCuboid(new GbCuboid3D(originX1-geoOverlap, originX2-geoOverlap, originX3-geoOverlap, 
         originX1/*+coarseNodeDx*/, originX2+geoLength[1]+geoOverlap, originX3+geoLength[2]+geoOverlap));
      if(myid == 0) GbSystem3D::writeGeoObject(velBCCuboid.get(), pathname+"/geo/velBCCuboid", WbWriterVtkXmlASCII::getInstance());
      D3Q27InteractorPtr velBCInteractor(new D3Q27Interactor(velBCCuboid,grid,Interactor3D::SOLID)); 

	   //inflow
      double uLB2=uLB*0.96*1.02;//*0.5;
      double raiseVelSteps = 0;
      vector<D3Q27BCFunction> velcX1BCs,dummy;

      mu::Parser inflowProfile;
      inflowProfile.SetExpr("uLB"); 

      inflowProfile.DefineConst("uLB",uLB2);
      velcX1BCs.push_back(D3Q27BCFunction(inflowProfile,raiseVelSteps,D3Q27BCFunction::INFCONST));
      
      D3Q27BoundaryConditionAdapterPtr velBCAdapter(new D3Q27VelocityBCAdapter (velcX1BCs,dummy,dummy));
      velBCInteractor->addBCAdapter(velBCAdapter);

	  //outflow
	  GbCuboid3DPtr densCuboid(new GbCuboid3D(originX1+geoLength[0]-coarseNodeDx, originX2-geoOverlap, originX3-geoOverlap, 
		  originX1+geoLength[0]+geoOverlap, originX2+geoLength[1]+geoOverlap, originX3+geoLength[2]+geoOverlap ));
	  if(myid == 0) GbSystem3D::writeGeoObject(densCuboid.get(), pathname+"/geo/densCuboid", WbWriterVtkXmlASCII::getInstance());
	  D3Q27BoundaryConditionAdapterPtr denBCAdapter(new D3Q27DensityBCAdapter(rhoInit));
	  D3Q27InteractorPtr densInteractor( new D3Q27Interactor(densCuboid,grid,denBCAdapter,Interactor3D::SOLID) );
      
      //////////////////////////////////////////////////////////////////////////
      if(myid == 0)
      {
         UBLOG(logINFO, "*****************************************");
         UBLOG(logINFO, "* Parameters                            *");
         UBLOG(logINFO, "* Re            ="<<Re);
         UBLOG(logINFO, "* Ma            ="<<Ma);
         UBLOG(logINFO, "* uReal         ="<<uReal);
         UBLOG(logINFO, "* nueReal       ="<<nueReal);
         UBLOG(logINFO, "* nue           ="<<nueLB);
         UBLOG(logINFO, "* velocity      ="<<uLB);
        // UBLOG(logINFO, "* LX1 (world/LB)="<<kanallaengeSI<<"/"<<kanallaengeSI/coarseNodeDx);
       //  UBLOG(logINFO, "* LX2 (world/LB)="<<kanalbreiteSI<<"/"<<kanalbreiteSI/coarseNodeDx);
         UBLOG(logINFO, "* LX3 (world/LB)="<<kanalhoeheSI<<"/"<<kanalhoeheSI/coarseNodeDx);
         UBLOG(logINFO, "* cdx           ="<<coarseNodeDx);
         UBLOG(logINFO, "* fdx           ="<<fineNodeDx);
         UBLOG(logINFO, "* dx_base       ="<<coarseNodeDx<<" == "<<coarseNodeDx);
         UBLOG(logINFO, "* dx_refine     ="<<fineNodeDx<<" == "<<fineNodeDx );
         UBLOG(logINFO, "* nx1/2/3       ="<<nx[0]<<"/"<<nx[1]<<"/"<<nx[2]);
         UBLOG(logINFO, "* blocknx1/2/3  ="<<blocknx[0]<<"/"<<blocknx[1]<<"/"<<blocknx[2]);
         UBLOG(logINFO, "* x2Periodic    ="<<periodicx2);
         UBLOG(logINFO, "* x3Periodic    ="<<periodicx3);
         UBLOG(logINFO, "*****************************************");
         UBLOGML(logINFO, "UnitConverter:"<<unitConverter->toString());
         UBLOG(logINFO, "*****************************************");     
      }
	  //////////////////////////////////////////////////////////////////////////
	  //platte
	  GbTriFaceMesh3DPtr mesh (GbTriFaceMesh3DCreator::getInstance()->readMeshFromSTLFile(BrueckeFilename,"Netz"));

	  double x1minMesh = mesh->getX1Minimum(); double x1maxMesh = mesh->getX1Maximum();
	  double x2minMesh = mesh->getX2Minimum(); double x2maxMesh = mesh->getX2Maximum();
	  double x3minMesh = mesh->getX3Minimum(); double x3maxMesh = mesh->getX3Maximum();

	  double drehpunktX=x1minMesh+(x1maxMesh-x1minMesh)*0.5;//triFaceMeshS->getX1Centroid();
	  double drehpunktZ=x3minMesh+(x3maxMesh-x3minMesh)*0.5;//triFaceMeshS->getX3Centroid();
	  double drehpunktY=x2minMesh+(x2maxMesh-x2minMesh)*0.5;// seedX2-0.5*nodeDelta;//+nx2*deltaX2+0.5*deltaX2;

	  mesh->rotate(90.0,0.0,0.0);  //TriFacMesh-KO-System anders als LB-KO-System

	  x1minMesh = mesh->getX1Minimum();  x1maxMesh = mesh->getX1Maximum();
	  x2minMesh = mesh->getX2Minimum();  x2maxMesh = mesh->getX2Maximum();
	  x3minMesh = mesh->getX3Minimum();  x3maxMesh = mesh->getX3Maximum();

	  drehpunktX=x1minMesh+(x1maxMesh-x1minMesh)*0.5;//triFaceMeshS->getX1Centroid();
	  drehpunktZ=x3minMesh+(x3maxMesh-x3minMesh)*0.5;//triFaceMeshS->getX3Centroid();
	  drehpunktY=x2minMesh+(x2maxMesh-x2minMesh)*0.5;// seedX2-0.5*nodeDelta;//+nx2*deltaX2+0.5*deltaX2;

	  double H3=1.05/100.0;//cm, Plattendicke
	  double scaleB=H3/(x3maxMesh-x3minMesh);
	  double scaleX2=(geoLength[2]+2.0*coarseNodeDx)/(x2minMesh-x2maxMesh);

	  mesh->scale(scaleB,scaleB,scaleB);
	  x1minMesh = mesh->getX1Minimum(); x1maxMesh = mesh->getX1Maximum();
	  x2minMesh = mesh->getX2Minimum(); x2maxMesh = mesh->getX2Maximum();
	  x3minMesh = mesh->getX3Minimum(); x3maxMesh = mesh->getX3Maximum();
	  double offsetXBridge=originBridgeX1;//originBridgeX1;
	  double offsetYBridge=originBridgeX2;//originBridgeX2;
	  double offsetZBridge=originBridgeX3;//originBridgeX3;//-0.5*(x3minMesh-x3maxMesh);
	  //mesh->translate(-x1minMesh+offsetXBridge, -x2minMesh-0.5*offsetYBridge-coarseNodeDx, -x3minMesh+offsetZBridge); 
	  mesh->translate(-x1minMesh+offsetXBridge, -x2minMesh+offsetYBridge-coarseNodeDx, -x3minMesh+offsetZBridge-(x3maxMesh-x3minMesh)*0.5); 

	  x1minMesh = mesh->getX1Minimum(); x1maxMesh = mesh->getX1Maximum();
	  x2minMesh = mesh->getX2Minimum(); x2maxMesh = mesh->getX2Maximum();
	  x3minMesh = mesh->getX3Minimum(); x3maxMesh = mesh->getX3Maximum();

	  if(myid == 0) GbSystem3D::writeGeoObject( mesh.get(), pathname+"/geo/platte", WbWriterVtkXmlBinary::getInstance() );

	  //////////////////////////////////////////////////////////////////////////
	  // Zackenband
	  //////////////////////////////////////////////////////////////////////////
	  GbTriFaceMesh3DPtr meshBand (GbTriFaceMesh3DCreator::readMeshFromFile(ZckbndFilename, "NetzBand"));
	  meshBand->deleteRedundantNodes();

	  double x1minMeshB = meshBand->getX1Minimum(); double x1maxMeshB = meshBand->getX1Maximum();
	  double x2minMeshB = meshBand->getX2Minimum(); double x2maxMeshB = meshBand->getX2Maximum();
	  double x3minMeshB = meshBand->getX3Minimum(); double x3maxMeshB = meshBand->getX3Maximum();

	  x1minMeshB = meshBand->getX1Minimum();  x1maxMeshB = meshBand->getX1Maximum();
	  x2minMeshB = meshBand->getX2Minimum();  x2maxMeshB = meshBand->getX2Maximum();
	  x3minMeshB = meshBand->getX3Minimum();  x3maxMeshB = meshBand->getX3Maximum();

	  double H1B=1.5/100.0;//0.05;//cm, Banddicke..nachschauen!!!
	  double scaleBand=H1B/(x1maxMeshB-x1minMeshB);//H3B/(x3maxMeshB-x3minMeshB);

	  meshBand->scale(scaleBand,scaleBand,scaleBand);
	  x1minMeshB = meshBand->getX1Minimum(); x1maxMeshB = meshBand->getX1Maximum();
	  x2minMeshB = meshBand->getX2Minimum(); x2maxMeshB = meshBand->getX2Maximum();
	  x3minMeshB = meshBand->getX3Minimum(); x3maxMeshB = meshBand->getX3Maximum();
	  double dBandX=0.5/100.0;//1.29; //15mm-2.1mm Absand von Bandvorderkante
	  double dBandY=0.0/100.0;
	  double dBandZ=0.223/100.0;//0.344;//....
	  double offsetXBridgeB=x1minMesh+dBandX;//originBridgeX1+dBandX;//originBridgeX1;
	  double offsetYBridgeB=originBridgeX2+dBandY;//originBridgeX2;
	  double offsetZBridgeB=originBridgeX3+dBandZ;//originBridgeX3;//-0.5*(x3minMesh-x3maxMesh);
	  meshBand->translate(-x1minMeshB+offsetXBridgeB, -x2minMeshB+offsetYBridgeB-coarseNodeDx, -x3minMeshB+offsetZBridgeB);//-(x3maxMeshB-x3minMeshB)*0.5); 

	  x1minMeshB = meshBand->getX1Minimum(); x1maxMeshB = meshBand->getX1Maximum();
	  x2minMeshB = meshBand->getX2Minimum(); x2maxMeshB = meshBand->getX2Maximum();
	  x3minMeshB = meshBand->getX3Minimum(); x3maxMeshB = meshBand->getX3Maximum();

	  GbSystem3D::writeGeoObject( meshBand.get(), pathname+"/geo/Band", WbWriterVtkXmlASCII::getInstance() );

	  /////////////////Band2
	  GbTriFaceMesh3DPtr meshBand2(GbTriFaceMesh3DCreator::readMeshFromFile(ZckbndFilename, "NetzBand2"));
	  meshBand->deleteRedundantNodes();

	  double x1minMeshB2 = meshBand2->getX1Minimum(); double x1maxMeshB2 = meshBand2->getX1Maximum();
	  double x2minMeshB2 = meshBand2->getX2Minimum(); double x2maxMeshB2 = meshBand2->getX2Maximum();
	  double x3minMeshB2 = meshBand2->getX3Minimum(); double x3maxMeshB2 = meshBand2->getX3Maximum();

	  x1minMeshB2 = meshBand2->getX1Minimum();  x1maxMeshB2 = meshBand2->getX1Maximum();
	  x2minMeshB2 = meshBand2->getX2Minimum();  x2maxMeshB2 = meshBand2->getX2Maximum();
	  x3minMeshB2 = meshBand2->getX3Minimum();  x3maxMeshB2 = meshBand2->getX3Maximum();

	  double H1B2=1.5/100.0;//0.05;//cm, Banddicke..nachschauen!!!
	  double scaleBand2=H1B2/(x1maxMeshB2-x1minMeshB2);//H3B/(x3maxMeshB-x3minMeshB);

	  meshBand2->scale(scaleBand2,scaleBand2,scaleBand2);
	  x1minMeshB2 = meshBand2->getX1Minimum(); x1maxMeshB2 = meshBand2->getX1Maximum();
	  x2minMeshB2 = meshBand2->getX2Minimum(); x2maxMeshB2 = meshBand2->getX2Maximum();
	  x3minMeshB2 = meshBand2->getX3Minimum(); x3maxMeshB2 = meshBand2->getX3Maximum();
	  double dBandX2=0.5/100.0;//1.29;
	  double dBandY2=0.5/100.0;
	  double dBandZ2=0.223/100.0;//0.344;//...
	  double offsetXBridgeB2=x1minMesh+dBandX2;//originBridgeX1;
	  double offsetYBridgeB2=originBridgeX2+dBandY2;//originBridgeX2;
	  double offsetZBridgeB2=originBridgeX3+dBandZ2;//originBridgeX3;//-0.5*(x3minMesh-x3maxMesh);
	  meshBand2->translate(-x1minMeshB2+offsetXBridgeB2, -x2minMeshB2+offsetYBridgeB2-coarseNodeDx, -x3minMeshB2+offsetZBridgeB2);//-(x3maxMeshB2-x3minMeshB2)*0.5); 

	  x1minMeshB2 = meshBand2->getX1Minimum(); x1maxMeshB2 = meshBand2->getX1Maximum();
	  x2minMeshB2 = meshBand2->getX2Minimum(); x2maxMeshB2 = meshBand2->getX2Maximum();
	  x3minMeshB2 = meshBand2->getX3Minimum(); x3maxMeshB2 = meshBand2->getX3Maximum();

	  if(myid == 0) GbSystem3D::writeGeoObject( meshBand2.get(), pathname+"/geo/Band2", WbWriterVtkXmlASCII::getInstance() );
	  //////////////////////////////////////////////////////////////////////////
      if(myid == 0) UBLOG(logINFO,"Refinement - start");	

      //////////////////////////////////////////////////////////////////////////
      // refine
      //////////////////////////////////////////////////////////////////////////

	  ///////////platte ausmessen:
	  x1minMesh = mesh->getX1Minimum(); x1maxMesh = mesh->getX1Maximum();
	  x2minMesh = mesh->getX2Minimum(); x2maxMesh = mesh->getX2Maximum();
	  x3minMesh = mesh->getX3Minimum(); x3maxMesh = mesh->getX3Maximum();
	  double deltaX3Platte=(x3maxMesh-x3minMesh);


	 // GbObject3DPtr gridCube(new GbCuboid3D(g_minX1, g_minX2, g_minX3, g_maxX1, g_maxX2, g_maxX3));
	 // if(myid == 0) GbSystem3D::writeGeoObject(gridCube.get(), pathname+"/geo/gridCube", WbWriterVtkXmlASCII::getInstance());




	  //GbCuboid3DPtr refine2PlatteCube(new GbCuboid3D(  originX1-geoOverlap   , originX2-geoOverlap  , x3minMesh-H3*0.5
	  //  , x1maxMesh+H3*5.0, originX2+geoOverlap+geoLength[1], x3maxMesh+H3));
	  //RefineCrossAndInsideGbObjectBlockVisitor refineAdapterP2(refine2PlatteCube, baseLevel, refineLevel-5);
	  //grid->accept(refineAdapterP2);

	  GbCuboid3DPtr refine3PlatteCube(new GbCuboid3D(   x1minMesh+H3*2.0  , originX2-geoOverlap  , x3minMesh+H3*0.8
	     , x1maxMesh-H3*0.2, originX2+geoOverlap+geoLength[1], x3maxMesh+H3*0.1));
	  //RefineCrossAndInsideGbObjectBlockVisitor refineAdapterP3(refine3PlatteCube, baseLevel, refineLevel-4);
	  //grid->accept(refineAdapterP3);

	  GbCuboid3DPtr refine4PlatteCube(new GbCuboid3D(   x1minMesh-H3*2.0  , originX2-geoOverlap  , x3minMesh+deltaX3Platte*0.04
	     ,  x1maxMesh+H3*5.0, originX2+geoOverlap+geoLength[1], x3maxMesh+H3*0.25));
	  //if(myid == 0) GbSystem3D::writeGeoObject(refine4PlatteCube.get(), pathname+"/geo/refine4PlatteCube", WbWriterVtkXmlASCII::getInstance());
	  //RefineCrossAndInsideGbObjectBlockVisitor refineAdapterP4(refine4PlatteCube, baseLevel, refineLevel-3);
	  //grid->accept(refineAdapterP4);

	  GbCuboid3DPtr refine5PlatteCube(new GbCuboid3D(   originX1-geoOverlap , originX2-geoOverlap  ,x3minMesh-deltaX3Platte/*x3minMesh+deltaX3Platte*0.8*//* x3minMesh+deltaX3Platte*0.8*/
	     ,  x1maxMesh+H3*5.0, originX2+geoOverlap+geoLength[1], x3maxMesh+H3));
	  //if(myid == 0) GbSystem3D::writeGeoObject(refine5PlatteCube.get(), pathname+"/geo/refine5PlatteCube", WbWriterVtkXmlASCII::getInstance());
	  //RefineCrossAndInsideGbObjectBlockVisitor refineAdapterP5(refine5PlatteCube, baseLevel, refineLevel-2);
	  //grid->accept(refineAdapterP5);

	  GbCuboid3DPtr refine6PlatteCube(new GbCuboid3D(   originX1-geoOverlap   , originX2-geoOverlap  , x3minMesh-deltaX3Platte*3.0/*x3minMesh+deltaX3Platte*0.9*/
		  ,  x1maxMesh+H3*5.0, originX2+geoOverlap+geoLength[1], x3maxMesh+deltaX3Platte*3.0));
	  if(myid == 0) GbSystem3D::writeGeoObject(refine6PlatteCube.get(), pathname+"/geo/refine6PlatteCube", WbWriterVtkXmlASCII::getInstance());
	  //RefineCrossAndInsideGbObjectBlockVisitor refineAdapterP6(refine6PlatteCube, baseLevel, refineLevel-1);
	  //grid->accept(refineAdapterP6);

	  //GbCuboid3DPtr wallsX1X2minRef4(new GbCuboid3D(  originX1-3.0*geoOverlap   , originX2-3.0*geoOverlap  , originX1-3.0*geoOverlap
		//  , originX1+geoLength[0]+geoOverlap, originX2+geoOverlap+geoLength[1], kanalhoeheSI*0.1));



	  if (refineLevel > 0)
	  {
		 
		  RefineCrossAndInsideGbObjectHelper refineHelper(grid, refineLevel);
		  refineHelper.addGbObject( refine6PlatteCube, refineLevel-1);
                refineHelper.addGbObject( refine5PlatteCube, refineLevel);
                //refineHelper.addGbObject( refine4PlatteCube, refineLevel);
		  //refineHelper.addGbObject( refine3PlatteCube, refineLevel);
		  refineHelper.refine();
		  if(myid == 0) UBLOG(logINFO,"Refinement - end");	
	  }



      if(myid == 0) UBLOG(logINFO,"Refinement - end");
	  ////////////////////////////////////////////
	  //METIS
	  MetisPartitioningGridVisitor metisVisitor(comm, MetisPartitioningGridVisitor::LevelBased, D3Q27System::B);
	  grid->accept( metisVisitor );
	  /////////////////////////////////////////////////
	  ///interactoren
	  int bbOption1 = 0; //0=simple Bounce Back, 1=quadr. BB
	  D3Q27BoundaryConditionAdapterPtr bcObst(new D3Q27NoSlipBCAdapter(bbOption1));

	  D3Q27TriFaceMeshInteractorPtr triBridgeInteractor( new D3Q27TriFaceMeshInteractor(mesh, grid, bcObst,Interactor3D::SOLID));
	  //sd.addInteractor(triBridgeInteractor);

	  D3Q27TriFaceMeshInteractorPtr triBandInteractor( new D3Q27TriFaceMeshInteractor( meshBand, grid, bcObst,Interactor3D::SOLID) );

	  D3Q27TriFaceMeshInteractorPtr triBand2Interactor( new D3Q27TriFaceMeshInteractor( meshBand2, grid, bcObst,Interactor3D::SOLID) );

	
	  ////////////////////////////////////////////
	  /////delete solid blocks
	  if(myid == 0) UBLOG(logINFO,"deleteSolidBlocks - start");
	  SolidBlocksHelper sd(grid, comm);

	  sd.addInteractor(triBridgeInteractor);
	  sd.addInteractor(triBandInteractor);
	  sd.addInteractor(triBand2Interactor);
	  sd.addInteractor(densInteractor);
	  sd.addInteractor(velBCInteractor);
	  sd.deleteSolidBlocks();
	  if(myid == 0) UBLOG(logINFO,"deleteSolidBlocks - end");	 



	  //////////////////////////////////////

     

      unsigned long nob = grid->getNumberOfBlocks();
      unsigned long nod = nob * blocknx[0]*blocknx[1]*blocknx[2];
      unsigned long nod_real = nob * (blocknx[0]+3)*(blocknx[1]+3)*(blocknx[2]+3);
      
      double needMemAll  = double(nod_real*(27*sizeof(double) + sizeof(int)));
      double needMem  = needMemAll / double(comm->getNumberOfProcesses());

      if(myid == 0)
      {
         UBLOG(logINFO,"Number of blocks = " << nob);
         UBLOG(logINFO,"Number of nodes  = " << nod);
         UBLOG(logINFO,"Necessary memory  = " << needMemAll  << " bytes");
         UBLOG(logINFO,"Necessary memory per process = " << needMem  << " bytes");
         UBLOG(logINFO,"Available memory per process = " << availMem << " bytes");
	  UBLOG(logINFO,"Available memory per node/8.0 = " << (availMem/8.0) << " bytes");
      }
	  ////////////////////////////
	  grid->accept( metisVisitor );
	  /////kernel
      //LBMKernel3DPtr kernel(new LBMKernelETD3Q27CascadedTI(blocknx[0], blocknx[1], blocknx[2]));
	LBMKernel3DPtr kernel(new LBMKernelETD3Q27CCLB(blocknx[0], blocknx[1], blocknx[2],0)); 
//	LBMKernel3DPtr kernel(new LBMKernelETD3Q27BGK (blocknx[0], blocknx[1], blocknx[2],1));
      BCProcessorPtr bcProc(new D3Q27ETBCProcessor());
      kernel->setBCProcessor(bcProc);
	 

      SetKernelBlockVisitor kernelVisitor(kernel, nueLB, availMem, needMem);
	  
      grid->accept(kernelVisitor);
	  //////////////////////////////////
	  //undef nodes
	  if (refineLevel > 0)
	  {
		  D3Q27SetUndefinedNodesBlockVisitor undefNodesVisitor;
		  grid->accept(undefNodesVisitor);
	  }
	  //////////////////////////////////////////
	  grid->addAndInitInteractor(triBridgeInteractor);
	  grid->addAndInitInteractor(triBandInteractor);
	  grid->addAndInitInteractor(triBand2Interactor);
	  grid->addAndInitInteractor( densInteractor ); 
	  grid->addAndInitInteractor( velBCInteractor );

	    UbTimer timer;
   timer.start();
 
   grid->accept( metisVisitor );

   if(myid == 0) UBLOG(logINFO,"Write blocks - start");
   BlocksPostprocessorPtr ppblocks(new BlocksPostprocessor(grid, UbSchedulerPtr(new UbScheduler(1)), pathname + "/grid/blocks", WbWriterVtkXmlBinary::getInstance(), comm));
   if(myid == 0) ppblocks->update(0);
   if(myid == 0) UBLOG(logINFO,"Write blocks - end");

	      

   if(myid == 0) UBLOG(logINFO,"Write blocks - start");
   grid->accept( metisVisitor );
   if(myid == 0) ppblocks->update(1);
   ppblocks.reset();
   if(myid == 0) UBLOG(logINFO,"Write blocks - end");
  


      //set connectors
      D3Q27InterpolationProcessorPtr iProcessor(new D3Q27OffsetInterpolationProcessor());
      D3Q27SetConnectorsBlockVisitor setConnsVisitor(comm, true, D3Q27System::ENDDIR, nueLB, iProcessor);
      grid->accept( setConnsVisitor );

      //domain decomposition
      //PQueuePartitioningGridVisitor pqPartVisitor(numOfThreads);
      //grid->accept(pqPartVisitor);

      //initialization of decompositions
      D3Q27ETInitDistributionsBlockVisitor initVisitor(1.0);
      initVisitor.setVx1(inflowProfile);
      grid->accept(initVisitor);

      //Postprozess
	
      
      UbSchedulerPtr geoSch(new UbScheduler(1));
      D3Q27MacroscopicQuantitiesPostprocessorPtr ppgeo(
           new D3Q27MacroscopicQuantitiesPostprocessor(grid, geoSch, pathname + "/grid/nodes", WbWriterVtkXmlBinary::getInstance(), 
                                                       unitConverter, comm, true));
	  									

      grid->doPostProcess(0);
      ppgeo.reset();
      geoSch.reset();

      if(myid == 0) UBLOG(logINFO,"Preprozess - end");      

}
      


      UbSchedulerPtr visSch(new UbScheduler());
visSch->addSchedule(1,1,3);
      visSch->addSchedule(100,100,1000);
 //     visSch->addSchedule(1000,1000,100000);
 //     visSch->addSchedule(100000,100000,1000000);
	//  //TurbulenceIntensityPostprocessor tipp(grid,  pathname + "/steps/stepTI", WbWriterVtkXmlBinary::getInstance(), visSch, comm);
	  UbSchedulerPtr resSch(new UbScheduler());
      resSch->addSchedule(0,20,1000);
	  AverageValuesPostprocessor       Avpp(grid,  pathname + "/steps/stepAV", WbWriterVtkXmlBinary::getInstance(), visSch/*wann wird rausgeschrieben*/,resSch/*wann wird resettet*/,comm);
      D3Q27MacroscopicQuantitiesPostprocessor pp(grid, visSch, pathname + "/steps/step", WbWriterVtkXmlBinary::getInstance(), unitConverter, comm);// unitConverter, comm);

      UbSchedulerPtr nupsSch(new UbScheduler(10, 10, 100));
      NUPSCounterPostprocessor npr(grid, nupsSch, pathname + "/results/nups.txt", comm);

	  //}
	  mu::Parser decrViscFunc;
      decrViscFunc.SetExpr("nue0+c0/(t+1)/(t+1)");
      decrViscFunc.DefineConst("nue0", nueLB);
	  decrViscFunc.DefineConst("c0", 0.1);
	  UbSchedulerPtr DecrViscSch(new UbScheduler());
      DecrViscSch->addSchedule(10,10,1000);
	  DecreaseViscosityPostprocessor decrViscPPPtr(grid, DecrViscSch,&decrViscFunc, comm);

      cout << "PID = " << myid << " Total Physical Memory (RAM): " << MemoryUtil::getTotalPhysMem()<<endl;
      cout << "PID = " << myid << " Physical Memory currently used: " << MemoryUtil::getPhysMemUsed()<<endl;
      cout << "PID = " << myid << " Physical Memory currently used by current process: " << MemoryUtil::getPhysMemUsedByMe()<<endl;

      double endTime = 200001;
      CalculationManagerPtr calculation(new CalculationManager(grid, numOfThreads, endTime, visSch));
      if(myid == 0) UBLOG(logINFO,"Simulation-start");
      calculation->calculate();
      if(myid == 0) UBLOG(logINFO,"Simulation-end");
   }
   catch(std::exception& e)
   {
      cerr << e.what() << endl << flush;
   }
   catch(std::string& s)
   {
      cerr << s << endl;
   }
   catch(...)
   {
      cerr << "unknown exception" << endl;
   }

}
int main(int argc, char* argv[])
{

   run(argv[1]);

   return 0;
}

