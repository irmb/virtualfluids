from typing import Any, List

from typing import overload
import pyfluids.bindings.basics
import pyfluids.bindings.gpu

class BoundingBox:
    def __init__(self, min_x: float, max_x: float, min_y: float, max_y: float, min_z: float, max_z: float) -> None: ...

class Conglomerate(Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, object: Object) -> None: ...
    @staticmethod
    def make_shared() -> Conglomerate: ...
    def subtract(self, object: Object) -> None: ...

class Cuboid(Object):
    def __init__(self, min_x1: float, min_x2: float, min_x3: float, max_x1: float, max_x2: float, max_x3: float) -> None: ...

class GridBuilder:
    def __init__(self, *args, **kwargs) -> None: ...
    def get_number_of_grid_levels(self) -> int: ...

class GridFactory:
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def make() -> GridFactory: ...

class LevelGridBuilder(GridBuilder):
    def __init__(self, *args, **kwargs) -> None: ...
    def set_no_slip_boundary_condition(self, side_type: pyfluids.bindings.gpu.SideType) -> None: ...
    def set_periodic_boundary_condition(self, periodic_x: bool, periodic_y: bool, periodic_z: bool) -> None: ...
    def set_precursor_boundary_condition(self, side_type: pyfluids.bindings.gpu.SideType, file_collection: pyfluids.bindings.gpu.VelocityFileCollection, n_t_read: int, velocity_x: float = ..., velocity_y: float = ..., velocity_z: float = ..., file_level_to_grid_level_map: List[int] = ...) -> None: ...
    def set_pressure_boundary_condition(self, side_type: pyfluids.bindings.gpu.SideType, rho: float) -> None: ...
    def set_slip_boundary_condition(self, side_type: pyfluids.bindings.gpu.SideType, normal_x: float, normal_y: float, normal_z: float) -> None: ...
    def set_stress_boundary_condition(self, side_type: pyfluids.bindings.gpu.SideType, normal_x: float, normal_y: float, normal_z: float, sampling_offset: int, z0: float, dx: float) -> None: ...
    def set_velocity_boundary_condition(self, side_type: pyfluids.bindings.gpu.SideType, vx: float, vy: float, vz: float) -> None: ...

class MultipleGridBuilder(LevelGridBuilder):
    def __init__(self, *args, **kwargs) -> None: ...
    def add_coarse_grid(self, start_x: float, start_y: float, start_z: float, end_x: float, end_y: float, end_z: float, delta: float) -> None: ...
    @overload
    def add_geometry(self, solid_object: Object) -> None: ...
    @overload
    def add_geometry(self, solid_object: Object, level: int) -> None: ...
    @overload
    def add_grid(self, grid_shape: Object) -> None: ...
    @overload
    def add_grid(self, grid_shape: Object, level_fine: int) -> None: ...
    def build_grids(self, lbm_or_gks: pyfluids.bindings.basics.LbmOrGks, enable_thin_walls: bool) -> None: ...
    def get_number_of_levels(self) -> int: ...
    @staticmethod
    def make_shared(grid_factory: GridFactory) -> MultipleGridBuilder: ...

class Object:
    def __init__(self, *args, **kwargs) -> None: ...

class Sphere(Object):
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def make_shared() -> Sphere: ...

class TriangularMesh(Object):
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def make() -> TriangularMesh: ...
