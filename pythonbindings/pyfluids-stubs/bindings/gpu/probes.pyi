r"""
=======================================================================================
 ____          ____    __    ______     __________   __      __       __        __
 \    \       |    |  |  |  |   _   \  |___    ___| |  |    |  |     /  \      |  |
  \    \      |    |  |  |  |  |_)   |     |  |     |  |    |  |    /    \     |  |
   \    \     |    |  |  |  |   _   /      |  |     |  |    |  |   /  /\  \    |  |
    \    \    |    |  |  |  |  | \  \      |  |     |   \__/   |  /  ____  \   |  |____
     \    \   |    |  |__|  |__|  \__\     |__|      \________/  /__/    \__\  |_______|
      \    \  |    |   ________________________________________________________________
       \    \ |    |  |  ______________________________________________________________|
        \    \|    |  |  |         __          __     __     __     ______      _______
         \         |  |  |_____   |  |        |  |   |  |   |  |   |   _  \    /  _____)
          \        |  |   _____|  |  |        |  |   |  |   |  |   |  | \  \   \_______
           \       |  |  |        |  |_____   |   \_/   |   |  |   |  |_/  /    _____  |
            \ _____|  |__|        |________|   \_______/    |__|   |______/    (_______/

  This file is part of VirtualFluids. VirtualFluids is free software: you can
  redistribute it and/or modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation, either version 3 of
  the License, or (at your option) any later version.

  VirtualFluids is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  for more details.

  You should have received a copy of the GNU General Public License along
  with VirtualFluids (see COPYING.txt). If not, see <http://www.gnu.org/licenses/>.

! \file probes.pyi
! \ingroup gpu
! \author Henry Korb
=======================================================================================
"""
from __future__ import annotations
from typing import ClassVar, List

from pyfluids.bindings.gpu import PreCollisionInteractor


class Statistic:
    __members__: ClassVar[dict] = ...  # read-only
    Instantaneous: ClassVar[Statistic] = ...
    Means: ClassVar[Statistic] = ...
    SpatialCovariances: ClassVar[Statistic] = ...
    SpatialFlatness: ClassVar[Statistic] = ...
    SpatialMeans: ClassVar[Statistic] = ...
    SpatialSkewness: ClassVar[Statistic] = ...
    SpatioTemporalCovariances: ClassVar[Statistic] = ...
    SpatioTemporalFlatness: ClassVar[Statistic] = ...
    SpatioTemporalMeans: ClassVar[Statistic] = ...
    SpatioTemporalSkewness: ClassVar[Statistic] = ...
    Variances: ClassVar[Statistic] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, arg0: int) -> None: ...
    def __eq__(self, arg0: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: object) -> bool: ...
    def __setstate__(self, arg0: int) -> None: ...
    @property
    def name(self) -> str: ...


class Probe(PreCollisionInteractor):
    def __init__(self, *args, **kwargs) -> None: ...
    def add_all_available_statistics(self) -> None: ...
    def add_statistic(self, variable: Statistic) -> None: ...
    def set_file_name_to_n_out(self) -> None: ...


class PlanarAverageProbe(Probe):
    def __init__(self, probe_name: str, output_path: str, t_start_avg: int, t_start_tmp_avg: int, t_avg: int, t_start_out: int, t_out: int, plane_normal: str) -> None: ...


class PlaneProbe(Probe):
    def __init__(self, probe_name: str, output_path: str, t_start_avg: int, t_avg: int, t_start_out: int, t_out: int) -> None: ...
    def set_probe_plane(self, pos_x: float, pos_y: float, pos_z: float, delta_x: float, delta_y: float, delta_z: float) -> None: ...


class PointProbe(Probe):
    def __init__(self, probe_name: str, output_path: str, t_start_avg: int, t_avg: int, t_start_out: int, t_out: int, output_timeseries: bool) -> None: ...
    def add_probe_point(self, point_coord_x: float, point_coord_y: float, point_coord_z: float) -> None: ...
    def add_probe_points_from_list(self, point_coords_x: List[float], point_coords_y: List[float], point_coords_z: List[float]) -> None: ...
    def add_probe_points_from_x_normal_plane(self, pos_x: float, pos0_y: float, pos0_z: float, pos1_y: float, pos1_z: float, n_y: int, n_z: int) -> None: ...


class WallModelProbe(Probe):
    def __init__(self, probe_name: str, output_path: str, t_start_avg: int, t_start_tmp_avg: int, t_avg: int, t_start_out: int, t_out: int) -> None: ...
    def set_evaluate_pressure_gradient(self, eval_press_grad: bool) -> None: ...
    def set_force_output_to_stress(self, output_stress: bool) -> None: ...
