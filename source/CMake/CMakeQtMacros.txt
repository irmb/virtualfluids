#####################################################################
###   DARF ERST  - N A C H - PROJECT BEFEHL VEINGEBUNDEN WERDEN     #
#####################################################################
IF(NOT CMAKE_CXX_COMPILER)
      MESSAGE(FATAL_ERROR "before SET_CAB_COMPILER-Macro PROJECT-Macro has to be called")
ENDIF()
#####################################################################
###   OKAY, WENN  CMAKE_CXX_COMPILER gesetzte, dann wurd Project ausgefuehrt
#####################################################################

SET(NEED_QT "YES")

IF(NOT QT_FOUND)
   SET(QT_REQUIRED TRUE)
   INCLUDE(${CMAKE_ROOT}/Modules/FindQt.cmake)
ENDIF(NOT QT_FOUND)

################################################################
###                  QT_IMAGE_COLLECTION                     ###
################################################################
MACRO(QT_IMAGE_COLLECTION project output_file)
  FOREACH(image ${ARGN})
    #SET(image_collection ${image_collection} ${CMAKE_CURRENT_SOURCE_DIR}/${image})
    SET(image_collection ${image_collection} ${image})
  ENDFOREACH(image ${ARGN})
  ADD_CUSTOM_COMMAND(
                     #OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${output_file}
                     OUTPUT  ${output_file}
                     COMMAND ${QT_UIC_EXECUTABLE}
                     #ARGS -embed ${project} -o ${CMAKE_CURRENT_BINARY_DIR}/${output_file} ${image_collection}
                     ARGS -embed ${project} -o ${output_file} ${image_collection}
                     DEPENDS ${image_collection}
                    )
  SET(GENERATED_FILES ${GENERATED_FILES} ${output_file}) 
ENDMACRO(QT_IMAGE_COLLECTION)

################################################################
###                     QT_WRAP_CPP3                         ###
### QT_WRAP_CPP3 outdirectory outfiles infileList)           ###
################################################################
MACRO(QT_WRAP_CPP3 outdirectory outfiles)
  MAKE_DIRECTORY(outdirectory)
  FOREACH(infile ${ARGN}) #ARGN is infiles-list!!!
    GET_FILENAME_COMPONENT(outname ${infile} NAME_WE)
    SET(outfile ${outdirectory}/${outname}MOC.cpp)
    ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
		       PRE_BUILD
                       COMMAND ${QT_MOC_EXECUTABLE}
                       ARGS -o ${outfile} ${infile}
                       MAIN_DEPENDENCY ${infile})
    SET(${outfiles} ${${outfiles}} ${outfile})
  ENDFOREACH(infile ${infiles})
  SET(GENERATED_FILES ${GENERATED_FILES} ${${outfiles}}) 
ENDMACRO(QT_WRAP_CPP3)

################################################################
###                     QT_WRAP_UI3                          ###
### QT_WRAP_UI3(houtdir   cppoutdir   mocoutdir              ###
###             houtfiles cppoutfiles mocoutfiles)           ###
###             infileList(=.ui files)             )         ###
################################################################
MACRO(QT_WRAP_UI3 houtdir cppoutdir mocoutdir houtfiles cppoutfiles mocoutfiles)
  FOREACH(infile ${ARGN}) #ARGN is infiles-list!!!
    GET_FILENAME_COMPONENT(filename_we ${infile} NAME_WE)
    ########## HEADER ######################################
    SET(houtfile ${houtdir}/${filename_we}.h)
    ADD_CUSTOM_COMMAND(OUTPUT  ${houtfile}
                       PRE_BUILD
                       COMMAND ${QT_UIC_EXECUTABLE}
                       ARGS -o ${houtfile} ${infile}
                       DEPENDS ${infile}
    )
    SET(${houtfiles} ${${houtfiles}} ${houtfile})
    ########## CPP #########################################
    SET(cppoutfile ${cppoutdir}/${filename_we}.cpp)
    ADD_CUSTOM_COMMAND(OUTPUT  ${cppoutfile}
                       PRE_BUILD
                       COMMAND ${QT_UIC_EXECUTABLE}
                       ARGS ${infile} -i ${houtfile} -o ${cppoutfile}
                       DEPENDS ${infile}
    )
    SET(${cppoutfiles} ${${cppoutfiles}} ${cppoutfile})
    ########## MOC #########################################
    SET(mocoutfile ${mocoutdir}/${filename_we}MOC.cpp)
    ADD_CUSTOM_COMMAND(OUTPUT ${mocoutfile}
                       PRE_BUILD
                       COMMAND ${QT_MOC_EXECUTABLE}
                       ARGS -o ${mocoutfile} ${houtfile}
                       MAIN_DEPENDENCY ${houtfile})
    SET(${mocoutfiles} ${${mocoutfiles}} ${mocoutfile})
  ENDFOREACH(infile ${infiles})
  SET(GENERATED_FILES ${GENERATED_FILES} ${${houtfiles}} ${${cppoutfiles}} ${${mocoutfiles}}) 
ENDMACRO(QT_WRAP_UI3)

####################################################################
###                 QT4_WRAP_RESOURCES                           ###
### QT4_WRAP_RESOURCES(resourcename oQRCFile oCPPFile bildfiles) ###
####################################################################
MACRO(QT4_WRAP_RESOURCES resourcename oQRCFile oCPPFile)
  FOREACH(image ${ARGN}) #ARGN is infiles-list!!!
    GET_FILENAME_COMPONENT(OUTDIR ${image} PATH)
  ENDFOREACH(image ${ARGN})
  
  SET(${oQRCFile} ${OUTDIR}/${resourcename}.qrc)
  
  FILE(WRITE ${${oQRCFile}} "<!DOCTYPE RCC>\n<RCC>\n <qresource>\n")
  FOREACH(image ${ARGN}) #ARGN is infiles-list!!!
    GET_FILENAME_COMPONENT(image ${image} NAME)
    FILE(APPEND ${${oQRCFile}} "<file>${image}</file>\n")
  ENDFOREACH(image ${ARGN})
  FILE(APPEND ${${oQRCFile}} "</qresource>\n</RCC>")

  GET_FILENAME_COMPONENT(filename_we ${${oQRCFile}} NAME_WE)
 
  SET(${oCPPFile} ${OUTDIR}/${filename_we}_QRC.cpp)
  ADD_CUSTOM_COMMAND(OUTPUT ${${oCPPFile}}
                     PRE_BUILD
                     COMMAND ${QT_RCC_EXECUTABLE}
                     ARGS -name "${filename_we}" -no-compress ${${oQRCFile}} -o ${${oCPPFile}}
                     MAIN_DEPENDENCY ${${oQRCFile}} ${${imagefiles}})
  SET(GENERATED_FILES ${GENERATED_FILES} ${${oCPPFile}}) 
  #SET(GENERATED_FILES ${GENERATED_FILES} ${${oQRCFile}} ) wenn man es hier rauslöscht muss man jedes mal cmake aufrufen nach clean all um es zu erzeugen :(
ENDMACRO(QT4_WRAP_RESOURCES)

################################################################
###                     QT4_WRAP_UI                          ###
### QT4_WRAP_UI(outdir outfiles infileList(=.ui files))      ###
### example:                                                 ###
###   input:    TestClass.ui                                 ###
###   outfiles: outdir/TestClass.h (generated if not exist)  ###
###             outdir/TestClassUI.h                         ###
###             outdir/TestClassMOC.cpp                      ### 
################################################################
MACRO(QT4_WRAP_UI outdir outfiles)
  SET(${outfiles} )  #empty outfiles
  SET(houtfiles )    #just empty the variable!

  FOREACH(infile ${ARGN}) #ARGN is infiles-list!!!
    GET_FILENAME_COMPONENT(filename_we ${infile} NAME_WE)

    ########## UI_HEADER ######################################
    SET(ui_houtfile ${outdir}/${QT_GEN_DIR}/${filename_we}UI.h)
    STRING(REGEX REPLACE "//" "/" ui_houtfile ${ui_houtfile}) #doppeltes // entfernen bei nicht gesetztem QT_GEN_DIR
  
    ADD_CUSTOM_COMMAND( OUTPUT  ${ui_houtfile}
                        PRE_BUILD
                        COMMAND ${QT_UIC_EXECUTABLE}
                        ARGS -o ${ui_houtfile} ${infile}
                        MAIN_DEPENDENCY ${infile}
                       )
    SET(${outfiles} ${${outfiles}} ${ui_houtfile})
    
    ########## HEADER ######################################
    SET(houtfile ${outdir}/${filename_we}.h)
    IF(NOT EXISTS ${houtfile})
       FILE(WRITE ${houtfile} "#ifndef ${filename_we}_H\n#define ${filename_we}_H\n\n")
       FILE(APPEND ${houtfile} "#include \"${filename_we}UI.h\"\n\n")
       FILE(APPEND ${houtfile} "class ${filename_we} : public QWidget \n")
       FILE(APPEND ${houtfile} "{\n\n   Q_OBJECT\n\npublic:\n ${filename_we}()\n")
       FILE(APPEND ${houtfile} "   {\n      ui.setupUi(this);\n   }\n\n")
       FILE(APPEND ${houtfile} "protected:\n\n")
       FILE(APPEND ${houtfile} "private:\nUi::${filename_we} ui;\n\n};\n\n")
       FILE(APPEND ${houtfile} "#endif\n")
    ENDIF(NOT EXISTS ${houtfile})
    SET(houtfiles ${houtfiles}  ${houtfile})
    
    ########## MOC-CPP #####################################
    SET(mocfile ${outdir}/${QT_GEN_DIR}/${filename_we}MOC.cpp)
    STRING(REGEX REPLACE "//" "/" mocfile ${mocfile}) #doppeltes // entfernen bei nicht gesetztem QT_GEN_DIR
    IF(WIN32)
      ADD_CUSTOM_COMMAND(OUTPUT ${mocfile}
                         PRE_BUILD
                         COMMAND ${QT_MOC_EXECUTABLE}
                         ARGS -o ${mocfile} ${houtfile}
                         MAIN_DEPENDENCY ${ui_houtfile} ${houtfile} 
                        )
    ELSE(WIN32)  #weil sonst xxxUI.h unter Linux nicht erstellt wird!!!
      ADD_CUSTOM_COMMAND(OUTPUT ${mocfile}
                         PRE_BUILD
                         COMMAND ${QT_MOC_EXECUTABLE}
                         ARGS -o ${mocfile} ${houtfile}
                         MAIN_DEPENDENCY  ${houtfile} ${ui_houtfile}
                        )
    ENDIF(WIN32)
    SET(${outfiles} ${${outfiles}} ${mocfile})
  ENDFOREACH(infile ${infiles})
  
  SET(GENERATED_FILES ${GENERATED_FILES} ${${outfiles}} ) 
  SET(${outfiles} ${${outfiles}} ${houtfiles})
ENDMACRO(QT4_WRAP_UI)

################################################################
###                     QT4_WRAP_CPP                         ###
### QT4_WRAP_CPP(outdirectory outfiles infileList)           ###
################################################################
MACRO(QT4_WRAP_CPP outdir outfiles)
  FOREACH(infile ${ARGN}) #ARGN is infiles-list!!!
    GET_FILENAME_COMPONENT(outname ${infile} NAME_WE)
    SET(outfile ${outdir}/${outname}MOC.cpp)
    ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
		       PRE_BUILD
                       COMMAND ${QT_MOC_EXECUTABLE}
                       ARGS -o ${outfile} ${infile}
                       MAIN_DEPENDENCY ${infile})
    #SET(${outfiles} ${${outfiles}} ${outfile})
    SET(${outfiles} "${${outfiles}}" "${outfile}")
  ENDFOREACH(infile ${infiles})
  SET(GENERATED_FILES ${GENERATED_FILES} ${${outfiles}}) 
ENDMACRO(QT4_WRAP_CPP)


################################################################
###               QT4_GET_TOBEMOCED_HEADERS                  ###
### QT4_GET_TOBEMOCED_HEADERS(toBeMocedFiles infileList)     ###
################################################################
MACRO(QT4_GET_TOBEMOCED_HEADERS toBeMocedFiles)
   SET(${toBeMocedFiles} "")
   FOREACH(infile ${ARGN}) #ARGN is infiles-list!!!
      FILE(READ "${infile}" file)
      #STRING(REGEX MATCH Q_OBJECT check ${file})
      STRING(REGEX MATCH "Q_OBJECT" check "${file}")
      IF(${check} MATCHES "Q_OBJECT")
         SET(${toBeMocedFiles} ${${toBeMocedFiles}}  ${infile})
      ENDIF(${check} MATCHES "Q_OBJECT")
  ENDFOREACH(infile ${infiles})
ENDMACRO(QT4_GET_TOBEMOCED_HEADERS)

#################################################################################
###   COLLECT_QT_PACKAGE_DATA( currentDir  sourceGroupName outFiles)          ###
### collects header and cpp file of current dir and add them to "outfiles"    ###
### collects ui and Q_OBJECT files and adds build rules                       ###
### all files will be put to the SOURCE_GROUP-folder "sourceGroupName"        ###
### and this one will be with subfolders if  WITH_SUBFOLDERS_FOR_SG==YES      ###
### all generated files will be added to a spefic folder QT_GEN_DIR           ###
#################################################################################
MACRO(COLLECT_QT_PACKAGE_DATA currentDir sourceGroupName outFiles)
  IF(QT_GEN_DIR)
    #stellt sicher, dass QT_GEN_DIR mit slash am Anfang
    STRING(REGEX REPLACE "/" "" QT_GEN_DIR "${QT_GEN_DIR}")
    SET(QT_GEN_DIR "/${QT_GEN_DIR}")
  ENDIF()

  FILE(GLOB QT_PACKAGE_HEADER_FILES ${currentDir}/*.h   )
  FILE(GLOB QT_PACKAGE_CPP_FILES    ${currentDir}/*.cpp )
  FILE(GLOB QT_PACKAGE_CXX_FILES    ${currentDir}/*.cxx )
  FILE(GLOB QT_PACKAGE_HPP_FILES    ${currentDir}/*.hpp )
  FILE(GLOB QT_PACKAGE_C_FILES    ${currentDir}/*.c) 

  IF(NOT NEED_VTK)
    FILE(GLOB VTK_FILES ${currentDir}/*vtk*  )
    REMOVE(QT_PACKAGE_HEADER_FILES ${VTK_FILES} )
    REMOVE(QT_PACKAGE_CPP_FILES    ${VTK_FILES} )
    REMOVE(QT_PACKAGE_CXX_FILES    ${VTK_FILES} )
    REMOVE(QT_PACKAGE_C_FILES      ${VTK_FILES} )
    REMOVE(QT_PACKAGE_HPP_FILES    ${VTK_FILES} )
  ENDIF(NOT NEED_VTK)
  
  IF(CAB_PACKAGE_DEFINTIONS)
    SET_SOURCE_FILES_PROPERTIES(${QT_PACKAGE_CPP_FILES} PROPERTIES COMPILE_FLAGS ${CAB_PACKAGE_DEFINTIONS})
    SET_SOURCE_FILES_PROPERTIES(${QT_PACKAGE_CXX_FILES} PROPERTIES COMPILE_FLAGS ${CAB_PACKAGE_DEFINTIONS})
  ENDIF(CAB_PACKAGE_DEFINTIONS)
  
  SET(TEMP_FILES) #emty TEMP_FILES
  SET(TEMP_FILES ${QT_PACKAGE_HEADER_FILES} ${QT_PACKAGE_CPP_FILES} ${QT_PACKAGE_CXX_FILES} ${QT_PACKAGE_C_FILES} ${QT_PACKAGE_HPP_FILES})
  CAB_SOURCE_GROUP(${sourceGroupName} ${TEMP_FILES})
  
  IF(QT_FOUND)
    ################################################################
    ###         Qt4      Resources                               ###
    ################################################################
    FILE(GLOB IMAGES ${currentDir}/*.png
                     ${currentDir}/*.jpg
                     ${currentDir}/*.gif
                     ${currentDir}/*.bmp )

    IF(IMAGES)
      #dynamische resourcename-filename bestimmung...
      SET(RESOURCENAMELIST ${currentDir})
      STRING(REGEX REPLACE "/" ";" RESOURCENAMELIST "${RESOURCENAMELIST}")
      LIST(LENGTH RESOURCENAMELIST INDEX) 
      MATH(EXPR INDEX "${INDEX}-2")     
      LIST(GET RESOURCENAMELIST ${INDEX} RESOURCENAME)
      IF(${RESOURCENAME} STREQUAL "presentation")
         MATH(EXPR INDEX "${INDEX}-1")     
         LIST(GET RESOURCENAMELIST ${INDEX} RESOURCENAME)
      ENDIF()
      #und nu geht das los

      QT4_WRAP_RESOURCES(${RESOURCENAME} qrcfile cppfile ${IMAGES})
      
      REMOVE(TEMP_FILES ${cppfile} )
      SET(TEMP_FILES ${TEMP_FILES} ${cppfile})
      CAB_SOURCE_GROUP(${sourceGroupName} ${cppfile})

      IF(WIN32)
        SET(${outFiles} ${${outFiles}} ${qrcfile})
        CAB_SOURCE_GROUP(${sourceGroupName} ${qrcfile})
      ENDIF(WIN32)
    ENDIF(IMAGES)
    
    ################################################################
    ###         Qt4      UI FILES                                ###
    ################################################################
    FILE(GLOB UI_FILES ${currentDir}/*.ui)            #collect ui files
    IF(UI_FILES)
      MAKE_DIRECTORY(${currentDir}${QT_GEN_DIR})
      QT4_WRAP_UI(${currentDir} OUTFILES ${UI_FILES})   #wrap ui files
      REMOVE(TEMP_FILES ${OUTFILES} )
      SET(TEMP_FILES ${TEMP_FILES} ${OUTFILES} )
      
      CAB_SOURCE_GROUP(${sourceGroupName} ${OUTFILES})
      
      #add generated directory to include path
      INCLUDE_DIRECTORIES( ${currentDir}${QT_GEN_DIR} )

      IF(WIN32)
        SET(${outFiles} ${${outFiles}} ${UI_FILES})
        CAB_SOURCE_GROUP(${sourceGroupName} ${UI_FILES})
      ENDIF(WIN32)
    ENDIF(UI_FILES)
    
    ################################################################
    ###       Qt4        HEADERS TO BE MOCED                     ###
    ################################################################
    SET(HEADER_FILES_FOR_MOCCHECK ${QT_PACKAGE_HEADER_FILES})
    
    #remove header files that are allready processed by QT4_WRAP_UI
    REMOVE(HEADER_FILES_FOR_MOCCHECK ${OUTFILES} )
    
    QT4_GET_TOBEMOCED_HEADERS(MOC_CLASSES ${HEADER_FILES_FOR_MOCCHECK})
    IF(MOC_CLASSES)    
      MAKE_DIRECTORY(${currentDir}${QT_GEN_DIR})
      SET(MOC_FILES ) #empty MOC_FILES
      QT4_WRAP_CPP(${currentDir}${QT_GEN_DIR} MOC_FILES ${MOC_CLASSES})
      REMOVE(TEMP_FILES ${MOC_FILES})
      SET(TEMP_FILES ${TEMP_FILES} ${MOC_FILES})
      CAB_SOURCE_GROUP(${sourceGroupName} ${MOC_FILES})
    ENDIF(MOC_CLASSES)
    
  ELSEIF(QT_FOUND)
    MESSAGE("Could not collect Qt Package data.\n Qt was not found on your system.")
  ENDIF(QT_FOUND)
  
  SET(${outFiles} ${${outFiles}} ${TEMP_FILES})
ENDMACRO(COLLECT_QT_PACKAGE_DATA)

##################################################################################################################
###   COLLECT_QT_PACKAGE_DATA_WITH_OPTION( currentDir  sourceGroupName outFiles [outOption] [outSourceGroupName]) ###
### collects header and cpp file of current dir and add them to "outfiles"                                     ###
### all files will be put to the SOURCE_GROUP-folder "sourceGroupName"                                         ###
### and this one will be with subfolders if  WITH_SUBFOLDERS_FOR_SG==YES                                       ###
##################################################################################################################
MACRO(COLLECT_QT_PACKAGE_DATA_WITH_OPTION currentDir outFiles)
  STRING(REGEX REPLACE "(.*)/source/(.*)" "\\2" SOURCE_GROUP_NAME "${currentDir}")
  STRING(REGEX REPLACE   "/" "_" OPTION_LABEL "${SOURCE_GROUP_NAME}")
  STRING(REGEX REPLACE   ":" ""  OPTION_LABEL "${OPTION_LABEL}")
  STRING(TOUPPER ${OPTION_LABEL} OPTION_LABEL)  
  
  SET(OPTION_LABEL "BUILD_${OPTION_LABEL}")
  OPTION(${OPTION_LABEL} "${currentDir}" ON)

  IF( ${OPTION_LABEL} ) 
     COLLECT_QT_PACKAGE_DATA( ${currentDir} ${SOURCE_GROUP_NAME} ${outFiles})
  ENDIF(${OPTION_LABEL})

  IF(${ARGC} EQUAL 3)
    SET( ${ARGV2} ${OPTION_LABEL} )
  ENDIF()

  IF(${ARGC} EQUAL 4)
     SET( ${ARGV3} ${SOURCE_GROUP_NAME} )
  ENDIF()
  
ENDMACRO(COLLECT_QT_PACKAGE_DATA_WITH_OPTION  currentDir outFiles)