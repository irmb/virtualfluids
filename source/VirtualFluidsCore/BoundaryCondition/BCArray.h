#ifndef BCArray_H
#define BCArray_H

#include "D3Q27BoundaryCondition.h"
#include "basics/container/CbArray3D.h"

#include <typeinfo>

#include <boost/serialization/serialization.hpp>
#include <boost/shared_ptr.hpp>

typedef boost::shared_ptr<D3Q27BoundaryCondition> BCClassPtr;

class BCArray;
typedef boost::shared_ptr<BCArray> BCArrayPtr;

class BCArray
{
public:
   //////////////////////////////////////////////////////////////////////////
   BCArray();
   //////////////////////////////////////////////////////////////////////////
   BCArray(std::size_t nx1, std::size_t nx2, std::size_t nx3);
   //////////////////////////////////////////////////////////////////////////
   BCArray(std::size_t nx1, std::size_t nx2, std::size_t nx3, int val);
   //////////////////////////////////////////////////////////////////////////
   virtual ~BCArray();
   //////////////////////////////////////////////////////////////////////////
   inline std::size_t getNX1() const;
   //////////////////////////////////////////////////////////////////////////
   inline std::size_t getNX2() const;
   //////////////////////////////////////////////////////////////////////////
   inline std::size_t getNX3() const;
   //////////////////////////////////////////////////////////////////////////
   void resize(std::size_t nx1, std::size_t nx2, std::size_t nx3);
   //////////////////////////////////////////////////////////////////////////
   void resize(std::size_t nx1, std::size_t nx2, std::size_t nx3, int val);
   //////////////////////////////////////////////////////////////////////////
   bool validIndices(std::size_t x1, std::size_t x2, std::size_t x3)  const;
   //////////////////////////////////////////////////////////////////////////
   inline bool hasBC(std::size_t x1, std::size_t x2, std::size_t x3)  const;
   //////////////////////////////////////////////////////////////////////////
   void setBC(std::size_t x1, std::size_t x2, std::size_t x3, BCClassPtr const& bc);
   //////////////////////////////////////////////////////////////////////////
   inline int getBCVectorIndex(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   inline const BCClassPtr getBC(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   inline BCClassPtr getBC(std::size_t x1, std::size_t x2, std::size_t x3);
   //////////////////////////////////////////////////////////////////////////
   void setSolid(std::size_t x1, std::size_t x2, std::size_t x3);
   //////////////////////////////////////////////////////////////////////////
   inline bool isSolid(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   void setFluid(std::size_t x1, std::size_t x2, std::size_t x3);
   //////////////////////////////////////////////////////////////////////////
   //true : FLUID or BC
   //false: UNDEFINED or SOLID
   inline bool isFluid(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   inline bool isFluidWithoutBC(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   inline bool isUndefined(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   void setUndefined(std::size_t x1, std::size_t x2, std::size_t x3);
   //////////////////////////////////////////////////////////////////////////
   inline bool isInterfaceCF(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   void setInterfaceCF(std::size_t x1, std::size_t x2, std::size_t x3);
   //////////////////////////////////////////////////////////////////////////
   inline bool isInterfaceFC(std::size_t x1, std::size_t x2, std::size_t x3) const;
   //////////////////////////////////////////////////////////////////////////
   void setInterfaceFC(std::size_t x1, std::size_t x2, std::size_t x3);
   //////////////////////////////////////////////////////////////////////////
   std::size_t getNumberOfSolidEntries() const;
   //////////////////////////////////////////////////////////////////////////
   std::size_t getNumberOfFluidEntries() const;
   //////////////////////////////////////////////////////////////////////////
   std::size_t getNumberOfFluidWithoutBCEntries() const;
   //////////////////////////////////////////////////////////////////////////
   std::size_t getNumberOfBCEntries() const;
   //////////////////////////////////////////////////////////////////////////
   std::size_t getNumberOfUndefinedEntries() const;
   //////////////////////////////////////////////////////////////////////////
   std::size_t getBCVectorSize() const;
   //////////////////////////////////////////////////////////////////////////
   std::string toString() const;
   //////////////////////////////////////////////////////////////////////////

   static const int SOLID;     
   static const int FLUID;     
   static const int INTERFACECF; 
   static const int INTERFACEFC; 
   static const int UNDEFINED; 

private:
   //////////////////////////////////////////////////////////////////////////
   void deleteBCAndSetType(std::size_t x1, std::size_t x2, std::size_t x3, int type);
   //////////////////////////////////////////////////////////////////////////
   void deleteBC(std::size_t x1, std::size_t x2, std::size_t x3);

   friend class boost::serialization::access;
   template<class Archive>
   void serialize(Archive & ar, const unsigned int version)
   {
      ar & bcindexmatrix;
      ar & bcvector;
      ar & indexContainer;
   }
protected:
   //////////////////////////////////////////////////////////////////////////
   //-1 solid // -2 fluid -...
   CbArray3D<int, IndexerX3X2X1> bcindexmatrix;
   std::vector<BCClassPtr> bcvector;
   std::vector<int> indexContainer;
};


//////////////////////////////////////////////////////////////////////////
inline std::size_t BCArray::getNX1() const { return bcindexmatrix.getNX1(); }
//////////////////////////////////////////////////////////////////////////
inline std::size_t BCArray::getNX2() const { return bcindexmatrix.getNX2(); }
//////////////////////////////////////////////////////////////////////////
inline std::size_t BCArray::getNX3() const { return bcindexmatrix.getNX3(); }
//////////////////////////////////////////////////////////////////////////
inline bool BCArray::hasBC(std::size_t x1, std::size_t x2, std::size_t x3)  const
{
   return bcindexmatrix(x1, x2, x3) >= 0;
}
//////////////////////////////////////////////////////////////////////////
inline int BCArray::getBCVectorIndex(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   return bcindexmatrix(x1, x2, x3);
}
//////////////////////////////////////////////////////////////////////////
inline const BCClassPtr  BCArray::getBC(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   int index = bcindexmatrix(x1, x2, x3);
   if (index < 0) return BCClassPtr(); //=> NULL Pointer

   return bcvector[index];
}
//////////////////////////////////////////////////////////////////////////
inline BCClassPtr BCArray::getBC(std::size_t x1, std::size_t x2, std::size_t x3)
{
   int index = bcindexmatrix(x1, x2, x3);
   if (index < 0) return BCClassPtr(); //=> NULL Pointer

   return bcvector[index];
}
//////////////////////////////////////////////////////////////////////////
inline bool BCArray::isSolid(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   return bcindexmatrix(x1, x2, x3) == SOLID;
}
//////////////////////////////////////////////////////////////////////////
//true : FLUID or BC
//false: UNDEFINED or SOLID
inline bool BCArray::isFluid(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   int tmp = bcindexmatrix(x1, x2, x3);
   return (tmp == FLUID || tmp >= 0);
}
//////////////////////////////////////////////////////////////////////////
inline bool BCArray::isFluidWithoutBC(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   return bcindexmatrix(x1, x2, x3) == FLUID;
}
//////////////////////////////////////////////////////////////////////////
inline bool BCArray::isUndefined(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   return bcindexmatrix(x1, x2, x3) == UNDEFINED;
}
//////////////////////////////////////////////////////////////////////////
inline bool BCArray::isInterfaceCF(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   return bcindexmatrix(x1, x2, x3) == INTERFACECF;
}
//////////////////////////////////////////////////////////////////////////
inline bool BCArray::isInterfaceFC(std::size_t x1, std::size_t x2, std::size_t x3) const
{
   return bcindexmatrix(x1, x2, x3) == INTERFACEFC;
}

#endif 
