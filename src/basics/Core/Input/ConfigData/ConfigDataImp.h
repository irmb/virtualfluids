#ifndef CONFIGDATAIMP_H
#define CONFIGDATAIMP_H

#include "ConfigData.h"

#include <memory>
#include <string>

class ConfigDataImp : public ConfigData
{
public:
    static std::shared_ptr<ConfigDataImp> getNewInstance();

    real getViscosity() override;
    uint getNumberOfDevices() override;
    std::vector<uint> getDevices() override;
    std::string getOutputPath() override;
    std::string getPrefix() override;
    std::string getGridPath() override;
    bool getPrintOutputFiles() override;
    bool getGeometryValues() override;
    bool getCalc2ndOrderMoments() override;
    bool getCalc3rdOrderMoments() override;
    bool getCalcHighOrderMoments() override;
    bool getReadGeo() override;
    bool getCalcMedian() override;
    bool getCalcDragLift() override;
    bool getCalcCp() override;
    bool getWriteVeloASCIIfiles() override;
    bool getCalcPlaneConc() override;
    bool getConcFile() override;
    bool getStreetVelocityFile() override;
    bool getUseMeasurePoints() override;
    bool getUseWale() override;
    bool getUseInitNeq() override;
    bool getSimulatePorousMedia() override;
    uint getD3Qxx() override;
    uint getTEnd() override;
    uint getTOut() override;
    uint getTStartOut() override;
    uint getTimeCalcMedStart() override;
    uint getTimeCalcMedEnd() override;
    uint getPressInID() override;
    uint getPressOutID() override;
    uint getPressInZ() override;
    uint getPressOutZ() override;
    bool getDiffOn() override;
    uint getDiffMod() override;
    real getDiffusivity() override;
    real getTemperatureInit() override;
    real getTemperatureBC() override;
    real getVelocity() override;
    real getViscosityRatio() override;
    real getVelocityRatio() override;
    real getDensityRatio() override;
    real getPressRatio() override;
    real getRealX() override;
    real getRealY() override;
    real getFactorPressBC() override;
    std::string getGeometryFileC() override;
    std::string getGeometryFileM() override;
    std::string getGeometryFileF() override;
    uint getClockCycleForMP() override;
    uint getTimestepForMP() override;
    real getForcingX() override;
    real getForcingY() override;
    real getForcingZ() override;
    real getQuadricLimiterP() override;
    real getQuadricLimiterM() override;
    real getQuadricLimiterD() override;
    bool getCalcParticles() override;
    int getParticleBasicLevel() override;
    int getParticleInitLevel() override;
    int getNumberOfParticles() override;
    real getStartXHotWall() override;
    real getEndXHotWall() override;
    std::vector<std::string> getPossNeighborFilesX() override;
    std::vector<std::string> getPossNeighborFilesY() override;
    std::vector<std::string> getPossNeighborFilesZ() override;
    // std::vector<std::string> getPossNeighborFilesX();
    // std::vector<std::string> getPossNeighborFilesY();
    // std::vector<std::string> getPossNeighborFilesZ();
    int getTimeDoCheckPoint() override;
    int getTimeDoRestart() override;
    bool getDoCheckPoint() override;
    bool getDoRestart() override;
    uint getMaxLevel() override;
    std::vector<int> getGridX() override;
    std::vector<int> getGridY() override;
    std::vector<int> getGridZ() override;
    std::vector<int> getDistX() override;
    std::vector<int> getDistY() override;
    std::vector<int> getDistZ() override;
    std::vector<bool> getNeedInterface() override;
    std::string getMainKernel() override;
    bool getMultiKernelOn() override;
    std::vector<int> getMultiKernelLevel() override;
    std::vector<std::string> getMultiKernelName() override;

    void setViscosity(real viscosity);
    void setNumberOfDevices(uint numberOfDevices);
    void setDevices(std::vector<uint> devices);
    void setOutputPath(std::string outputPath);
    void setPrefix(std::string prefix);
    void setGridPath(std::string gridPath);
    void setPrintOutputFiles(bool printOutputFiles);
    void setGeometryValues(bool geometryValues);
    void setCalc2ndOrderMoments(bool calc2ndOrderMoments);
    void setCalc3rdOrderMoments(bool calc3rdOrderMoments);
    void setCalcHighOrderMoments(bool calcHighOrderMoment);
    void setReadGeo(bool readGeo);
    void setCalcMedian(bool calcMedian);
    void setCalcDragLift(bool calcDragLift);
    void setCalcCp(bool calcCp);
    void setWriteVeloASCIIfiles(bool writeVeloASCIIfiles);
    void setCalcPlaneConc(bool calcPlaneConc);
    void setConcFile(bool concFile);
    void setStreetVelocityFile(bool streetVelocityFile);
    void setUseMeasurePoints(bool useMeasurePoints);
    void setUseWale(bool useWale);
    void setUseInitNeq(bool useInitNeq);
    void setSimulatePorousMedia(bool simulatePorousMedia);
    void setD3Qxx(uint d3Qxx);
    void setTEnd(uint tEnd);
    void setTOut(uint tOut);
    void setTStartOut(uint tStartOut);
    void setTimeCalcMedStart(uint timeCalcMedStart);
    void setTimeCalcMedEnd(uint timeCalcMedEnd);
    void setPressInID(uint pressInID);
    void setPressOutID(uint pressOutID);
    void setPressInZ(uint pressInZ);
    void setPressOutZ(uint pressOutZ);
    void setDiffOn(bool diffOn);
    void setDiffMod(uint diffMod);
    void setDiffusivity(real diffusivity);
    void setTemperatureInit(real temperatureInit);
    void setTemperatureBC(real temperatureBC);
    // void setViscosity(real viscosity);
    void setVelocity(real velocity);
    void setViscosityRatio(real viscosityRatio);
    void setVelocityRatio(real velocityRatio);
    void setDensityRatio(real fensityRatio);
    void setPressRatio(real pressRatio);
    void setRealX(real realX);
    void setRealY(real realY);
    void setFactorPressBC(real factorPressBC);
    void setGeometryFileC(std::string geometryFileC);
    void setGeometryFileM(std::string geometryFileM);
    void setGeometryFileF(std::string geometryFileF);
    void setClockCycleForMP(uint clockCycleForMP);
    void setTimestepForMP(uint timestepForMP);
    void setForcingX(real forcingX);
    void setForcingY(real forcingY);
    void setForcingZ(real forcingZ);
    void setQuadricLimiterP(real quadricLimiterP);
    void setQuadricLimiterM(real quadricLimiterM);
    void setQuadricLimiterD(real quadricLimiterD);
    void setCalcParticles(bool calcParticles);
    void setParticleBasicLevel(int particleBasicLevel);
    void setParticleInitLevel(int particleInitLevel);
    void setNumberOfParticles(int numberOfParticles);
    void setStartXHotWall(real startXHotWall);
    void setEndXHotWall(real endXHotWall);
    void setPossNeighborFilesX(const std::vector<std::string> &possNeighborFilesX);
    void setPossNeighborFilesY(const std::vector<std::string> &possNeighborFilesY);
    void setPossNeighborFilesZ(const std::vector<std::string> &possNeighborFilesZ);
    // void setPossNeighborFilesX(std::vector<std::string> possNeighborFilesX);
    // void setPossNeighborFilesY(std::vector<std::string> possNeighborFilesY);
    // void setPossNeighborFilesZ(std::vector<std::string> possNeighborFilesZ);
    void setTimeDoCheckPoint(int timeDoCheckPoint);
    void setTimeDoRestart(int timeDoRestart);
    void setDoCheckPoint(bool doCheckPoint);
    void setDoRestart(bool doRestart);
    void setMaxLevel(uint maxLevel);
    void setGridX(const std::vector<int> &gridX);
    void setGridY(const std::vector<int> &gridY);
    void setGridZ(const std::vector<int> &gridZ);
    void setDistX(const std::vector<int> &distX);
    void setDistY(const std::vector<int> &distY);
    void setDistZ(const std::vector<int> &distZ);
    void setNeedInterface(const std::vector<bool> &needInterface);
    void setMainKernel(const std::string &mainKernel);
    void setMultiKernelOn(bool multiKernelOn);
    void setMultiKernelLevel(const std::vector<int> &multiKernelLevel);
    void setMultiKernelName(const std::vector<std::string> &multiKernelName);

    bool isViscosityInConfigFile() override;
    bool isNumberOfDevicesInConfigFile() override;
    bool isDevicesInConfigFile() override;
    bool isOutputPathInConfigFile() override;
    bool isPrefixInConfigFile() override;
    bool isGridPathInConfigFile() override;
    bool isPrintOutputFilesInConfigFile() override;
    bool isGeometryValuesInConfigFile() override;
    bool isCalc2ndOrderMomentsInConfigFile() override;
    bool isCalc3rdOrderMomentsInConfigFile() override;
    bool isCalcHighOrderMomentsInConfigFile() override;
    bool isReadGeoInConfigFile() override;
    bool isCalcMedianInConfigFile() override;
    bool isCalcDragLiftInConfigFile() override;
    bool isCalcCpInConfigFile() override;
    bool isWriteVeloASCIIfilesInConfigFile() override;
    bool isCalcPlaneConcInConfigFile() override;
    bool isConcFileInConfigFile() override;
    bool isStreetVelocityFileInConfigFile() override;
    bool isUseMeasurePointsInConfigFile() override;
    bool isUseWaleInConfigFile() override;
    bool isUseInitNeqInConfigFile() override;
    bool isSimulatePorousMediaInConfigFile() override;
    bool isD3QxxInConfigFile() override;
    bool isTEndInConfigFile() override;
    bool isTOutInConfigFile() override;
    bool isTStartOutInConfigFile() override;
    bool isTimeCalcMedStartInConfigFile() override;
    bool isTimeCalcMedEndInConfigFile() override;
    bool isPressInIDInConfigFile() override;
    bool isPressOutIDInConfigFile() override;
    bool isPressInZInConfigFile() override;
    bool isPressOutZInConfigFile() override;
    bool isDiffOnInConfigFile() override;
    bool isDiffModInConfigFile() override;
    bool isDiffusivityInConfigFile() override;
    bool isTemperatureInitInConfigFile() override;
    bool isTemperatureBCInConfigFile() override;
    // bool isViscosityInConfigFile();
    bool isVelocityInConfigFile() override;
    bool isViscosityRatioInConfigFile() override;
    bool isVelocityRatioInConfigFile() override;
    bool isDensityRatioInConfigFile() override;
    bool isPressRatioInConfigFile() override;
    bool isRealXInConfigFile() override;
    bool isRealYInConfigFile() override;
    bool isFactorPressBCInConfigFile() override;
    bool isGeometryFileCInConfigFile() override;
    bool isGeometryFileMInConfigFile() override;
    bool isGeometryFileFInConfigFile() override;
    bool isClockCycleForMPInConfigFile() override;
    bool isTimestepForMPInConfigFile() override;
    bool isForcingXInConfigFile() override;
    bool isForcingYInConfigFile() override;
    bool isForcingZInConfigFile() override;
    bool isQuadricLimiterPInConfigFile() override;
    bool isQuadricLimiterMInConfigFile() override;
    bool isQuadricLimiterDInConfigFile() override;
    bool isCalcParticlesInConfigFile() override;
    bool isParticleBasicLevelInConfigFile() override;
    bool isParticleInitLevelInConfigFile() override;
    bool isNumberOfParticlesInConfigFile() override;
    bool isNeighborWSBInConfigFile() override;
    bool isStartXHotWallInConfigFile() override;
    bool isEndXHotWallInConfigFile() override;
    bool isPossNeighborFilesXInConfigFile() override;
    bool isPossNeighborFilesYInConfigFile() override;
    bool isPossNeighborFilesZInConfigFile() override;
    bool isTimeDoCheckPointInConfigFile() override;
    bool isTimeDoRestartInConfigFile() override;
    bool isDoCheckPointInConfigFile() override;
    bool isDoRestartInConfigFile() override;
    bool isMaxLevelInConfigFile() override;
    bool isGridXInConfigFile() override;
    bool isGridYInConfigFile() override;
    bool isGridZInConfigFile() override;
    bool isDistXInConfigFile() override;
    bool isDistYInConfigFile() override;
    bool isDistZInConfigFile() override;
    bool isNeedInterfaceInConfigFile() override;
    bool isMainKernelInConfigFile() override;
    bool isMultiKernelOnInConfigFile() override;
    bool isMultiKernelLevelInConfigFile() override;
    bool isMultiKernelNameInConfigFile() override;

private:
    ConfigDataImp() = default;

    real viscosity { 0. };
    uint numberOfDevices { 0 };
    std::vector<uint> devices;
    std::string outputPath;
    std::string prefix;
    std::string gridPath;
    bool printOutputFiles { false };
    bool geometryValues { false };
    bool calc2ndOrderMoments { false };
    bool calc3rdOrderMoments { false };
    bool calcHighOrderMoments { false };
    bool readGeo { false };
    bool calcMedian { false };
    bool calcDragLift { false };
    bool calcCp { false };
    bool writeVeloASCIIfiles { false };
    bool calcPlaneConc { false };
    bool concFile { false };
    bool streetVelocityFile { false };
    bool useMeasurePoints { false };
    bool useWale { false };
    bool useInitNeq { false };
    bool simulatePorousMedia { false };
    uint d3Qxx { 0 };
    uint tEnd { 0 };
    uint tOut { 0 };
    uint tStartOut { 0 };
    uint timeCalcMedStart { 0 };
    uint timeCalcMedEnd { 0 };
    uint pressInID { 0 };
    uint pressOutID { 0 };
    uint pressInZ { 0 };
    uint pressOutZ { 0 };
    bool diffOn { false };
    uint diffMod { 0 };
    real diffusivity { 0. };
    real temperatureInit { 0. };
    real temperatureBC { 0. };
    // real viscosity { 0 };
    real velocity { 0. };
    real viscosityRatio { 0. };
    real velocityRatio { 0. };
    real densityRatio { 0. };
    real pressRatio { 0. };
    real realX { 0. };
    real realY { 0. };
    real factorPressBC { 0. };
    std::string geometryFileC;
    std::string geometryFileM;
    std::string geometryFileF;
    uint clockCycleForMP { 0 };
    uint timestepForMP { 0 };
    real forcingX { 0. };
    real forcingY { 0. };
    real forcingZ { 0. };
    real quadricLimiterP { 0. };
    real quadricLimiterM { 0. };
    real quadricLimiterD { 0. };
    bool calcParticles { false };
    int particleBasicLevel { 0 };
    int particleInitLevel { 0 };
    int numberOfParticles { 0 };
    real startXHotWall { 0. };
    real endXHotWall { 0. };
    std::vector<std::string> possNeighborFilesX;
    std::vector<std::string> possNeighborFilesY;
    std::vector<std::string> possNeighborFilesZ;
    // std::vector<std::string> possNeighborFilesX;
    // std::vector<std::string> possNeighborFilesY;
    // std::vector<std::string> possNeighborFilesZ;
    int timeDoCheckPoint { 0 };
    int timeDoRestart { 0 };
    bool doCheckPoint{ false };
    bool doRestart{ false };
    int maxLevel { 0 };
    std::vector<int> gridX;
    std::vector<int> gridY;
    std::vector<int> gridZ;
    std::vector<int> distX;
    std::vector<int> distY;
    std::vector<int> distZ;
    std::vector<bool> needInterface;
    std::string mainKernel;
    bool multiKernelOn{ false };
    std::vector<int> multiKernelLevel;
    std::vector<std::string> multiKernelName;

    bool isViscosity { false };
    bool isNumberOfDevices {false};
    bool isDevices { false };
    bool isOutputPath { false };
    bool isPrefix { false };
    bool isGridPath { false };
    bool isPrintOutputFiles { false };
    bool isGeometryValues { false };
    bool isCalc2ndOrderMoments { false };
    bool isCalc3rdOrderMoments { false };
    bool isCalcHighOrderMoments { false };
    bool isReadGeo { false };
    bool isCalcMedian { false };
    bool isCalcDragLift { false };
    bool isCalcCp { false };
    bool isWriteVeloASCII { false };
    bool isCalcPlaneConc { false };
    bool isConcFile { false };
    bool isStreetVelocityFile { false };
    bool isUseMeasurePoints { false };
    bool isUseWale { false };
    bool isUseInitNeq { false };
    bool isSimulatePorousMedia { false };
    bool isD3Qxx { false };
    bool isTEnd { false };
    bool isTOut { false };
    bool isTStartOut { false };
    bool isTimeCalcMedStart { false };
    bool isTimeCalcMedEnd { false };
    bool isPressInID { false };
    bool isPressOutID { false };
    bool isPressInZ { false };
    bool isPressOutZ { false };
    bool isDiffOn { false };
    bool isDiffMod { false };
    bool isDiffusivity { false };
    bool isTemperatureInit { false };
    bool isTemperatureBC { false };
    // bool isViscosity { false };
    bool isVelocity { false };
    bool isViscosityRatio { false };
    bool isVelocityRatio { false };
    bool isDensityRatio { false };
    bool isPressRatio { false };
    bool isRealX { false };
    bool isRealY { false };
    bool isFactorPressBC { false };
    bool isGeometryFileC { false };
    bool isGeometryFileM { false };
    bool isGeometryFileF { false };
    bool isClockCycleForMP { false };
    bool isTimestepForMP { false };
    bool isForcingX { false };
    bool isForcingY { false };
    bool isForcingZ { false };
    bool isQuadricLimiterP { false };
    bool isQuadricLimiterM { false };
    bool isQuadricLimiterD { false };
    bool isCalcParticles { false };
    bool isParticleBasicLevel { false };
    bool isParticleInitLevel { false };
    bool isNumberOfParticles { false };
    bool isNeighborWSB { false };
    bool isStartXHotWall { false };
    bool isEndXHotWall { false };
    bool isPossNeighborFilesX { false };
    bool isPossNeighborFilesY { false };
    bool isPossNeighborFilesZ { false };
    bool isTimeDoCheckPoint { false };
    bool isTimeDoRestart { false };
    bool isDoCheckPoint { false };
    bool isDoRestart { false };
    bool isMaxLevel { false };
    bool isGridX { false };
    bool isGridY { false };
    bool isGridZ { false };
    bool isDistX { false };
    bool isDistY { false };
    bool isDistZ { false };
    bool isNeedInterface { false };
    bool isMainKernel { false };
    bool isMultiKernelOn { false };
    bool isMultiKernelLevel { false };
    bool isMultiKernelName { false };
};
#endif
