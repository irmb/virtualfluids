//  _    ___      __              __________      _     __        ______________   __
// | |  / (_)____/ /___  ______ _/ / ____/ /_  __(_)___/ /____   /  ___/ __  / /  / /
// | | / / / ___/ __/ / / / __ `/ / /_  / / / / / / __  / ___/  / /___/ /_/ / /  / /
// | |/ / / /  / /_/ /_/ / /_/ / / __/ / / /_/ / / /_/ (__  )  / /_) / ____/ /__/ / 
// |___/_/_/   \__/\__,_/\__,_/_/_/   /_/\__,_/_/\__,_/____/   \____/_/    \_____/
//
//////////////////////////////////////////////////////////////////////////
#include "Temperature/FindTemperature.h"
#include <cuda_runtime.h>
#include <helper_cuda.h>

#include "GPU/CudaMemoryManager.h"

void initTemperatur(Parameter* para, CudaMemoryManager* cudaManager, int lev)
{
	printf("innerhalb initTemperatur\n");
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // alloc F's
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cudaManager->cudaAllocTempFs(lev);
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //copy host to device
	cudaManager->cudaCopyConcHD(lev);
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   if (para->getDiffMod() == 7)
   {
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = false;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //InitThS7(); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = true;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //InitThS7(); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //printf("nach InitThS7 2\n");

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CalcMacThS7(para->getParD(lev)->Conc, 
                  para->getParD(lev)->geoSP,       
                  para->getParD(lev)->neighborX_SP, 
                  para->getParD(lev)->neighborY_SP, 
                  para->getParD(lev)->neighborZ_SP,
                  para->getParD(lev)->size_Mat_SP, 
                  para->getParD(lev)->numberofthreads,       
                  para->getParD(lev)->d7.f[0],    
                  para->getParD(lev)->evenOrOdd);
      getLastCudaError("CalcMacSP27 execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   } 
   else if (para->getDiffMod() == 27)
   {
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = false;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //InitThS27( ); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = true;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //InitThS27(  ); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CalcMacThS27(  para->getParD(lev)->Conc, 
                     para->getParD(lev)->geoSP,       
                     para->getParD(lev)->neighborX_SP, 
                     para->getParD(lev)->neighborY_SP, 
                     para->getParD(lev)->neighborZ_SP,
                     para->getParD(lev)->size_Mat_SP, 
                     para->getParD(lev)->numberofthreads,       
                     para->getParD(lev)->d27.f[0],    
                     para->getParD(lev)->evenOrOdd);
      getLastCudaError("CalcMacSP27 execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   }

   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //copy device to host
   cudaManager->cudaCopyConcDH(lev);
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void findTempSim(Parameter* para, CudaMemoryManager* cudaManager)
{
   findKforTemp(para);

   cudaManager->cudaAllocTempNoSlipBC(para->getCoarse());

   findTemp(para);

   cudaManager->cudaCopyTempNoSlipBCHD(para->getCoarse());
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




   

   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void findTempVelSim(Parameter* para, CudaMemoryManager* cudaManager)
{
   findKforTempVel(para);

   cudaManager->cudaAllocTempVeloBC(para->getCoarse());

   findTempVel(para);

   cudaManager->cudaCopyTempVeloBCHD(para->getCoarse());
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




   

   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void findTempPressSim(Parameter* para, CudaMemoryManager* cudaManager)
{
   findKforTempPress(para);

   cudaManager->cudaAllocTempPressBC(para->getCoarse());

   findTempPress(para);

   cudaManager->cudaCopyTempPressBCHD(para->getCoarse());
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
