#include "Temperature/FindTemperature.h"
#include <cuda_runtime.h>
#include <helper_cuda.h>

void initTemperatur(Parameter* para, int lev)
{
	printf("innerhalb initTemperatur\n");
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   // alloc F's
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   para->cudaAllocTempFs(lev);
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //printf("nach cudaAllocTempFs\n");

   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //copy host to device
   para->cudaCopyConcHD(lev);
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //printf("nach cudaCopyConcHD\n");

   if (para->getDiffMod() == 7)
   {
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = false;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      InitThS7(para->getParD(lev)->numberofthreads, 
               para->getParD(lev)->neighborX_SP, 
               para->getParD(lev)->neighborY_SP, 
               para->getParD(lev)->neighborZ_SP, 
               para->getParD(lev)->geoSP,       
               para->getParD(lev)->Conc, 
               para->getParD(lev)->vx_SP, 
               para->getParD(lev)->vy_SP, 
               para->getParD(lev)->vz_SP, 
               para->getParD(lev)->size_Mat_SP, 
               para->getParD(lev)->d7.f[0],
               para->getParD(lev)->evenOrOdd); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //printf("nach InitThS7 1\n");

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = true;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      InitThS7(para->getParD(lev)->numberofthreads, 
               para->getParD(lev)->neighborX_SP, 
               para->getParD(lev)->neighborY_SP, 
               para->getParD(lev)->neighborZ_SP, 
               para->getParD(lev)->geoSP,       
               para->getParD(lev)->Conc, 
               para->getParD(lev)->vx_SP, 
               para->getParD(lev)->vy_SP, 
               para->getParD(lev)->vz_SP, 
               para->getParD(lev)->size_Mat_SP, 
               para->getParD(lev)->d7.f[0],
               para->getParD(lev)->evenOrOdd); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //printf("nach InitThS7 2\n");

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CalcMacThS7(para->getParD(lev)->Conc, 
                  para->getParD(lev)->geoSP,       
                  para->getParD(lev)->neighborX_SP, 
                  para->getParD(lev)->neighborY_SP, 
                  para->getParD(lev)->neighborZ_SP,
                  para->getParD(lev)->size_Mat_SP, 
                  para->getParD(lev)->numberofthreads,       
                  para->getParD(lev)->d7.f[0],    
                  para->getParD(lev)->evenOrOdd);
      getLastCudaError("CalcMacSP27 execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //printf("nach CalcMacThS7\n");
   } 
   else if (para->getDiffMod() == 27)
   {
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = false;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      InitThS27(  para->getParD(lev)->numberofthreads, 
                  para->getParD(lev)->neighborX_SP, 
                  para->getParD(lev)->neighborY_SP, 
                  para->getParD(lev)->neighborZ_SP, 
                  para->getParD(lev)->geoSP,       
                  para->getParD(lev)->Conc, 
                  para->getParD(lev)->vx_SP, 
                  para->getParD(lev)->vy_SP, 
                  para->getParD(lev)->vz_SP, 
                  para->getParD(lev)->size_Mat_SP, 
                  para->getParD(lev)->d27.f[0],
                  para->getParD(lev)->evenOrOdd); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      para->getParD(lev)->evenOrOdd = true;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      InitThS27(  para->getParD(lev)->numberofthreads, 
                  para->getParD(lev)->neighborX_SP, 
                  para->getParD(lev)->neighborY_SP, 
                  para->getParD(lev)->neighborZ_SP, 
                  para->getParD(lev)->geoSP,       
                  para->getParD(lev)->Conc, 
                  para->getParD(lev)->vx_SP, 
                  para->getParD(lev)->vy_SP, 
                  para->getParD(lev)->vz_SP, 
                  para->getParD(lev)->size_Mat_SP, 
                  para->getParD(lev)->d27.f[0],
                  para->getParD(lev)->evenOrOdd); 
      getLastCudaError("Kernel execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      CalcMacThS27(  para->getParD(lev)->Conc, 
                     para->getParD(lev)->geoSP,       
                     para->getParD(lev)->neighborX_SP, 
                     para->getParD(lev)->neighborY_SP, 
                     para->getParD(lev)->neighborZ_SP,
                     para->getParD(lev)->size_Mat_SP, 
                     para->getParD(lev)->numberofthreads,       
                     para->getParD(lev)->d27.f[0],    
                     para->getParD(lev)->evenOrOdd);
      getLastCudaError("CalcMacSP27 execution failed"); 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   }

   //printf("vor cudaCopyConcDH\n");
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   //copy device to host
   para->cudaCopyConcDH(lev);
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void findTempSim(Parameter* para)
{
   findKforTemp(para);

   para->cudaAllocTempNoSlipBC(para->getCoarse());

   findTemp(para);

   para->cudaCopyTempNoSlipBCHD(para->getCoarse());
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




   

   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void findTempVelSim(Parameter* para)
{
   findKforTempVel(para);

   para->cudaAllocTempVeloBC(para->getCoarse());

   findTempVel(para);

   para->cudaCopyTempVeloBCHD(para->getCoarse());
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




   

   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void findTempPressSim(Parameter* para)
{
   findKforTempPress(para);

   para->cudaAllocTempPressBC(para->getCoarse());

   findTempPress(para);

   para->cudaCopyTempPressBCHD(para->getCoarse());
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
