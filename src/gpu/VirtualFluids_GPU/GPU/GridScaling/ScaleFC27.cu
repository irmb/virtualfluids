//  _    ___      __              __________      _     __        ______________   __
// | |  / (_)____/ /___  ______ _/ / ____/ /_  __(_)___/ /____   /  ___/ __  / /  / /
// | | / / / ___/ __/ / / / __ `/ / /_  / / / / / / __  / ___/  / /___/ /_/ / /  / /
// | |/ / / /  / /_/ /_/ / /_/ / / __/ / / /_/ / / /_/ (__  )  / /_) / ____/ /__/ / 
// |___/_/_/   \__/\__,_/\__,_/_/_/   /_/\__,_/_/\__,_/____/   \____/_/    \_____/
//
//////////////////////////////////////////////////////////////////////////
/* Device code */
#include "LBM/LB.h" 
#include "lbm/constants/D3Q27.h"
#include <lbm/constants/NumericConstants.h>

using namespace vf::lbm::constant;
using namespace vf::lbm::dir;

//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC_0817_comp_27( real* DC, 
												 real* DF, 
												 unsigned int* neighborCX,
												 unsigned int* neighborCY,
												 unsigned int* neighborCZ,
												 unsigned int* neighborFX,
												 unsigned int* neighborFY,
												 unsigned int* neighborFZ,
												 unsigned int size_MatC, 
												 unsigned int size_MatF, 
												 bool isEvenTimestep,
												 unsigned int* posC, 
												 unsigned int* posFSWB, 
												 unsigned int kFC, 
												 real omCoarse, 
												 real omFine, 
												 real nu, 
												 unsigned int nxC, 
												 unsigned int nyC, 
												 unsigned int nxF, 
												 unsigned int nyF,
												 OffFC offFC)
{
   real 
	   *fP00source, *fM00source, *f0P0source, *f0M0source, *f00Psource, *f00Msource, *fPP0source, *fMM0source, *fPM0source,
	   *fMP0source, *fP0Psource, *fM0Msource, *fP0Msource, *fM0Psource, *f0PPsource, *f0MMsource, *f0PMsource, *f0MPsource,
	   *f000source, *fMMMsource, *fMMPsource, *fMPPsource, *fMPMsource, *fPPMsource, *fPPPsource, *fPMPsource, *fPMMsource;


   fP00source = &DF[DIR_P00   *size_MatF];
   fM00source = &DF[DIR_M00   *size_MatF];
   f0P0source = &DF[DIR_0P0   *size_MatF];
   f0M0source = &DF[DIR_0M0   *size_MatF];
   f00Psource = &DF[DIR_00P   *size_MatF];
   f00Msource = &DF[DIR_00M   *size_MatF];
   fPP0source = &DF[DIR_PP0  *size_MatF];
   fMM0source = &DF[DIR_MM0  *size_MatF];
   fPM0source = &DF[DIR_PM0  *size_MatF];
   fMP0source = &DF[DIR_MP0  *size_MatF];
   fP0Psource = &DF[DIR_P0P  *size_MatF];
   fM0Msource = &DF[DIR_M0M  *size_MatF];
   fP0Msource = &DF[DIR_P0M  *size_MatF];
   fM0Psource = &DF[DIR_M0P  *size_MatF];
   f0PPsource = &DF[DIR_0PP  *size_MatF];
   f0MMsource = &DF[DIR_0MM  *size_MatF];
   f0PMsource = &DF[DIR_0PM  *size_MatF];
   f0MPsource = &DF[DIR_0MP  *size_MatF];
   f000source = &DF[DIR_000*size_MatF];
   fMMMsource = &DF[DIR_MMM *size_MatF];
   fMMPsource = &DF[DIR_MMP *size_MatF];
   fMPPsource = &DF[DIR_MPP *size_MatF];
   fMPMsource = &DF[DIR_MPM *size_MatF];
   fPPMsource = &DF[DIR_PPM *size_MatF];
   fPPPsource = &DF[DIR_PPP *size_MatF];
   fPMPsource = &DF[DIR_PMP *size_MatF];
   fPMMsource = &DF[DIR_PMM *size_MatF];

   real
	   *fP00dest, *fM00dest, *f0P0dest, *f0M0dest, *f00Pdest, *f00Mdest, *fPP0dest, *fMM0dest, *fPM0dest,
	   *fMP0dest, *fP0Pdest, *fM0Mdest, *fP0Mdest, *fM0Pdest, *f0PPdest, *f0MMdest, *f0PMdest, *f0MPdest,
	   *f000dest, *fMMMdest, *fMMPdest, *fMPPdest, *fMPMdest, *fPPMdest, *fPPPdest, *fPMPdest, *fPMMdest;

   if (isEvenTimestep==true)
   {
	   fP00dest = &DC[DIR_P00   *size_MatC];
	   fM00dest = &DC[DIR_M00   *size_MatC];
	   f0P0dest = &DC[DIR_0P0   *size_MatC];
	   f0M0dest = &DC[DIR_0M0   *size_MatC];
	   f00Pdest = &DC[DIR_00P   *size_MatC];
	   f00Mdest = &DC[DIR_00M   *size_MatC];
	   fPP0dest = &DC[DIR_PP0  *size_MatC];
	   fMM0dest = &DC[DIR_MM0  *size_MatC];
	   fPM0dest = &DC[DIR_PM0  *size_MatC];
	   fMP0dest = &DC[DIR_MP0  *size_MatC];
	   fP0Pdest = &DC[DIR_P0P  *size_MatC];
	   fM0Mdest = &DC[DIR_M0M  *size_MatC];
	   fP0Mdest = &DC[DIR_P0M  *size_MatC];
	   fM0Pdest = &DC[DIR_M0P  *size_MatC];
	   f0PPdest = &DC[DIR_0PP  *size_MatC];
	   f0MMdest = &DC[DIR_0MM  *size_MatC];
	   f0PMdest = &DC[DIR_0PM  *size_MatC];
	   f0MPdest = &DC[DIR_0MP  *size_MatC];
	   f000dest = &DC[DIR_000*size_MatC];
	   fMMMdest = &DC[DIR_MMM *size_MatC];
	   fMMPdest = &DC[DIR_MMP *size_MatC];
	   fMPPdest = &DC[DIR_MPP *size_MatC];
	   fMPMdest = &DC[DIR_MPM *size_MatC];
	   fPPMdest = &DC[DIR_PPM *size_MatC];
	   fPPPdest = &DC[DIR_PPP *size_MatC];
	   fPMPdest = &DC[DIR_PMP *size_MatC];
	   fPMMdest = &DC[DIR_PMM *size_MatC];
   } 
   else
   {
	   fP00dest = &DC[DIR_M00   *size_MatC];
	   fM00dest = &DC[DIR_P00   *size_MatC];
	   f0P0dest = &DC[DIR_0M0   *size_MatC];
	   f0M0dest = &DC[DIR_0P0   *size_MatC];
	   f00Pdest = &DC[DIR_00M   *size_MatC];
	   f00Mdest = &DC[DIR_00P   *size_MatC];
	   fPP0dest = &DC[DIR_MM0  *size_MatC];
	   fMM0dest = &DC[DIR_PP0  *size_MatC];
	   fPM0dest = &DC[DIR_MP0  *size_MatC];
	   fMP0dest = &DC[DIR_PM0  *size_MatC];
	   fP0Pdest = &DC[DIR_M0M  *size_MatC];
	   fM0Mdest = &DC[DIR_P0P  *size_MatC];
	   fP0Mdest = &DC[DIR_M0P  *size_MatC];
	   fM0Pdest = &DC[DIR_P0M  *size_MatC];
	   f0PPdest = &DC[DIR_0MM  *size_MatC];
	   f0MMdest = &DC[DIR_0PP  *size_MatC];
	   f0PMdest = &DC[DIR_0MP  *size_MatC];
	   f0MPdest = &DC[DIR_0PM  *size_MatC];
	   f000dest = &DC[DIR_000*size_MatC];
	   fMMMdest = &DC[DIR_PPP *size_MatC];
	   fMMPdest = &DC[DIR_PPM *size_MatC];
	   fMPPdest = &DC[DIR_PMM *size_MatC];
	   fMPMdest = &DC[DIR_PMP *size_MatC];
	   fPPMdest = &DC[DIR_MMP *size_MatC];
	   fPPPdest = &DC[DIR_MMM *size_MatC];
	   fPMPdest = &DC[DIR_MPM *size_MatC];
	   fPMMdest = &DC[DIR_MPP *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   //real op = one;
   //real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   //real drho;
   real        vvx, vvy, vvz, vx2, vy2, vz2;
   real        press;//,drho,vx1,vx2,vx3;
   real        /*pressMMM,*/drhoMMM,vx1MMM,vx2MMM,vx3MMM;
   real        /*pressMMP,*/drhoMMP,vx1MMP,vx2MMP,vx3MMP;
   real        /*pressMPP,*/drhoMPP,vx1MPP,vx2MPP,vx3MPP;
   real        /*pressMPM,*/drhoMPM,vx1MPM,vx2MPM,vx3MPM;
   real        /*pressPPM,*/drhoPPM,vx1PPM,vx2PPM,vx3PPM;
   real        /*pressPPP,*/drhoPPP,vx1PPP,vx2PPP,vx3PPP;
   real        /*pressPMP,*/drhoPMP,vx1PMP,vx2PMP,vx3PMP;
   real        /*pressPMM,*/drhoPMM,vx1PMM,vx2PMM,vx3PMM;
   real        fP00,fM00,f0P0,f0M0,f00P,f00M,fPP0,fMM0,fPM0,fMP0,fP0P,fM0M,fP0M,fM0P,f0PP,f0MM,f0PM,f0MP,f000,fPPP, fMMP, fPMP, fMPP, fPPM, fMMM, fPMM, fMPM;
   real        kxyFromfcNEQMMM, kyzFromfcNEQMMM, kxzFromfcNEQMMM, kxxMyyFromfcNEQMMM, kxxMzzFromfcNEQMMM, kyyMzzFromfcNEQMMM;
   real        kxyFromfcNEQMMP, kyzFromfcNEQMMP, kxzFromfcNEQMMP, kxxMyyFromfcNEQMMP, kxxMzzFromfcNEQMMP, kyyMzzFromfcNEQMMP;
   real        kxyFromfcNEQMPP, kyzFromfcNEQMPP, kxzFromfcNEQMPP, kxxMyyFromfcNEQMPP, kxxMzzFromfcNEQMPP, kyyMzzFromfcNEQMPP;
   real        kxyFromfcNEQMPM, kyzFromfcNEQMPM, kxzFromfcNEQMPM, kxxMyyFromfcNEQMPM, kxxMzzFromfcNEQMPM, kyyMzzFromfcNEQMPM;
   real        kxyFromfcNEQPPM, kyzFromfcNEQPPM, kxzFromfcNEQPPM, kxxMyyFromfcNEQPPM, kxxMzzFromfcNEQPPM, kyyMzzFromfcNEQPPM;
   real        kxyFromfcNEQPPP, kyzFromfcNEQPPP, kxzFromfcNEQPPP, kxxMyyFromfcNEQPPP, kxxMzzFromfcNEQPPP, kyyMzzFromfcNEQPPP;
   real        kxyFromfcNEQPMP, kyzFromfcNEQPMP, kxzFromfcNEQPMP, kxxMyyFromfcNEQPMP, kxxMzzFromfcNEQPMP, kyyMzzFromfcNEQPMP;
   real        kxyFromfcNEQPMM, kyzFromfcNEQPMM, kxzFromfcNEQPMM, kxxMyyFromfcNEQPMM, kxxMzzFromfcNEQPMM, kyyMzzFromfcNEQPMM;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;
   real        d0, dx, dy, dz, dxy, dxz, dyz/*, dxyz*/;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k000base = posFSWB[k];
      unsigned int kM00base = neighborFX[k000base];
      unsigned int k0M0base = neighborFY[k000base];
      unsigned int k00Mbase = neighborFZ[k000base];
      unsigned int kMM0base = neighborFY[kM00base];
      unsigned int kM0Mbase = neighborFZ[kM00base];
      unsigned int k0MMbase = neighborFZ[k0M0base];
      unsigned int kMMMbase = neighborFZ[kMM0base];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int k000 = k000base;
      unsigned int kM00 = kM00base;   
      unsigned int k0M0 = k0M0base;   
      unsigned int k00M = k00Mbase;   
      unsigned int kMM0 = kMM0base;  
      unsigned int kM0M = kM0Mbase;  
      unsigned int k0MM = k0MMbase;  
      unsigned int kMMM = kMMMbase; 
      ////////////////////////////////////////////////////////////////////////////////
      fP00 = fP00source[k000];
      fM00 = fM00source[kM00];
      f0P0 = f0P0source[k000];
      f0M0 = f0M0source[k0M0];
      f00P = f00Psource[k000];
      f00M = f00Msource[k00M];
      fPP0 = fPP0source[k000];
      fMM0 = fMM0source[kMM0];
      fPM0 = fPM0source[k0M0];
      fMP0 = fMP0source[kM00];
      fP0P = fP0Psource[k000];
      fM0M = fM0Msource[kM0M];
      fP0M = fP0Msource[k00M];
      fM0P = fM0Psource[kM00];
      f0PP = f0PPsource[k000];
      f0MM = f0MMsource[k0MM];
      f0PM = f0PMsource[k00M];
      f0MP = f0MPsource[k0M0];
      f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
      fPMP = fPMPsource[k0M0];
      fPMM = fPMMsource[k0MM];

      drhoMMM = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1MMM  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoMMM);
	  vx2MMM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoMMM);
	  vx3MMM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoMMM);

	  kxyFromfcNEQMMM    = -c3o1*omegaS*((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoMMM) - ((vx1MMM*vx2MMM)));
	  kyzFromfcNEQMMM    = -c3o1*omegaS*((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoMMM) - ((vx2MMM*vx3MMM)));
	  kxzFromfcNEQMMM    = -c3o1*omegaS*((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoMMM) - ((vx1MMM*vx3MMM)));
	  kxxMyyFromfcNEQMMM = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoMMM) - ((vx1MMM*vx1MMM - vx2MMM*vx2MMM)));
	  kxxMzzFromfcNEQMMM = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoMMM) - ((vx1MMM*vx1MMM - vx3MMM*vx3MMM)));
	  kyyMzzFromfcNEQMMM = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoMMM) - ((vx2MMM*vx2MMM - vx3MMM*vx3MMM)));

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      k000 = k00M;
      kM00 = kM0M;   
      k0M0 = k0MM;   
      k00M = neighborFZ[k00M];   
      kMM0 = kMMM;  
      kM0M = neighborFZ[kM0M];  
      k0MM = neighborFZ[k0MM];  
      kMMM = neighborFZ[kMMM]; 
      ////////////////////////////////////////////////////////////////////////////////
	  fP00 = fP00source[k000];
	  fM00 = fM00source[kM00];
	  f0P0 = f0P0source[k000];
	  f0M0 = f0M0source[k0M0];
	  f00P = f00Psource[k000];
	  f00M = f00Msource[k00M];
	  fPP0 = fPP0source[k000];
	  fMM0 = fMM0source[kMM0];
	  fPM0 = fPM0source[k0M0];
	  fMP0 = fMP0source[kM00];
	  fP0P = fP0Psource[k000];
	  fM0M = fM0Msource[kM0M];
	  fP0M = fP0Msource[k00M];
	  fM0P = fM0Psource[kM00];
	  f0PP = f0PPsource[k000];
	  f0MM = f0MMsource[k0MM];
	  f0PM = f0PMsource[k00M];
	  f0MP = f0MPsource[k0M0];
	  f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
	  fPMP = fPMPsource[k0M0];
	  fPMM = fPMMsource[k0MM];

      drhoMMP = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1MMP  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoMMP);
	  vx2MMP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoMMP);
	  vx3MMP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoMMP);

	  kxyFromfcNEQMMP    = -c3o1*omegaS*((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoMMP) - ((vx1MMP*vx2MMP)));
	  kyzFromfcNEQMMP    = -c3o1*omegaS*((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoMMP) - ((vx2MMP*vx3MMP)));
	  kxzFromfcNEQMMP    = -c3o1*omegaS*((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoMMP) - ((vx1MMP*vx3MMP)));
	  kxxMyyFromfcNEQMMP = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoMMP) - ((vx1MMP*vx1MMP - vx2MMP*vx2MMP)));
	  kxxMzzFromfcNEQMMP = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoMMP) - ((vx1MMP*vx1MMP - vx3MMP*vx3MMP)));
	  kyyMzzFromfcNEQMMP = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoMMP) - ((vx2MMP*vx2MMP - vx3MMP*vx3MMP)));

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      k000 = kM00;
      kM00 = neighborFX[kM00];   
      k0M0 = kMM0;   
      k00M = kM0M;   
      kMM0 = neighborFX[kMM0];  
      kM0M = neighborFX[kM0M];  
      k0MM = kMMM;  
      kMMM = neighborFX[kMMM]; 
      ////////////////////////////////////////////////////////////////////////////////
	  fP00 = fP00source[k000];
	  fM00 = fM00source[kM00];
	  f0P0 = f0P0source[k000];
	  f0M0 = f0M0source[k0M0];
	  f00P = f00Psource[k000];
	  f00M = f00Msource[k00M];
	  fPP0 = fPP0source[k000];
	  fMM0 = fMM0source[kMM0];
	  fPM0 = fPM0source[k0M0];
	  fMP0 = fMP0source[kM00];
	  fP0P = fP0Psource[k000];
	  fM0M = fM0Msource[kM0M];
	  fP0M = fP0Msource[k00M];
	  fM0P = fM0Psource[kM00];
	  f0PP = f0PPsource[k000];
	  f0MM = f0MMsource[k0MM];
	  f0PM = f0PMsource[k00M];
	  f0MP = f0MPsource[k0M0];
	  f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
	  fPMP = fPMPsource[k0M0];
	  fPMM = fPMMsource[k0MM];

      drhoPMP = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1PMP  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoPMP);
	  vx2PMP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoPMP);
	  vx3PMP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoPMP);

	  kxyFromfcNEQPMP    = -c3o1*omegaS*((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoPMP) - ((vx1PMP*vx2PMP)));
	  kyzFromfcNEQPMP    = -c3o1*omegaS*((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoPMP) - ((vx2PMP*vx3PMP)));
	  kxzFromfcNEQPMP    = -c3o1*omegaS*((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoPMP) - ((vx1PMP*vx3PMP)));
	  kxxMyyFromfcNEQPMP = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoPMP) - ((vx1PMP*vx1PMP - vx2PMP*vx2PMP)));
	  kxxMzzFromfcNEQPMP = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoPMP) - ((vx1PMP*vx1PMP - vx3PMP*vx3PMP)));
	  kyyMzzFromfcNEQPMP = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoPMP) - ((vx2PMP*vx2PMP - vx3PMP*vx3PMP)));

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      k00M = k000;   
      kM0M = kM00;  
      k0MM = k0M0;  
      kMMM = kMM0; 
      k000 = kM00base;
      kM00 = neighborFX[kM00base];   
      k0M0 = kMM0base;   
      kMM0 = neighborFX[kMM0base];  
      ////////////////////////////////////////////////////////////////////////////////
	  fP00 = fP00source[k000];
	  fM00 = fM00source[kM00];
	  f0P0 = f0P0source[k000];
	  f0M0 = f0M0source[k0M0];
	  f00P = f00Psource[k000];
	  f00M = f00Msource[k00M];
	  fPP0 = fPP0source[k000];
	  fMM0 = fMM0source[kMM0];
	  fPM0 = fPM0source[k0M0];
	  fMP0 = fMP0source[kM00];
	  fP0P = fP0Psource[k000];
	  fM0M = fM0Msource[kM0M];
	  fP0M = fP0Msource[k00M];
	  fM0P = fM0Psource[kM00];
	  f0PP = f0PPsource[k000];
	  f0MM = f0MMsource[k0MM];
	  f0PM = f0PMsource[k00M];
	  f0MP = f0MPsource[k0M0];
	  f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
	  fPMP = fPMPsource[k0M0];
	  fPMM = fPMMsource[k0MM];

      drhoPMM = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1PMM  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoPMM);
	  vx2PMM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoPMM);
	  vx3PMM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoPMM);

	  kxyFromfcNEQPMM    = -c3o1*omegaS*((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoPMM) - ((vx1PMM*vx2PMM)));
	  kyzFromfcNEQPMM    = -c3o1*omegaS*((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoPMM) - ((vx2PMM*vx3PMM)));
	  kxzFromfcNEQPMM    = -c3o1*omegaS*((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoPMM) - ((vx1PMM*vx3PMM)));
	  kxxMyyFromfcNEQPMM = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoPMM) - ((vx1PMM*vx1PMM - vx2PMM*vx2PMM)));
	  kxxMzzFromfcNEQPMM = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoPMM) - ((vx1PMM*vx1PMM - vx3PMM*vx3PMM)));
	  kyyMzzFromfcNEQPMM = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoPMM) - ((vx2PMM*vx2PMM - vx3PMM*vx3PMM)));

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k000base = k0M0base;
      kM00base = kMM0base;
      k0M0base = neighborFY[k0M0base];
      k00Mbase = k0MMbase;
      kMM0base = neighborFY[kMM0base];
      kM0Mbase = kMMMbase;
      k0MMbase = neighborFY[k0MMbase];
      kMMMbase = neighborFY[kMMMbase];
      //////////////////////////////////////////////////////////////////////////
      //index 
      k000 = k000base;
      kM00 = kM00base;   
      k0M0 = k0M0base;   
      k00M = k00Mbase;   
      kMM0 = kMM0base;  
      kM0M = kM0Mbase;  
      k0MM = k0MMbase;  
      kMMM = kMMMbase; 
      ////////////////////////////////////////////////////////////////////////////////
	  fP00 = fP00source[k000];
	  fM00 = fM00source[kM00];
	  f0P0 = f0P0source[k000];
	  f0M0 = f0M0source[k0M0];
	  f00P = f00Psource[k000];
	  f00M = f00Msource[k00M];
	  fPP0 = fPP0source[k000];
	  fMM0 = fMM0source[kMM0];
	  fPM0 = fPM0source[k0M0];
	  fMP0 = fMP0source[kM00];
	  fP0P = fP0Psource[k000];
	  fM0M = fM0Msource[kM0M];
	  fP0M = fP0Msource[k00M];
	  fM0P = fM0Psource[kM00];
	  f0PP = f0PPsource[k000];
	  f0MM = f0MMsource[k0MM];
	  f0PM = f0PMsource[k00M];
	  f0MP = f0MPsource[k0M0];
	  f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
	  fPMP = fPMPsource[k0M0];
	  fPMM = fPMMsource[k0MM];

      drhoMPM = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1MPM  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoMPM);
	  vx2MPM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoMPM);
	  vx3MPM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoMPM);

	  kxyFromfcNEQMPM    = -c3o1*omegaS*   ((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoMPM) - ((vx1MPM*vx2MPM)));
	  kyzFromfcNEQMPM    = -c3o1*omegaS*   ((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoMPM) - ((vx2MPM*vx3MPM)));
	  kxzFromfcNEQMPM    = -c3o1*omegaS*   ((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoMPM) - ((vx1MPM*vx3MPM)));
	  kxxMyyFromfcNEQMPM = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoMPM) - ((vx1MPM*vx1MPM - vx2MPM*vx2MPM)));
	  kxxMzzFromfcNEQMPM = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoMPM) - ((vx1MPM*vx1MPM - vx3MPM*vx3MPM)));
	  kyyMzzFromfcNEQMPM = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoMPM) - ((vx2MPM*vx2MPM - vx3MPM*vx3MPM)));

	  //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      k000 = k00M;
      kM00 = kM0M;   
      k0M0 = k0MM;   
      k00M = neighborFZ[k00M];   
      kMM0 = kMMM;  
      kM0M = neighborFZ[kM0M];  
      k0MM = neighborFZ[k0MM];  
      kMMM = neighborFZ[kMMM]; 
      ////////////////////////////////////////////////////////////////////////////////
	  fP00 = fP00source[k000];
	  fM00 = fM00source[kM00];
	  f0P0 = f0P0source[k000];
	  f0M0 = f0M0source[k0M0];
	  f00P = f00Psource[k000];
	  f00M = f00Msource[k00M];
	  fPP0 = fPP0source[k000];
	  fMM0 = fMM0source[kMM0];
	  fPM0 = fPM0source[k0M0];
	  fMP0 = fMP0source[kM00];
	  fP0P = fP0Psource[k000];
	  fM0M = fM0Msource[kM0M];
	  fP0M = fP0Msource[k00M];
	  fM0P = fM0Psource[kM00];
	  f0PP = f0PPsource[k000];
	  f0MM = f0MMsource[k0MM];
	  f0PM = f0PMsource[k00M];
	  f0MP = f0MPsource[k0M0];
	  f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
	  fPMP = fPMPsource[k0M0];
	  fPMM = fPMMsource[k0MM];

      drhoMPP = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1MPP  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoMPP);
	  vx2MPP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoMPP);
	  vx3MPP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoMPP);

	  kxyFromfcNEQMPP    = -c3o1*omegaS*((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoMPP) - ((vx1MPP*vx2MPP)));
	  kyzFromfcNEQMPP    = -c3o1*omegaS*((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoMPP) - ((vx2MPP*vx3MPP)));
	  kxzFromfcNEQMPP    = -c3o1*omegaS*((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoMPP) - ((vx1MPP*vx3MPP)));
	  kxxMyyFromfcNEQMPP = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoMPP) - ((vx1MPP*vx1MPP - vx2MPP*vx2MPP)));
	  kxxMzzFromfcNEQMPP = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoMPP) - ((vx1MPP*vx1MPP - vx3MPP*vx3MPP)));
	  kyyMzzFromfcNEQMPP = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoMPP) - ((vx2MPP*vx2MPP - vx3MPP*vx3MPP)));

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      k000 = kM00;
      kM00 = neighborFX[kM00];   
      k0M0 = kMM0;   
      k00M = kM0M;   
      kMM0 = neighborFX[kMM0];  
      kM0M = neighborFX[kM0M];  
      k0MM = kMMM;  
      kMMM = neighborFX[kMMM]; 
      ////////////////////////////////////////////////////////////////////////////////
	  fP00 = fP00source[k000];
	  fM00 = fM00source[kM00];
	  f0P0 = f0P0source[k000];
	  f0M0 = f0M0source[k0M0];
	  f00P = f00Psource[k000];
	  f00M = f00Msource[k00M];
	  fPP0 = fPP0source[k000];
	  fMM0 = fMM0source[kMM0];
	  fPM0 = fPM0source[k0M0];
	  fMP0 = fMP0source[kM00];
	  fP0P = fP0Psource[k000];
	  fM0M = fM0Msource[kM0M];
	  fP0M = fP0Msource[k00M];
	  fM0P = fM0Psource[kM00];
	  f0PP = f0PPsource[k000];
	  f0MM = f0MMsource[k0MM];
	  f0PM = f0PMsource[k00M];
	  f0MP = f0MPsource[k0M0];
	  f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
	  fPMP = fPMPsource[k0M0];
	  fPMM = fPMMsource[k0MM];

      drhoPPP = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1PPP  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoPPP);
	  vx2PPP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoPPP);
	  vx3PPP  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoPPP);

	  kxyFromfcNEQPPP    = -c3o1*omegaS*((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoPPP) - ((vx1PPP*vx2PPP)));
	  kyzFromfcNEQPPP    = -c3o1*omegaS*((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoPPP) - ((vx2PPP*vx3PPP)));
	  kxzFromfcNEQPPP    = -c3o1*omegaS*((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoPPP) - ((vx1PPP*vx3PPP)));
	  kxxMyyFromfcNEQPPP = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoPPP) - ((vx1PPP*vx1PPP - vx2PPP*vx2PPP)));
	  kxxMzzFromfcNEQPPP = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoPPP) - ((vx1PPP*vx1PPP - vx3PPP*vx3PPP)));
	  kyyMzzFromfcNEQPPP = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoPPP) - ((vx2PPP*vx2PPP - vx3PPP*vx3PPP)));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      k00M = k000;   
      kM0M = kM00;  
      k0MM = k0M0;  
      kMMM = kMM0; 
      k000 = kM00base;
      kM00 = neighborFX[kM00base];   
      k0M0 = kMM0base;   
      kMM0 = neighborFX[kMM0base];  
      ////////////////////////////////////////////////////////////////////////////////
	  fP00 = fP00source[k000];
	  fM00 = fM00source[kM00];
	  f0P0 = f0P0source[k000];
	  f0M0 = f0M0source[k0M0];
	  f00P = f00Psource[k000];
	  f00M = f00Msource[k00M];
	  fPP0 = fPP0source[k000];
	  fMM0 = fMM0source[kMM0];
	  fPM0 = fPM0source[k0M0];
	  fMP0 = fMP0source[kM00];
	  fP0P = fP0Psource[k000];
	  fM0M = fM0Msource[kM0M];
	  fP0M = fP0Msource[k00M];
	  fM0P = fM0Psource[kM00];
	  f0PP = f0PPsource[k000];
	  f0MM = f0MMsource[k0MM];
	  f0PM = f0PMsource[k00M];
	  f0MP = f0MPsource[k0M0];
	  f000 = f000source[k000];
	  fMMM = fMMMsource[kMMM];
	  fMMP = fMMPsource[kMM0];
	  fMPP = fMPPsource[kM00];
	  fMPM = fMPMsource[kM0M];
	  fPPM = fPPMsource[k00M];
	  fPPP = fPPPsource[k000];
	  fPMP = fPMPsource[k0M0];
	  fPMM = fPMMsource[k0MM];

      drhoPPM = fP00+fM00+f0P0+f0M0+f00P+f00M+fPP0+fMM0+fPM0+fMP0+fP0P+fM0M+fP0M+fM0P+f0PP+f0MM+f0PM+f0MP+f000+fPPP+fMMP+fPMP+fMPP+fPPM+fMMM+fPMM+fMPM;
      vx1PPM  = (((fPPP-fMMM)+(fPMP-fMPM)+(fPPM-fMMP)+(fPMM-fMPP)) + (((fPP0-fMM0)+(fP0P-fM0M))+((fPM0-fMP0)+(fP0M-fM0P))) + (fP00-fM00))/(c1o1 + drhoPPM);
	  vx2PPM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPPM-fMMP)+(fMPM-fPMP)) + (((fPP0-fMM0)+(f0PP-f0MM))+((f0PM-f0MP)+(fMP0-fPM0))) + (f0P0-f0M0))/(c1o1 + drhoPPM);
	  vx3PPM  = (((fPPP-fMMM)+(fMPP-fPMM)+(fPMP-fMPM)+(fMMP-fPPM)) + (((fP0P-fM0M)+(f0PP-f0MM))+((fM0P-fP0M)+(f0MP-f0PM))) + (f00P-f00M))/(c1o1 + drhoPPM);

	  kxyFromfcNEQPPM    = -c3o1*omegaS*((((fMM0 - fPM0) + (fPP0 - fMP0)) + (((fMMM - fPMM) + (fPPM - fMPM)) + ((fMMP - fPMP) + (fPPP - fMPP)))) / (c1o1 + drhoPPM) - ((vx1PPM*vx2PPM)));
	  kyzFromfcNEQPPM    = -c3o1*omegaS*((((f0MM - f0MP) + (f0PP - f0PM)) + (((fPMM - fPMP) + (fMMM - fMPM)) + ((fPPP - fPPM) + (fMPP - fMMP)))) / (c1o1 + drhoPPM) - ((vx2PPM*vx3PPM)));
	  kxzFromfcNEQPPM    = -c3o1*omegaS*((((fM0M - fP0M) + (fP0P - fM0P)) + (((fMMM - fPMM) + (fMPM - fPPM)) + ((fPMP - fMMP) + (fPPP - fMPP)))) / (c1o1 + drhoPPM) - ((vx1PPM*vx3PPM)));
	  kxxMyyFromfcNEQPPM = -c3o2*omegaS *(((((fM0M - f0MM) + (fM0P - f0MP)) + ((fP0M - f0PM) + (fP0P - f0PP))) + ((fM00 - f0M0) + (fP00 - f0P0))) / (c1o1 + drhoPPM) - ((vx1PPM*vx1PPM - vx2PPM*vx2PPM)));
	  kxxMzzFromfcNEQPPM = -c3o2*omegaS *(((((fMM0 - f0MM) + (fMP0 - f0PM)) + ((fPM0 - f0MP) + (fPP0 - f0PP))) + ((fM00 - f00M) + (fP00 - f00P))) / (c1o1 + drhoPPM) - ((vx1PPM*vx1PPM - vx3PPM*vx3PPM)));
	  kyyMzzFromfcNEQPPM = -c3o2*omegaS *(((((fPM0 - fP0M) + (fMM0 - fM0M)) + ((fPP0 - fP0P) + (fMP0 - fM0P))) + ((f0M0 - f00M) + (f0P0 - f00P))) / (c1o1 + drhoPPM) - ((vx2PPM*vx2PPM - vx3PPM*vx3PPM)));

      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
	  a0  = c1o8*(((vx1PPM + vx1MMP) + (vx1MPM + vx1PMP)) + ((vx1PMM + vx1MPP) + (vx1MMM + vx1PPP)));
	  ax  = c1o4*(((vx1PPM - vx1MMP) + (vx1PPP - vx1MMM)) + ((vx1PMP - vx1MPM) + (vx1PMM - vx1MPP)));
	  ay  = c1o4*(((vx1PPM - vx1MMP) + (vx1PPP - vx1MMM)) + ((vx1MPM - vx1PMP) + (vx1MPP - vx1PMM)));
	  az  = c1o4*(((vx1MMP - vx1PPM) + (vx1PPP - vx1MMM)) + ((vx1PMP - vx1MPM) + (vx1MPP - vx1PMM)));
	  axy = c1o2*(((vx1PPM - vx1PMP) + (vx1MMM - vx1MPP)) + ((vx1MMP - vx1MPM) + (vx1PPP - vx1PMM)));
	  axz = c1o2*(((vx1PMP - vx1PPM) + (vx1MMM - vx1MPP)) + ((vx1MPM - vx1MMP) + (vx1PPP - vx1PMM)));
	  ayz = c1o2*(((vx1PPP - vx1MPM) + (vx1PMM - vx1MMP)) + ((vx1MPP - vx1PPM) + (vx1MMM - vx1PMP)));
	  //axyz=		  ((vx1MMP - vx1PPM) + (vx1PPP - vx1MMM)) + ((vx1MPM - vx1PMP) + (vx1PMM - vx1MPP)) ;
	  b0  = c1o8*(((vx2PPM + vx2MMP) + (vx2MPM + vx2PMP)) + ((vx2PMM + vx2MPP) + (vx2MMM + vx2PPP)));
	  bx  = c1o4*(((vx2PPM - vx2MMP) + (vx2PPP - vx2MMM)) + ((vx2PMP - vx2MPM) + (vx2PMM - vx2MPP)));
	  by  = c1o4*(((vx2PPM - vx2MMP) + (vx2PPP - vx2MMM)) + ((vx2MPM - vx2PMP) + (vx2MPP - vx2PMM)));
	  bz  = c1o4*(((vx2MMP - vx2PPM) + (vx2PPP - vx2MMM)) + ((vx2PMP - vx2MPM) + (vx2MPP - vx2PMM)));
	  bxy = c1o2*(((vx2PPM - vx2MPP) + (vx2MMM - vx2PMP)) + ((vx2MMP - vx2PMM) + (vx2PPP - vx2MPM)));
	  bxz = c1o2*(((vx2MMM - vx2PPM) + (vx2PMP - vx2MPP)) + ((vx2MPM - vx2PMM) + (vx2PPP - vx2MMP)));
	  byz = c1o2*(((vx2MPP - vx2PPM) + (vx2MMM - vx2PMP)) + ((vx2PMM - vx2MMP) + (vx2PPP - vx2MPM)));
	  //bxyz=		  ((vx2MMP - vx2PPM) + (vx2PPP - vx2MMM)) + ((vx2MPM - vx2PMP) + (vx2PMM - vx2MPP)) ;
	  c0  = c1o8*(((vx3PPM + vx3MMP) + (vx3MPM + vx3PMP)) + ((vx3PMM + vx3MPP) + (vx3MMM + vx3PPP)));
	  cx  = c1o4*(((vx3PPM - vx3MMP) + (vx3PPP - vx3MMM)) + ((vx3PMP - vx3MPM) + (vx3PMM - vx3MPP)));
	  cy  = c1o4*(((vx3PPM - vx3MMP) + (vx3PPP - vx3MMM)) + ((vx3MPM - vx3PMP) + (vx3MPP - vx3PMM)));
	  cz  = c1o4*(((vx3MMP - vx3PPM) + (vx3PPP - vx3MMM)) + ((vx3PMP - vx3MPM) + (vx3MPP - vx3PMM)));
	  cxy = c1o2*(((vx3PPM - vx3PMP) + (vx3MMM - vx3MPP)) + ((vx3MMP - vx3MPM) + (vx3PPP - vx3PMM)));
	  cxz = c1o2*(((vx3MMM - vx3PPM) + (vx3PMP - vx3MPP)) + ((vx3MPM - vx3PMM) + (vx3PPP - vx3MMP)));
	  cyz = c1o2*(((vx3MMM - vx3PPM) + (vx3MPP - vx3PMP)) + ((vx3PMM - vx3MPM) + (vx3PPP - vx3MMP)));
	  //cxyz=		  ((vx3MMP - vx3PPM) + (vx3PPP - vx3MMM)) + ((vx3MPM - vx3PMP) + (vx3PMM - vx3MPP)) ;

	  //bxx = zero;
	  //cxx = zero;
	  //ayy = zero;
	  //cyy = zero;
	  //azz = zero;
	  //bzz = zero;
	  //axx = zero;
	  //byy = zero;
	  //czz = zero;

	  bxx = c1o8*(((kxyFromfcNEQPPP - kxyFromfcNEQMMM) + (kxyFromfcNEQPMM - kxyFromfcNEQMPP)) + ((kxyFromfcNEQPMP - kxyFromfcNEQMPM) + (kxyFromfcNEQPPM - kxyFromfcNEQMMP))) - c1o2*axy;
	  cxx = c1o8*(((kxzFromfcNEQPPP - kxzFromfcNEQMMM) + (kxzFromfcNEQPMM - kxzFromfcNEQMPP)) + ((kxzFromfcNEQPMP - kxzFromfcNEQMPM) + (kxzFromfcNEQPPM - kxzFromfcNEQMMP))) - c1o2*axz;

	  ayy = c1o8*(((kxyFromfcNEQPPP - kxyFromfcNEQMMM) + (kxyFromfcNEQPPM - kxyFromfcNEQMMP)) - ((kxyFromfcNEQPMM - kxyFromfcNEQMPP) + (kxyFromfcNEQPMP - kxyFromfcNEQMPM))) - c1o2*bxy;
	  cyy = c1o8*(((kyzFromfcNEQPPP - kyzFromfcNEQMMM) + (kyzFromfcNEQPPM - kyzFromfcNEQMMP)) - ((kyzFromfcNEQPMM - kyzFromfcNEQMPP) + (kyzFromfcNEQPMP - kyzFromfcNEQMPM))) - c1o2*byz;

	  azz = c1o8*(((kxzFromfcNEQPPP - kxzFromfcNEQMMM) - (kxzFromfcNEQPMM - kxzFromfcNEQMPP)) + ((kxzFromfcNEQPMP - kxzFromfcNEQMPM) - (kxzFromfcNEQPPM - kxzFromfcNEQMMP))) - c1o2*cxz;
	  bzz = c1o8*(((kyzFromfcNEQPPP - kyzFromfcNEQMMM) - (kyzFromfcNEQPMM - kyzFromfcNEQMPP)) + ((kyzFromfcNEQPMP - kyzFromfcNEQMPM) - (kyzFromfcNEQPPM - kyzFromfcNEQMMP))) - c1o2*cyz;

	  axx = ( c1o16*(((kxxMyyFromfcNEQPPP - kxxMyyFromfcNEQMMM) + (kxxMyyFromfcNEQPMM - kxxMyyFromfcNEQMPP)) + ((kxxMyyFromfcNEQPMP - kxxMyyFromfcNEQMPM) + (kxxMyyFromfcNEQPPM - kxxMyyFromfcNEQMMP))) - c1o4*bxy)
		  + ( c1o16*(((kxxMzzFromfcNEQPPP - kxxMzzFromfcNEQMMM) + (kxxMzzFromfcNEQPMM - kxxMzzFromfcNEQMPP)) + ((kxxMzzFromfcNEQPMP - kxxMzzFromfcNEQMPM) + (kxxMzzFromfcNEQPPM - kxxMzzFromfcNEQMMP))) - c1o4*cxz);

	  byy = (-c1o16*(((kxxMyyFromfcNEQPPP - kxxMyyFromfcNEQMMM) - (kxxMyyFromfcNEQPMM - kxxMyyFromfcNEQMPP)) + ((kxxMyyFromfcNEQPPM - kxxMyyFromfcNEQMMP) - (kxxMyyFromfcNEQPMP - kxxMyyFromfcNEQMPM))) - c1o4*axy)
		  + ( c1o16*(((kyyMzzFromfcNEQPPP - kyyMzzFromfcNEQMMM) - (kyyMzzFromfcNEQPMM - kyyMzzFromfcNEQMPP)) + ((kyyMzzFromfcNEQPPM - kyyMzzFromfcNEQMMP) - (kyyMzzFromfcNEQPMP - kyyMzzFromfcNEQMPM))) - c1o4*cyz);

	  czz = (-c1o16*(((kxxMzzFromfcNEQPPP - kxxMzzFromfcNEQMMM) - (kxxMzzFromfcNEQPMM - kxxMzzFromfcNEQMPP)) - ((kxxMzzFromfcNEQPPM - kxxMzzFromfcNEQMMP) - (kxxMzzFromfcNEQPMP - kxxMzzFromfcNEQMPM))) - c1o4*axz)
		  + ( c1o16*(((kyyMzzFromfcNEQPPP - kyyMzzFromfcNEQMMM) - (kyyMzzFromfcNEQPMM - kyyMzzFromfcNEQMPP)) - ((kyyMzzFromfcNEQPPM - kyyMzzFromfcNEQMMP) - (kyyMzzFromfcNEQPMP - kyyMzzFromfcNEQMPM))) - c1o4*byz);

	  a0 -= c1o4*(axx + ayy + azz);
	  b0 -= c1o4*(bxx + byy + bzz);
	  c0 -= c1o4*(cxx + cyy + czz);

	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real kxyAverage    = c0o1;
	  real kyzAverage    = c0o1;
	  real kxzAverage    = c0o1;
	  real kxxMyyAverage = c0o1;
	  real kxxMzzAverage = c0o1;
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////Press
	  //d0   = ( pressPPM + pressPPP + pressMPM + pressMPP + pressPMM + pressPMP + pressMMM + pressMMP) * c1o8;
	  //dx   = ( pressPPM + pressPPP - pressMPM - pressMPP + pressPMM + pressPMP - pressMMM - pressMMP) * c1o4;
	  //dy   = ( pressPPM + pressPPP + pressMPM + pressMPP - pressPMM - pressPMP - pressMMM - pressMMP) * c1o4;
	  //dz   = (-pressPPM + pressPPP - pressMPM + pressMPP - pressPMM + pressPMP - pressMMM + pressMMP) * c1o4;
	  //dxy  = ( pressPPM + pressPPP - pressMPM - pressMPP - pressPMM - pressPMP + pressMMM + pressMMP) * c1o2;
	  //dxz  = (-pressPPM + pressPPP + pressMPM - pressMPP - pressPMM + pressPMP + pressMMM - pressMMP) * c1o2;
	  //dyz  = (-pressPPM + pressPPP - pressMPM + pressMPP + pressPMM - pressPMP + pressMMM - pressMMP) * c1o2;
	  //dxyz =  -pressPPM + pressPPP + pressMPM - pressMPP + pressPMM - pressPMP - pressMMM + pressMMP;
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //drho
	  d0   = ( ((drhoPPM + drhoMMP) + (drhoMPM + drhoPMP)) + ((drhoPMM + drhoMPP) + (drhoMMM + drhoPPP))) * c1o8;
	  dx   = ( ((drhoPPM - drhoMMP) + (drhoPMM - drhoMPP)) + ((drhoPMP - drhoMPM) + (drhoPPP - drhoMMM))) * c1o4;
	  dy   = ( ((drhoPPM - drhoMMP) + (drhoMPP - drhoPMM)) + ((drhoMPM - drhoPMP) + (drhoPPP - drhoMMM))) * c1o4;
	  dz   = ( ((drhoMMP - drhoPPM) + (drhoPPP - drhoMMM)) + ((drhoPMP - drhoMPM) + (drhoMPP - drhoPMM))) * c1o4;
	  dxy  = ( ((drhoPPM - drhoPMP) + (drhoPPP - drhoPMM)) + ((drhoMMP - drhoMPM) + (drhoMMM - drhoMPP))) * c1o2;
	  dxz  = ( ((drhoMMM - drhoPPM) + (drhoPPP - drhoMMP)) + ((drhoMPM - drhoPMM) + (drhoPMP - drhoMPP))) * c1o2;
	  dyz  = ( ((drhoMPP - drhoPPM) + (drhoPPP - drhoMPM)) + ((drhoPMM - drhoMMP) + (drhoMMM - drhoPMP))) * c1o2;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot 
	  //
      //
	  // x------x
	  // |      |
	  // |	 ---+--->X
	  // |		|  \
	  // x------x   \
	  //			off-vector
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
	  d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff*yoff*dxy + xoff*zoff*dxz + yoff*zoff*dyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real mfcbb = c0o1;
	  real mfabb = c0o1;
	  real mfbcb = c0o1;
	  real mfbab = c0o1;
	  real mfbbc = c0o1;
	  real mfbba = c0o1;
	  real mfccb = c0o1;
	  real mfaab = c0o1;
	  real mfcab = c0o1;
	  real mfacb = c0o1;
	  real mfcbc = c0o1;
	  real mfaba = c0o1;
	  real mfcba = c0o1;
	  real mfabc = c0o1;
	  real mfbcc = c0o1;
	  real mfbaa = c0o1;
	  real mfbca = c0o1;
	  real mfbac = c0o1;
	  real mfbbb = c0o1;
	  real mfccc = c0o1;
	  real mfaac = c0o1;
	  real mfcac = c0o1;
	  real mfacc = c0o1;
	  real mfcca = c0o1;
	  real mfaaa = c0o1;
	  real mfcaa = c0o1;
	  real mfaca = c0o1;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real m0, m1, m2, oMdrho;
	  real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	  //real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
	  //real O3 = c2o1 - o;
	  //real residu, residutmp;
	  //residutmp = c0o1;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
	  real NeqOn = c1o1;//zero;//one;   //.... one = on ..... zero = off 
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //
	  //Position C 0., 0., 0.
	  //
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //x = 0.;
	  //y = 0.;
	  //z = 0.;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real mxoff = -xoff;
	  //real myoff = -yoff;
	  //real mzoff = -zoff;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //press = pressPPP * (c1o8 - c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  pressMPP * (c1o8 + c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  pressPMP * (c1o8 - c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  pressMMP * (c1o8 + c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  pressPPM * (c1o8 - c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  pressMPM * (c1o8 + c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  pressPMM * (c1o8 - c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff) + 
			//  pressMMM * (c1o8 + c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff);
	  //drho  = drhoPPP * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drhoMPP * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drhoPMP * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drhoMMP * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drhoPPM * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drhoMPM * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drhoPMM * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
			//  drhoMMM * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
	  press = d0;
	  vvx   = a0;
	  vvy   = b0;
	  vvz   = c0;

	  //mfaaa = drho;
	  //mfaaa = press + (ax+by+cz)/three;  //  1/3 = 2/3*(1/op-1/2)
	  mfaaa = press; // if drho is interpolated directly

	  vx2 = vvx*vvx;
	  vy2 = vvy*vvy;
	  vz2 = vvz*vvz;
	  oMdrho = c1o1;
	  //oMdrho = one - mfaaa;

	  //two
	  // linear combinations
	  real oP = o;// :(
	  mxxPyyPzz = mfaaa    -c2o3*(ax+by+cz)*eps_new/oP*(c1o1+press); 
	  //mxxMyy    = -c2o3*(ax - by)*eps_new/o;
	  //mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

	  //mfabb     = -c1o3 * (bz + cy)*eps_new/o;
	  //mfbab     = -c1o3 * (az + cx)*eps_new/o;
	  //mfbba     = -c1o3 * (ay + bx)*eps_new/o;
	  mxxMyy    = -c2o3*((ax - by)+kxxMyyAverage)*eps_new/o * (c1o1 + press);
	  mxxMzz    = -c2o3*((ax - cz)+kxxMzzAverage)*eps_new/o * (c1o1 + press);

	  mfabb     = -c1o3 * ((bz + cy)+kyzAverage)*eps_new/o * (c1o1 + press);
	  mfbab     = -c1o3 * ((az + cx)+kxzAverage)*eps_new/o * (c1o1 + press);
	  mfbba     = -c1o3 * ((ay + bx)+kxyAverage)*eps_new/o * (c1o1 + press);

	  
	  // linear combinations back
	  mfcaa = c1o3 * (       mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaca = c1o3 * (-c2o1 * mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaac = c1o3 * (       mxxMyy - c2o1 * mxxMzz + mxxPyyPzz) * NeqOn;

	  //3.
	  // linear combinations
	  //residu = residutmp * (ayz + bxz + cxy );
	  //mfbbb = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mfbbb = c0o1;

	  //residu = residutmp * (axy + two*bxx + two*bzz + cyz );
	  //residu = -(c1o9*(axy - 2*bxx - 2*bzz + cyz ));
	  //mxxyPyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxyPyzz = c0o1;

	  //residu = residutmp * (axy + two*bxx - two*bzz - cyz );
	  //residu = c1o9*(axy - 2*bxx + 2*bzz - cyz );
	  //mxxyMyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxyMyzz = c0o1;

	  //residu = residutmp * (axz + byz + two*cxx + two*cyy );
	  //residu = -(c1o9*(axz + byz - 2*cxx - 2*cyy ));
	  //mxxzPyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxzPyyz = c0o1;

	  //residu = residutmp * (axz - byz + two*cxx - two*cyy );
	  //residu = c1o9*(axz - byz - 2*cxx + 2*cyy );
	  //mxxzMyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxzMyyz = c0o1;

	  //residu = residutmp * (two*ayy + two*azz + bxy + cxz );
	  //residu = c1o9*(2*ayy + 2*azz - bxy - cxz );
	  //mxyyPxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxyyPxzz = c0o1;

	  //residu = residutmp * (two*ayy - two*azz + bxy - cxz );
	  //residu = c1o9*(-2*ayy + 2*azz + bxy - cxz );
	  //mxyyMxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxyyMxzz = c0o1;

	  // linear combinations back
	  mfcba = ( mxxyMyzz + mxxyPyzz) * c1o2;
	  mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
	  mfcab = ( mxxzMyyz + mxxzPyyz) * c1o2;
	  mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
	  mfbca = ( mxyyMxzz + mxyyPxzz) * c1o2;
	  mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

	  //4.
	  mfacc = mfaaa*c1o9; 
	  mfcac = mfacc; 
	  mfcca = mfacc; 
	  //5.

	  //6.
	  mfccc = mfaaa*c1o27;
	  ////////////////////////////////////////////////////////////////////////////////////
	  //back
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Z - Dir
	  m0 =  mfaac * c1o2 +      mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfaac        - c2o1 * mfaab *  vvz         +  mfaaa                * (c1o1 - vz2)              - c1o1 * oMdrho * vz2; 
	  m2 =  mfaac * c1o2 +      mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaaa = m0;
	  mfaab = m1;
	  mfaac = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfabc * c1o2 +      mfabb * (vvz - c1o2) + mfaba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfabc        - c2o1 * mfabb *  vvz         + mfaba * (c1o1 - vz2); 
	  m2 =  mfabc * c1o2 +      mfabb * (vvz + c1o2) + mfaba * (     vz2 + vvz) * c1o2;
	  mfaba = m0;
	  mfabb = m1;
	  mfabc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfacb *  vvz         +  mfaca                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfacc * c1o2 +      mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaca = m0;
	  mfacb = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbac * c1o2 +      mfbab * (vvz - c1o2) + mfbaa * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbac        - c2o1 * mfbab *  vvz         + mfbaa * (c1o1 - vz2); 
	  m2 =  mfbac * c1o2 +      mfbab * (vvz + c1o2) + mfbaa * (     vz2 + vvz) * c1o2;
	  mfbaa = m0;
	  mfbab = m1;
	  mfbac = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbbc * c1o2 +      mfbbb * (vvz - c1o2) + mfbba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbbc        - c2o1 * mfbbb *  vvz         + mfbba * (c1o1 - vz2); 
	  m2 =  mfbbc * c1o2 +      mfbbb * (vvz + c1o2) + mfbba * (     vz2 + vvz) * c1o2;
	  mfbba = m0;
	  mfbbb = m1;
	  mfbbc = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbcb * (vvz - c1o2) + mfbca * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbcb *  vvz         + mfbca * (c1o1 - vz2); 
	  m2 =  mfbcc * c1o2 +      mfbcb * (vvz + c1o2) + mfbca * (     vz2 + vvz) * c1o2;
	  mfbca = m0;
	  mfbcb = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfcab *  vvz         +  mfcaa                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfcac * c1o2 +      mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcaa = m0;
	  mfcab = m1;
	  mfcac = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfcbb * (vvz - c1o2) + mfcba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfcbb *  vvz         + mfcba * (c1o1 - vz2); 
	  m2 =  mfcbc * c1o2 +      mfcbb * (vvz + c1o2) + mfcba * (     vz2 + vvz) * c1o2;
	  mfcba = m0;
	  mfcbb = m1;
	  mfcbc = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfccb *  vvz         +  mfcca                  * (c1o1 - vz2)              - c1o9 * oMdrho * vz2; 
	  m2 =  mfccc * c1o2 +      mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcca = m0;
	  mfccb = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Y - Dir
	  m0 =  mfaca * c1o2 +      mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfaca        - c2o1 * mfaba *  vvy         +  mfaaa                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfaca * c1o2 +      mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaaa = m0;
	  mfaba = m1;
	  mfaca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacb * c1o2 +      mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacb        - c2o1 * mfabb *  vvy         +  mfaab                  * (c1o1 - vy2)              - c2o3 * oMdrho * vy2; 
	  m2 =  mfacb * c1o2 +      mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaab = m0;
	  mfabb = m1;
	  mfacb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfabc *  vvy         +  mfaac                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfacc * c1o2 +      mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaac = m0;
	  mfabc = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbca * c1o2 +      mfbba * (vvy - c1o2) + mfbaa * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbca        - c2o1 * mfbba *  vvy         + mfbaa * (c1o1 - vy2); 
	  m2 =  mfbca * c1o2 +      mfbba * (vvy + c1o2) + mfbaa * (     vy2 + vvy) * c1o2;
	  mfbaa = m0;
	  mfbba = m1;
	  mfbca = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcb * c1o2 +      mfbbb * (vvy - c1o2) + mfbab * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcb        - c2o1 * mfbbb *  vvy         + mfbab * (c1o1 - vy2); 
	  m2 =  mfbcb * c1o2 +      mfbbb * (vvy + c1o2) + mfbab * (     vy2 + vvy) * c1o2;
	  mfbab = m0;
	  mfbbb = m1;
	  mfbcb = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbbc * (vvy - c1o2) + mfbac * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbbc *  vvy         + mfbac * (c1o1 - vy2); 
	  m2 =  mfbcc * c1o2 +      mfbbc * (vvy + c1o2) + mfbac * (     vy2 + vvy) * c1o2;
	  mfbac = m0;
	  mfbbc = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfcba *  vvy         +  mfcaa                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfcca * c1o2 +      mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcaa = m0;
	  mfcba = m1;
	  mfcca = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfcbb *  vvy         +  mfcab                  * (c1o1 - vy2)              - c2o9 * oMdrho * vy2; 
	  m2 =  mfccb * c1o2 +      mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcab = m0;
	  mfcbb = m1;
	  mfccb = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfcbc *  vvy         +  mfcac                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfccc * c1o2 +      mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcac = m0;
	  mfcbc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // X - Dir
	  m0 =  mfcaa * c1o2 +      mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcaa        - c2o1 * mfbaa *  vvx         +  mfaaa                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcaa * c1o2 +      mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaaa = m0;
	  mfbaa = m1;
	  mfcaa = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcba * c1o2 +      mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcba        - c2o1 * mfbba *  vvx         +  mfaba                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcba * c1o2 +      mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaba = m0;
	  mfbba = m1;
	  mfcba = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfbca *  vvx         +  mfaca                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcca * c1o2 +      mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaca = m0;
	  mfbca = m1;
	  mfcca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcab * c1o2 +      mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcab        - c2o1 * mfbab *  vvx         +  mfaab                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcab * c1o2 +      mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaab = m0;
	  mfbab = m1;
	  mfcab = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbb * c1o2 +      mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbb        - c2o1 * mfbbb *  vvx         +  mfabb                  * (c1o1 - vx2)              - c4o9 * oMdrho * vx2; 
	  m2 =  mfcbb * c1o2 +      mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabb = m0;
	  mfbbb = m1;
	  mfcbb = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfbcb *  vvx         +  mfacb                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfccb * c1o2 +      mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacb = m0;
	  mfbcb = m1;
	  mfccb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfbac *  vvx         +  mfaac                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcac * c1o2 +      mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaac = m0;
	  mfbac = m1;
	  mfcac = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfbbc *  vvx         +  mfabc                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcbc * c1o2 +      mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabc = m0;
	  mfbbc = m1;
	  mfcbc = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfbcc *  vvx         +  mfacc                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfccc * c1o2 +      mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacc = m0;
	  mfbcc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////
	  //index 0
	  k000 = posC[k];
	  kM00 = neighborCX[k000];
	  k0M0 = neighborCY[k000];
	  k00M = neighborCZ[k000];
	  kMM0 = neighborCY[kM00];
	  kM0M = neighborCZ[kM00];
	  k0MM = neighborCZ[k0M0];
	  kMMM = neighborCZ[kMM0];
	  ////////////////////////////////////////////////////////////////////////////////////


	  ////////////////////////////////////////////////////////////////////////////////////
	  fP00dest[k000] = mfcbb;                                                                 
	  fM00dest[kM00] = mfabb;                                                               
	  f0P0dest[k000] = mfbcb;
	  f0M0dest[k0M0] = mfbab;
	  f00Pdest[k000] = mfbbc;
	  f00Mdest[k00M] = mfbba;
	  fPP0dest[k000] = mfccb;
	  fMM0dest[kMM0] = mfaab;
	  fPM0dest[k0M0] = mfcab;
	  fMP0dest[kM00] = mfacb;
	  fP0Pdest[k000] = mfcbc;
	  fM0Mdest[kM0M] = mfaba;
	  fP0Mdest[k00M] = mfcba;
	  fM0Pdest[kM00] = mfabc;
	  f0PPdest[k000] = mfbcc;
	  f0MMdest[k0MM] = mfbaa;
	  f0PMdest[k00M] = mfbca;
	  f0MPdest[k0M0] = mfbac;
	  f000dest[k000] = mfbbb;
	  fMMMdest[kMMM] = mfaaa;
	  fMMPdest[kMM0] = mfaac;
	  fMPPdest[kM00] = mfacc;
	  fMPMdest[kM0M] = mfaca;
	  fPPMdest[k00M] = mfcca;
	  fPPPdest[k000] = mfccc;
	  fPMPdest[k0M0] = mfcac;
	  fPMMdest[k0MM] = mfcaa;
	  ////////////////////////////////////////////////////////////////////////////////////
   }
}
//////////////////////////////////////////////////////////////////////////






















































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC_AA2016_comp_27(real* DC, 
												  real* DF, 
												  unsigned int* neighborCX,
												  unsigned int* neighborCY,
												  unsigned int* neighborCZ,
												  unsigned int* neighborFX,
												  unsigned int* neighborFY,
												  unsigned int* neighborFZ,
												  unsigned int size_MatC, 
												  unsigned int size_MatF, 
												  bool isEvenTimestep,
												  unsigned int* posC, 
												  unsigned int* posFSWB, 
												  unsigned int kFC, 
												  real omCoarse, 
												  real omFine, 
												  real nu, 
												  unsigned int nxC, 
												  unsigned int nyC, 
												  unsigned int nxF, 
												  unsigned int nyF,
												  OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   //real op = one;
   //real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   real        press;//,drho,vx1,vx2,vx3;
   real        /*press_SWT,*/drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        /*press_NWT,*/drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        /*press_NET,*/drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        /*press_SET,*/drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        /*press_SWB,*/drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        /*press_NWB,*/drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        /*press_NEB,*/drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        /*press_SEB,*/drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   //real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;
   real        d0, dx, dy, dz, dxy, dxz, dyz/*, dxyz*/;
	//////////////////////////////////////////////////////////////////////////////////////
    real	mfcbb, mfabb, mfbcb, mfbab, mfbbc, mfbba, mfccb, mfaab, mfcab, mfacb, mfcbc, mfaba, mfcba, mfabc, mfbcc, mfbaa, mfbca, mfbac, mfbbb, mfccc, mfaac, mfcac, mfacc, mfcca, mfaaa, mfcaa, mfaca;
	//real wadjust;
	//real qudricLimitP = 0.01f;// * 0.0001f;
	//real qudricLimitM = 0.01f;// * 0.0001f;
	//real qudricLimitD = 0.01f;// * 0.001f;
	//real omega = omFine;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
	real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	real NeqOn = c1o1;
	real drho, rho;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//real OxxPyyPzz;
	//real OxyyPxzz;
	//real OxyyMxzz;
	//real Oxyz;
	//real O4, O5, O6;
	//real CUMcbb, CUMbcb, CUMbbc, CUMcca, CUMcac, CUMacc, CUMbcc, CUMcbc, CUMccb, CUMccc;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWB);
	  vx2_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWB);
	  vx3_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWB);

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE )  / (c1o1 + drho_SWB) - ((vx1_SWB*vx2_SWB)));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW )  / (c1o1 + drho_SWB) - ((vx2_SWB*vx3_SWB)));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE )  / (c1o1 + drho_SWB) - ((vx1_SWB*vx3_SWB)));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB)));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SWB    = mfbbb;
			real mxxyPyzz_SWB = mxxyPyzz;
			real mxxyMyzz_SWB = mxxyMyzz;
			real mxxzPyyz_SWB = mxxzPyyz;
			real mxxzMyyz_SWB = mxxzMyyz;
			real mxyyPxzz_SWB = mxyyPxzz;
			real mxyyMxzz_SWB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































	  
      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWT);
	  vx2_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWT);
	  vx3_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWT);

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx2_SWT)));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SWT) - ((vx2_SWT*vx3_SWT)));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx3_SWT)));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT)));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SWT    = mfbbb;
			real mxxyPyzz_SWT = mxxyPyzz;
			real mxxyMyzz_SWT = mxxyMyzz;
			real mxxzPyyz_SWT = mxxzPyyz;
			real mxxzMyyz_SWT = mxxzMyyz;
			real mxyyPxzz_SWT = mxyyPxzz;
			real mxyyMxzz_SWT = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SET);
	  vx2_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SET);
	  vx3_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SET);

      kxyFromfcNEQ_SET    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SET) - ((vx1_SET*vx2_SET)));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SET) - ((vx2_SET*vx3_SET)));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SET) - ((vx1_SET*vx3_SET)));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET-vx2_SET*vx2_SET)));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET-vx3_SET*vx3_SET)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SET    = mfbbb;
			real mxxyPyzz_SET = mxxyPyzz;
			real mxxyMyzz_SET = mxxyMyzz;
			real mxxzPyyz_SET = mxxzPyyz;
			real mxxzMyyz_SET = mxxzMyyz;
			real mxyyPxzz_SET = mxyyPxzz;
			real mxyyMxzz_SET = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SEB);
	  vx2_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SEB);
	  vx3_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SEB);

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx2_SEB)));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SEB) - ((vx2_SEB*vx3_SEB)));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx3_SEB)));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB)));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB)));

 			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SEB    = mfbbb;
			real mxxyPyzz_SEB = mxxyPyzz;
			real mxxyMyzz_SEB = mxxyMyzz;
			real mxxzPyyz_SEB = mxxzPyyz;
			real mxxzMyyz_SEB = mxxzMyyz;
			real mxyyPxzz_SEB = mxyyPxzz;
			real mxyyMxzz_SEB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































     //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWB);
	  vx2_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWB);
	  vx3_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWB);

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx2_NWB)));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NWB) - ((vx2_NWB*vx3_NWB)));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx3_NWB)));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB)));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NWB    = mfbbb;
			real mxxyPyzz_NWB = mxxyPyzz;
			real mxxyMyzz_NWB = mxxyMyzz;
			real mxxzPyyz_NWB = mxxzPyyz;
			real mxxzMyyz_NWB = mxxzMyyz;
			real mxyyPxzz_NWB = mxyyPxzz;
			real mxyyMxzz_NWB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWT);
	  vx2_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWT);
	  vx3_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWT);

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx2_NWT)));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NWT) - ((vx2_NWT*vx3_NWT)));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx3_NWT)));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT)));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NWT    = mfbbb;
			real mxxyPyzz_NWT = mxxyPyzz;
			real mxxyMyzz_NWT = mxxyMyzz;
			real mxxzPyyz_NWT = mxxzPyyz;
			real mxxzMyyz_NWT = mxxzMyyz;
			real mxyyPxzz_NWT = mxyyPxzz;
			real mxyyMxzz_NWT = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NET);
	  vx2_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NET);
	  vx3_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NET);

      kxyFromfcNEQ_NET    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NET) - ((vx1_NET*vx2_NET)));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NET) - ((vx2_NET*vx3_NET)));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NET) - ((vx1_NET*vx3_NET)));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET-vx2_NET*vx2_NET)));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET-vx3_NET*vx3_NET)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NET    = mfbbb;
			real mxxyPyzz_NET = mxxyPyzz;
			real mxxyMyzz_NET = mxxyMyzz;
			real mxxzPyyz_NET = mxxzPyyz;
			real mxxzMyyz_NET = mxxzMyyz;
			real mxyyPxzz_NET = mxyyPxzz;
			real mxyyMxzz_NET = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NEB);
	  vx2_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NEB);
	  vx3_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NEB);

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx2_NEB)));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NEB) - ((vx2_NEB*vx3_NEB)));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx3_NEB)));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB)));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NEB    = mfbbb;
			real mxxyPyzz_NEB = mxxyPyzz;
			real mxxyMyzz_NEB = mxxyMyzz;
			real mxxzPyyz_NEB = mxxzPyyz;
			real mxxzMyyz_NEB = mxxzMyyz;
			real mxyyPxzz_NEB = mxyyPxzz;
			real mxyyMxzz_NEB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real mfbbbMean    = c1o8 * (mfbbb_SWB    + mfbbb_SWT    + mfbbb_SET    + mfbbb_SEB    + mfbbb_NWB    + mfbbb_NWT    + mfbbb_NET    + mfbbb_NEB);
	  real mxxyPyzzMean = c1o8 * (mxxyPyzz_SWB + mxxyPyzz_SWT + mxxyPyzz_SET + mxxyPyzz_SEB + mxxyPyzz_NWB + mxxyPyzz_NWT + mxxyPyzz_NET + mxxyPyzz_NEB);
	  real mxxyMyzzMean = c1o8 * (mxxyMyzz_SWB + mxxyMyzz_SWT + mxxyMyzz_SET + mxxyMyzz_SEB + mxxyMyzz_NWB + mxxyMyzz_NWT + mxxyMyzz_NET + mxxyMyzz_NEB);
	  real mxxzPyyzMean = c1o8 * (mxxzPyyz_SWB + mxxzPyyz_SWT + mxxzPyyz_SET + mxxzPyyz_SEB + mxxzPyyz_NWB + mxxzPyyz_NWT + mxxzPyyz_NET + mxxzPyyz_NEB);
	  real mxxzMyyzMean = c1o8 * (mxxzMyyz_SWB + mxxzMyyz_SWT + mxxzMyyz_SET + mxxzMyyz_SEB + mxxzMyyz_NWB + mxxzMyyz_NWT + mxxzMyyz_NET + mxxzMyyz_NEB);
	  real mxyyPxzzMean = c1o8 * (mxyyPxzz_SWB + mxyyPxzz_SWT + mxyyPxzz_SET + mxyyPxzz_SEB + mxyyPxzz_NWB + mxyyPxzz_NWT + mxyyPxzz_NET + mxyyPxzz_NEB);
	  real mxyyMxzzMean = c1o8 * (mxyyMxzz_SWB + mxyyMxzz_SWT + mxyyMxzz_SET + mxyyMxzz_SEB + mxyyMxzz_NWB + mxyyMxzz_NWT + mxyyMxzz_NET + mxyyMxzz_NEB);
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //kxyFromfcNEQ_SWB    = zero;
	  //kyzFromfcNEQ_SWB    = zero;
	  //kxzFromfcNEQ_SWB    = zero;
	  //kxxMyyFromfcNEQ_SWB = zero;
	  //kxxMzzFromfcNEQ_SWB = zero;
	  //kxyFromfcNEQ_SWT    = zero;
	  //kyzFromfcNEQ_SWT    = zero;
	  //kxzFromfcNEQ_SWT    = zero;
	  //kxxMyyFromfcNEQ_SWT = zero;
	  //kxxMzzFromfcNEQ_SWT = zero;
	  //kxyFromfcNEQ_SET    = zero;
	  //kyzFromfcNEQ_SET    = zero;
	  //kxzFromfcNEQ_SET    = zero;
	  //kxxMyyFromfcNEQ_SET = zero;
	  //kxxMzzFromfcNEQ_SET = zero;
	  //kxyFromfcNEQ_SEB    = zero;
	  //kyzFromfcNEQ_SEB    = zero;
	  //kxzFromfcNEQ_SEB    = zero;
	  //kxxMyyFromfcNEQ_SEB = zero;
	  //kxxMzzFromfcNEQ_SEB = zero;
	  //kxyFromfcNEQ_NWB    = zero;
	  //kyzFromfcNEQ_NWB    = zero;
	  //kxzFromfcNEQ_NWB    = zero;
	  //kxxMyyFromfcNEQ_NWB = zero;
	  //kxxMzzFromfcNEQ_NWB = zero;
	  //kxyFromfcNEQ_NWT    = zero;
	  //kyzFromfcNEQ_NWT    = zero;
	  //kxzFromfcNEQ_NWT    = zero;
	  //kxxMyyFromfcNEQ_NWT = zero;
	  //kxxMzzFromfcNEQ_NWT = zero;
	  //kxyFromfcNEQ_NET    = zero;
	  //kyzFromfcNEQ_NET    = zero;
	  //kxzFromfcNEQ_NET    = zero;
	  //kxxMyyFromfcNEQ_NET = zero;
	  //kxxMzzFromfcNEQ_NET = zero;
	  //kxyFromfcNEQ_NEB    = zero;
	  //kyzFromfcNEQ_NEB    = zero;
	  //kxzFromfcNEQ_NEB    = zero;
	  //kxxMyyFromfcNEQ_NEB = zero;
	  //kxxMzzFromfcNEQ_NEB = zero;
      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
      a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_NWT + 
			 c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_NWT + 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_SWT + 
			 c8o1*vx1_NEB + c8o1*vx1_NET + c8o1*vx1_NWB + c8o1*vx1_NWT + c8o1*vx1_SEB + 
			 c8o1*vx1_SET + c8o1*vx1_SWB + c8o1*vx1_SWT + c2o1*vx2_NEB + c2o1*vx2_NET - 
			 c2o1*vx2_NWB - c2o1*vx2_NWT - c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + 
			 c2o1*vx2_SWT - c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      b0 = (c2o1*kxxMyyFromfcNEQ_NEB + c2o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_NWT - 
			 c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET + c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_NWT - 
			 c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT + 
			 c8o1*vx2_NEB + c8o1*vx2_NET + c8o1*vx2_NWB + c8o1*vx2_NWT + 
			 c8o1*vx2_SEB + c8o1*vx2_SET + c8o1*vx2_SWB + c8o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
			 c2o1*kxxMzzFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_NWT - 
			 c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_NWT - 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_SWT - 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT + 
			 c8o1*vx3_NEB + c8o1*vx3_NET + c8o1*vx3_NWB + c8o1*vx3_NWT + 
			 c8o1*vx3_SEB + c8o1*vx3_SET + c8o1*vx3_SWB + c8o1*vx3_SWT)/c64o1;
      ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + c2o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
			 kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx1_NEB - c2o1*vx1_NET + c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB + c2o1*vx1_SET - c2o1*vx1_SWB - c2o1*vx1_SWT)/c8o1;
      cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB - c2o1*vx1_NET - c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB - c2o1*vx1_SET - c2o1*vx1_SWB + c2o1*vx1_SWT)/c8o1;
      ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
			 kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB - c2o1*vx2_SWT)/c8o1;
      byy= (-c2o1*kxxMyyFromfcNEQ_NEB - c2o1*kxxMyyFromfcNEQ_NET - c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_NWT + 
			 c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB + c2o1*vx2_SWT)/c8o1;
      az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/c4o1;
      bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/c4o1;
      cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/c4o1;
      azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
			 c2o1*kxxMzzFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_NWT + 
			 c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT)/c16o1;
      axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/c2o1;
      bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/c2o1;
      cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/c2o1;
      axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real kxyAverage	     = c0o1;
	  real kyzAverage	     = c0o1;
	  real kxzAverage	     = c0o1;
	  real kxxMyyAverage	 = c0o1;
	  real kxxMzzAverage	 = c0o1;
	  //real kxyAverage	 =(kxyFromfcNEQ_SWB+
			//				   kxyFromfcNEQ_SWT+
			//				   kxyFromfcNEQ_SET+
			//				   kxyFromfcNEQ_SEB+
			//				   kxyFromfcNEQ_NWB+
			//				   kxyFromfcNEQ_NWT+
			//				   kxyFromfcNEQ_NET+
			//				   kxyFromfcNEQ_NEB)*c1o8-(ay+bx);
	  //real kyzAverage	 =(kyzFromfcNEQ_SWB+
			//				   kyzFromfcNEQ_SWT+
			//				   kyzFromfcNEQ_SET+
			//				   kyzFromfcNEQ_SEB+
			//				   kyzFromfcNEQ_NWB+
			//				   kyzFromfcNEQ_NWT+
			//				   kyzFromfcNEQ_NET+
			//				   kyzFromfcNEQ_NEB)*c1o8-(bz+cy);
	  //real kxzAverage	 =(kxzFromfcNEQ_SWB+
			//				   kxzFromfcNEQ_SWT+
			//				   kxzFromfcNEQ_SET+
			//				   kxzFromfcNEQ_SEB+
			//				   kxzFromfcNEQ_NWB+
			//				   kxzFromfcNEQ_NWT+
			//				   kxzFromfcNEQ_NET+
			//				   kxzFromfcNEQ_NEB)*c1o8-(az+cx);
	  //real kxxMyyAverage	 =(kxxMyyFromfcNEQ_SWB+
			//				   kxxMyyFromfcNEQ_SWT+
			//				   kxxMyyFromfcNEQ_SET+
			//				   kxxMyyFromfcNEQ_SEB+
			//				   kxxMyyFromfcNEQ_NWB+
			//				   kxxMyyFromfcNEQ_NWT+
			//				   kxxMyyFromfcNEQ_NET+
			//				   kxxMyyFromfcNEQ_NEB)*c1o8-(ax-by);
	  //real kxxMzzAverage	 =(kxxMzzFromfcNEQ_SWB+
			//				   kxxMzzFromfcNEQ_SWT+
			//				   kxxMzzFromfcNEQ_SET+
			//				   kxxMzzFromfcNEQ_SEB+
			//				   kxxMzzFromfcNEQ_NWB+
			//				   kxxMzzFromfcNEQ_NWT+
			//				   kxxMzzFromfcNEQ_NET+
			//				   kxxMzzFromfcNEQ_NEB)*c1o8-(ax-cz);



	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////Press
	  //d0   = ( press_NEB + press_NET + press_NWB + press_NWT + press_SEB + press_SET + press_SWB + press_SWT) * c1o8;
	  //dx   = ( press_NEB + press_NET - press_NWB - press_NWT + press_SEB + press_SET - press_SWB - press_SWT) * c1o4;
	  //dy   = ( press_NEB + press_NET + press_NWB + press_NWT - press_SEB - press_SET - press_SWB - press_SWT) * c1o4;
	  //dz   = (-press_NEB + press_NET - press_NWB + press_NWT - press_SEB + press_SET - press_SWB + press_SWT) * c1o4;
	  //dxy  = ( press_NEB + press_NET - press_NWB - press_NWT - press_SEB - press_SET + press_SWB + press_SWT) * c1o2;
	  //dxz  = (-press_NEB + press_NET + press_NWB - press_NWT - press_SEB + press_SET + press_SWB - press_SWT) * c1o2;
	  //dyz  = (-press_NEB + press_NET - press_NWB + press_NWT + press_SEB - press_SET + press_SWB - press_SWT) * c1o2;
	  //dxyz =  -press_NEB + press_NET + press_NWB - press_NWT + press_SEB - press_SET - press_SWB + press_SWT;
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //drho
	  real LapRho = ((xoff != c0o1) || (yoff != c0o1) || (zoff != c0o1)) ? c0o1 : -c3o1*(ax*ax + by*by + cz*cz) - c6o1 * (bx*ay + cx*az + cy*bz); 
	  d0   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT + drho_SEB + drho_SET + drho_SWB + drho_SWT - c2o1*LapRho) * c1o8;
	  dx   = ( drho_NEB + drho_NET - drho_NWB - drho_NWT + drho_SEB + drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dy   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT - drho_SEB - drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dz   = (-drho_NEB + drho_NET - drho_NWB + drho_NWT - drho_SEB + drho_SET - drho_SWB + drho_SWT) * c1o4;
	  dxy  = ( drho_NEB + drho_NET - drho_NWB - drho_NWT - drho_SEB - drho_SET + drho_SWB + drho_SWT) * c1o2;
	  dxz  = (-drho_NEB + drho_NET + drho_NWB - drho_NWT - drho_SEB + drho_SET + drho_SWB - drho_SWT) * c1o2;
	  dyz  = (-drho_NEB + drho_NET - drho_NWB + drho_NWT + drho_SEB - drho_SET + drho_SWB - drho_SWT) * c1o2;
	  //dxyz =  -drho_NEB + drho_NET + drho_NWB - drho_NWT + drho_SEB - drho_SET - drho_SWB + drho_SWT;
	  //d0   = zero;
	  //dx   = zero;
	  //dy   = zero;
	  //dz   = zero;
	  //dxy  = zero;
	  //dxz  = zero;
	  //dyz  = zero;
	  //dxyz = zero;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot 
	  //
      //
	  // x------x
	  // |      |
	  // |	 ---+--->X
	  // |		|  \
	  // x------x   \
	  //			off-vector
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
	  d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff*yoff*dxy + xoff*zoff*dxz + yoff*zoff*dyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //  FIX  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //AAAAAAAAAAAAHHHHHHHHHHHH!!!!! Mieser Test!!!
	  //b0= bx= by= bz= bxx= byy= bzz= bxy= bxz= byz= c0= cx= cy= cz= cxx= cyy= czz= cxy= cxz= cyz= axyz= bxyz= cxyz=zero;
	  //b0=zero;
	  //bx=zero;
	  //by=zero;
	  //bz=zero;
	  //bxx=zero;
	  //byy=zero;
	  //bzz=zero;
	  //bxy=zero;
	  //bxz=zero;
	  //byz=zero;
	  //c0=zero;
	  //cx=zero;
	  //cy=zero;
	  //cz=zero;
	  //cxx=zero;
	  //cyy=zero;
	  //czz=zero;
	  //cxy=zero;
	  //cxz=zero;
	  //cyz=zero;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	  
	  mfcbb = c0o1;
	  mfabb = c0o1;
	  mfbcb = c0o1;
	  mfbab = c0o1;
	  mfbbc = c0o1;
	  mfbba = c0o1;
	  mfccb = c0o1;
	  mfaab = c0o1;
	  mfcab = c0o1;
	  mfacb = c0o1;
	  mfcbc = c0o1;
	  mfaba = c0o1;
	  mfcba = c0o1;
	  mfabc = c0o1;
	  mfbcc = c0o1;
	  mfbaa = c0o1;
	  mfbca = c0o1;
	  mfbac = c0o1;
	  mfbbb = c0o1;
	  mfccc = c0o1;
	  mfaac = c0o1;
	  mfcac = c0o1;
	  mfacc = c0o1;
	  mfcca = c0o1;
	  mfaaa = c0o1;
	  mfcaa = c0o1;
	  mfaca = c0o1;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
	  //real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	  //real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
	  //real O3 = two - o;
	  //real residu, residutmp;
	  //residutmp = zero;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
	  //real NeqOn = one;//zero;//one;   //.... one = on ..... zero = off 
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //
	  //Position C 0., 0., 0.
	  //
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //x = 0.;
	  //y = 0.;
	  //z = 0.;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real mxoff = -xoff;
	  //real myoff = -yoff;
	  //real mzoff = -zoff;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //press = press_NET * (c1o8 - c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NWT * (c1o8 + c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SET * (c1o8 - c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SWT * (c1o8 + c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NEB * (c1o8 - c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_NWB * (c1o8 + c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SEB * (c1o8 - c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SWB * (c1o8 + c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff);
	  //drho  = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
	  press = d0;
	  vvx   = a0;
	  vvy   = b0;
	  vvz   = c0;

	  //mfaaa = drho;
	  //mfaaa = press + (ax+by+cz)/three;  //  1/3 = 2/3*(1/op-1/2)
	  mfaaa = press; // if drho is interpolated directly

	  vx2 = vvx*vvx;
	  vy2 = vvy*vvy;
	  vz2 = vvz*vvz;
	  oMdrho = c1o1;
	  //oMdrho = one - mfaaa;

	  //two
	  // linear combinations
	  mxxPyyPzz = mfaaa;
	  //mxxMyy    = -c2o3*(ax - by)*eps_new/o;
	  //mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

	  //mfabb     = -c1o3 * (bz + cy)*eps_new/o;
	  //mfbab     = -c1o3 * (az + cx)*eps_new/o;
	  //mfbba     = -c1o3 * (ay + bx)*eps_new/o;
	  mxxMyy    = -c2o3*((ax - by)+kxxMyyAverage)*eps_new/o * (c1o1 + press);
	  mxxMzz    = -c2o3*((ax - cz)+kxxMzzAverage)*eps_new/o * (c1o1 + press);

	  mfabb     = -c1o3 * ((bz + cy)+kyzAverage)*eps_new/o * (c1o1 + press);
	  mfbab     = -c1o3 * ((az + cx)+kxzAverage)*eps_new/o * (c1o1 + press);
	  mfbba     = -c1o3 * ((ay + bx)+kxyAverage)*eps_new/o * (c1o1 + press);

	  
	  // linear combinations back
	  mfcaa = c1o3 * (       mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaca = c1o3 * (-c2o1 * mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaac = c1o3 * (       mxxMyy - c2o1 * mxxMzz + mxxPyyPzz) * NeqOn;

	  //3.
	  // linear combinations
	  mfbbb    = c4o1 * (c24o1*(-c2o1+omFine)*(-c2o1-c7o1*omFine+c3o1*omFine*omFine)/(c48o1+c152o1*omFine-c130o1*omFine*omFine+c29o1*omFine*omFine*omFine)) 
					  / (c24o1*(-c2o1+omCoarse)*(-c2o1-c7o1*omCoarse+c3o1*omCoarse*omCoarse)/(c48o1+c152o1*omCoarse-c130o1*omCoarse*omCoarse+c29o1*omCoarse*omCoarse*omCoarse)) * mfbbbMean;
	  mxxyPyzz = c4o1 * (c8o1*(-c2o1+omFine)*(c1o1+c2o1*omFine)/(-c8o1-c14o1*omFine+c7o1*omFine*omFine)) / (c8o1*(-c2o1+omCoarse)*(c1o1+c2o1*omCoarse)/(-c8o1-c14o1*omCoarse+c7o1*omCoarse*omCoarse)) * mxxyPyzzMean;
	  mxxyMyzz = c4o1 * (c8o1*(-c2o1+omFine)*(-c7o1+c4o1*omFine)/(c56o1-c50o1*omFine+c9o1*omFine*omFine)) / (c8o1*(-c2o1+omCoarse)*(-c7o1+c4o1*omCoarse)/(c56o1-c50o1*omCoarse+c9o1*omCoarse*omCoarse)) * mxxyMyzzMean;
	  mxxzPyyz = c4o1 * (c8o1*(-c2o1+omFine)*(c1o1+c2o1*omFine)/(-c8o1-c14o1*omFine+c7o1*omFine*omFine)) / (c8o1*(-c2o1+omCoarse)*(c1o1+c2o1*omCoarse)/(-c8o1-c14o1*omCoarse+c7o1*omCoarse*omCoarse)) * mxxzPyyzMean;
	  mxxzMyyz = c4o1 * (c8o1*(-c2o1+omFine)*(-c7o1+c4o1*omFine)/(c56o1-c50o1*omFine+c9o1*omFine*omFine)) / (c8o1*(-c2o1+omCoarse)*(-c7o1+c4o1*omCoarse)/(c56o1-c50o1*omCoarse+c9o1*omCoarse*omCoarse)) * mxxzMyyzMean;
	  mxyyPxzz = c4o1 * (c8o1*(-c2o1+omFine)*(c1o1+c2o1*omFine)/(-c8o1-c14o1*omFine+c7o1*omFine*omFine)) / (c8o1*(-c2o1+omCoarse)*(c1o1+c2o1*omCoarse)/(-c8o1-c14o1*omCoarse+c7o1*omCoarse*omCoarse)) * mxyyPxzzMean;
	  mxyyMxzz = c4o1 * (c8o1*(-c2o1+omFine)*(-c7o1+c4o1*omFine)/(c56o1-c50o1*omFine+c9o1*omFine*omFine)) / (c8o1*(-c2o1+omCoarse)*(-c7o1+c4o1*omCoarse)/(c56o1-c50o1*omCoarse+c9o1*omCoarse*omCoarse)) * mxyyMxzzMean;

	  // linear combinations back
	  mfcba = ( mxxyMyzz + mxxyPyzz) * c1o2;
	  mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
	  mfcab = ( mxxzMyyz + mxxzPyyz) * c1o2;
	  mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
	  mfbca = ( mxyyMxzz + mxyyPxzz) * c1o2;
	  mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

	  //4.
	  mfacc = mfaaa*c1o9; 
	  mfcac = mfacc; 
	  mfcca = mfacc; 
	  //5.

	  //6.
	  mfccc = mfaaa*c1o27;
	  ////////////////////////////////////////////////////////////////////////////////////
	  //back
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Z - Dir
	  m0 =  mfaac * c1o2 +      mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfaac        - c2o1 * mfaab *  vvz         +  mfaaa                * (c1o1 - vz2)              - c1o1 * oMdrho * vz2; 
	  m2 =  mfaac * c1o2 +      mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaaa = m0;
	  mfaab = m1;
	  mfaac = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfabc * c1o2 +      mfabb * (vvz - c1o2) + mfaba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfabc        - c2o1 * mfabb *  vvz         + mfaba * (c1o1 - vz2); 
	  m2 =  mfabc * c1o2 +      mfabb * (vvz + c1o2) + mfaba * (     vz2 + vvz) * c1o2;
	  mfaba = m0;
	  mfabb = m1;
	  mfabc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfacb *  vvz         +  mfaca                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfacc * c1o2 +      mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaca = m0;
	  mfacb = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbac * c1o2 +      mfbab * (vvz - c1o2) + mfbaa * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbac        - c2o1 * mfbab *  vvz         + mfbaa * (c1o1 - vz2); 
	  m2 =  mfbac * c1o2 +      mfbab * (vvz + c1o2) + mfbaa * (     vz2 + vvz) * c1o2;
	  mfbaa = m0;
	  mfbab = m1;
	  mfbac = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbbc * c1o2 +      mfbbb * (vvz - c1o2) + mfbba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbbc        - c2o1 * mfbbb *  vvz         + mfbba * (c1o1 - vz2); 
	  m2 =  mfbbc * c1o2 +      mfbbb * (vvz + c1o2) + mfbba * (     vz2 + vvz) * c1o2;
	  mfbba = m0;
	  mfbbb = m1;
	  mfbbc = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbcb * (vvz - c1o2) + mfbca * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbcb *  vvz         + mfbca * (c1o1 - vz2); 
	  m2 =  mfbcc * c1o2 +      mfbcb * (vvz + c1o2) + mfbca * (     vz2 + vvz) * c1o2;
	  mfbca = m0;
	  mfbcb = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfcab *  vvz         +  mfcaa                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfcac * c1o2 +      mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcaa = m0;
	  mfcab = m1;
	  mfcac = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfcbb * (vvz - c1o2) + mfcba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfcbb *  vvz         + mfcba * (c1o1 - vz2); 
	  m2 =  mfcbc * c1o2 +      mfcbb * (vvz + c1o2) + mfcba * (     vz2 + vvz) * c1o2;
	  mfcba = m0;
	  mfcbb = m1;
	  mfcbc = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfccb *  vvz         +  mfcca                  * (c1o1 - vz2)              - c1o9 * oMdrho * vz2; 
	  m2 =  mfccc * c1o2 +      mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcca = m0;
	  mfccb = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Y - Dir
	  m0 =  mfaca * c1o2 +      mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfaca        - c2o1 * mfaba *  vvy         +  mfaaa                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfaca * c1o2 +      mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaaa = m0;
	  mfaba = m1;
	  mfaca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacb * c1o2 +      mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacb        - c2o1 * mfabb *  vvy         +  mfaab                  * (c1o1 - vy2)              - c2o3 * oMdrho * vy2; 
	  m2 =  mfacb * c1o2 +      mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaab = m0;
	  mfabb = m1;
	  mfacb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfabc *  vvy         +  mfaac                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfacc * c1o2 +      mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaac = m0;
	  mfabc = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbca * c1o2 +      mfbba * (vvy - c1o2) + mfbaa * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbca        - c2o1 * mfbba *  vvy         + mfbaa * (c1o1 - vy2); 
	  m2 =  mfbca * c1o2 +      mfbba * (vvy + c1o2) + mfbaa * (     vy2 + vvy) * c1o2;
	  mfbaa = m0;
	  mfbba = m1;
	  mfbca = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcb * c1o2 +      mfbbb * (vvy - c1o2) + mfbab * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcb        - c2o1 * mfbbb *  vvy         + mfbab * (c1o1 - vy2); 
	  m2 =  mfbcb * c1o2 +      mfbbb * (vvy + c1o2) + mfbab * (     vy2 + vvy) * c1o2;
	  mfbab = m0;
	  mfbbb = m1;
	  mfbcb = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbbc * (vvy - c1o2) + mfbac * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbbc *  vvy         + mfbac * (c1o1 - vy2); 
	  m2 =  mfbcc * c1o2 +      mfbbc * (vvy + c1o2) + mfbac * (     vy2 + vvy) * c1o2;
	  mfbac = m0;
	  mfbbc = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfcba *  vvy         +  mfcaa                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfcca * c1o2 +      mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcaa = m0;
	  mfcba = m1;
	  mfcca = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfcbb *  vvy         +  mfcab                  * (c1o1 - vy2)              - c2o9 * oMdrho * vy2; 
	  m2 =  mfccb * c1o2 +      mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcab = m0;
	  mfcbb = m1;
	  mfccb = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfcbc *  vvy         +  mfcac                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfccc * c1o2 +      mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcac = m0;
	  mfcbc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // X - Dir
	  m0 =  mfcaa * c1o2 +      mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcaa        - c2o1 * mfbaa *  vvx         +  mfaaa                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcaa * c1o2 +      mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaaa = m0;
	  mfbaa = m1;
	  mfcaa = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcba * c1o2 +      mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcba        - c2o1 * mfbba *  vvx         +  mfaba                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcba * c1o2 +      mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaba = m0;
	  mfbba = m1;
	  mfcba = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfbca *  vvx         +  mfaca                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcca * c1o2 +      mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaca = m0;
	  mfbca = m1;
	  mfcca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcab * c1o2 +      mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcab        - c2o1 * mfbab *  vvx         +  mfaab                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcab * c1o2 +      mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaab = m0;
	  mfbab = m1;
	  mfcab = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbb * c1o2 +      mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbb        - c2o1 * mfbbb *  vvx         +  mfabb                  * (c1o1 - vx2)              - c4o9 * oMdrho * vx2; 
	  m2 =  mfcbb * c1o2 +      mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabb = m0;
	  mfbbb = m1;
	  mfcbb = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfbcb *  vvx         +  mfacb                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfccb * c1o2 +      mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacb = m0;
	  mfbcb = m1;
	  mfccb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfbac *  vvx         +  mfaac                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcac * c1o2 +      mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaac = m0;
	  mfbac = m1;
	  mfcac = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfbbc *  vvx         +  mfabc                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcbc * c1o2 +      mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabc = m0;
	  mfbbc = m1;
	  mfcbc = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfbcc *  vvx         +  mfacc                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfccc * c1o2 +      mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacc = m0;
	  mfbcc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////
	  //index 0
	  kzero= posC[k];
	  kw   = neighborCX[kzero];
	  ks   = neighborCY[kzero];
	  kb   = neighborCZ[kzero];
	  ksw  = neighborCY[kw];
	  kbw  = neighborCZ[kw];
	  kbs  = neighborCZ[ks];
	  kbsw = neighborCZ[ksw];
	  ////////////////////////////////////////////////////////////////////////////////////


	  ////////////////////////////////////////////////////////////////////////////////////
	  feC[kzero]    = mfcbb;                                                                 
	  fwC[kw]       = mfabb;                                                               
	  fnC[kzero]    = mfbcb;
	  fsC[ks]       = mfbab;
	  ftC[kzero]    = mfbbc;
	  fbC[kb]       = mfbba;
	  fneC[kzero]   = mfccb;
	  fswC[ksw]     = mfaab;
	  fseC[ks]      = mfcab;
	  fnwC[kw]      = mfacb;
	  fteC[kzero]   = mfcbc;
	  fbwC[kbw]     = mfaba;
	  fbeC[kb]      = mfcba;
	  ftwC[kw]      = mfabc;
	  ftnC[kzero]   = mfbcc;
	  fbsC[kbs]     = mfbaa;
	  fbnC[kb]      = mfbca;
	  ftsC[ks]      = mfbac;
	  fzeroC[kzero] = mfbbb;
	  ftneC[kzero]  = mfccc;
	  ftseC[ks]     = mfcac;
	  fbneC[kb]     = mfcca;
	  fbseC[kbs]    = mfcaa;
	  ftnwC[kw]     = mfacc;
	  ftswC[ksw]    = mfaac;
	  fbnwC[kbw]    = mfaca;
	  fbswC[kbsw]   = mfaaa;
	  ////////////////////////////////////////////////////////////////////////////////////
   }
}
//////////////////////////////////////////////////////////////////////////






















































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC_RhoSq_3rdMom_comp_27(real* DC, 
														real* DF, 
														unsigned int* neighborCX,
														unsigned int* neighborCY,
														unsigned int* neighborCZ,
														unsigned int* neighborFX,
														unsigned int* neighborFY,
														unsigned int* neighborFZ,
														unsigned int size_MatC, 
														unsigned int size_MatF, 
														bool isEvenTimestep,
														unsigned int* posC, 
														unsigned int* posFSWB, 
														unsigned int kFC, 
														real omCoarse, 
														real omFine, 
														real nu, 
														unsigned int nxC, 
														unsigned int nyC, 
														unsigned int nxF, 
														unsigned int nyF,
														OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   //real op = one;
   //real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   real        press;//,drho,vx1,vx2,vx3;
   real        /*press_SWT,*/drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        /*press_NWT,*/drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        /*press_NET,*/drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        /*press_SET,*/drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        /*press_SWB,*/drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        /*press_NWB,*/drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        /*press_NEB,*/drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        /*press_SEB,*/drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   //real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;
   real        d0, dx, dy, dz, dxy, dxz, dyz/*, dxyz*/;
	//////////////////////////////////////////////////////////////////////////////////////
    real	mfcbb, mfabb, mfbcb, mfbab, mfbbc, mfbba, mfccb, mfaab, mfcab, mfacb, mfcbc, mfaba, mfcba, mfabc, mfbcc, mfbaa, mfbca, mfbac, mfbbb, mfccc, mfaac, mfcac, mfacc, mfcca, mfaaa, mfcaa, mfaca;
	//real wadjust;
	//real qudricLimitP = 0.01f;// * 0.0001f;
	//real qudricLimitM = 0.01f;// * 0.0001f;
	//real qudricLimitD = 0.01f;// * 0.001f;
	//real omega = omFine;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
	real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	real NeqOn = c1o1;
	real drho, rho;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//real OxxPyyPzz;
	//real OxyyPxzz;
	//real OxyyMxzz;
	//real Oxyz;
	//real O4, O5, O6;
	//real CUMcbb, CUMbcb, CUMbbc, CUMcca, CUMcac, CUMacc, CUMbcc, CUMcbc, CUMccb, CUMccc;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWB);
	  vx2_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWB);
	  vx3_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWB);

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx2_SWB)));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SWB) - ((vx2_SWB*vx3_SWB)));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx3_SWB)));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB)));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SWB    = mfbbb;
			real mxxyPyzz_SWB = mxxyPyzz;
			real mxxyMyzz_SWB = mxxyMyzz;
			real mxxzPyyz_SWB = mxxzPyyz;
			real mxxzMyyz_SWB = mxxzMyyz;
			real mxyyPxzz_SWB = mxyyPxzz;
			real mxyyMxzz_SWB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































	  
      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWT);
	  vx2_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWT);
	  vx3_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWT);

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx2_SWT)));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SWT) - ((vx2_SWT*vx3_SWT)));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx3_SWT)));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT)));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SWT    = mfbbb;
			real mxxyPyzz_SWT = mxxyPyzz;
			real mxxyMyzz_SWT = mxxyMyzz;
			real mxxzPyyz_SWT = mxxzPyyz;
			real mxxzMyyz_SWT = mxxzMyyz;
			real mxyyPxzz_SWT = mxyyPxzz;
			real mxyyMxzz_SWT = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SET);
	  vx2_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SET);
	  vx3_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SET);

      kxyFromfcNEQ_SET    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SET) - ((vx1_SET*vx2_SET)));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SET) - ((vx2_SET*vx3_SET)));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SET) - ((vx1_SET*vx3_SET)));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET-vx2_SET*vx2_SET)));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET-vx3_SET*vx3_SET)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SET    = mfbbb;
			real mxxyPyzz_SET = mxxyPyzz;
			real mxxyMyzz_SET = mxxyMyzz;
			real mxxzPyyz_SET = mxxzPyyz;
			real mxxzMyyz_SET = mxxzMyyz;
			real mxyyPxzz_SET = mxyyPxzz;
			real mxyyMxzz_SET = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SEB);
	  vx2_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SEB);
	  vx3_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SEB);

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx2_SEB)));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SEB) - ((vx2_SEB*vx3_SEB)));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx3_SEB)));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB)));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB)));

 			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_SEB    = mfbbb;
			real mxxyPyzz_SEB = mxxyPyzz;
			real mxxyMyzz_SEB = mxxyMyzz;
			real mxxzPyyz_SEB = mxxzPyyz;
			real mxxzMyyz_SEB = mxxzMyyz;
			real mxyyPxzz_SEB = mxyyPxzz;
			real mxyyMxzz_SEB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































     //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWB);
	  vx2_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWB);
	  vx3_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWB);

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx2_NWB)));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NWB) - ((vx2_NWB*vx3_NWB)));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx3_NWB)));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB)));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NWB    = mfbbb;
			real mxxyPyzz_NWB = mxxyPyzz;
			real mxxyMyzz_NWB = mxxyMyzz;
			real mxxzPyyz_NWB = mxxzPyyz;
			real mxxzMyyz_NWB = mxxzMyyz;
			real mxyyPxzz_NWB = mxyyPxzz;
			real mxyyMxzz_NWB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWT);
	  vx2_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWT);
	  vx3_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWT);

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx2_NWT)));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NWT) - ((vx2_NWT*vx3_NWT)));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx3_NWT)));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT)));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NWT    = mfbbb;
			real mxxyPyzz_NWT = mxxyPyzz;
			real mxxyMyzz_NWT = mxxyMyzz;
			real mxxzPyyz_NWT = mxxzPyyz;
			real mxxzMyyz_NWT = mxxzMyyz;
			real mxyyPxzz_NWT = mxyyPxzz;
			real mxyyMxzz_NWT = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NET);
	  vx2_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NET);
	  vx3_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NET);

      kxyFromfcNEQ_NET    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NET) - ((vx1_NET*vx2_NET)));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NET) - ((vx2_NET*vx3_NET)));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NET) - ((vx1_NET*vx3_NET)));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET-vx2_NET*vx2_NET)));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET-vx3_NET*vx3_NET)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NET    = mfbbb;
			real mxxyPyzz_NET = mxxyPyzz;
			real mxxyMyzz_NET = mxxyMyzz;
			real mxxzPyyz_NET = mxxzPyyz;
			real mxxzMyyz_NET = mxxzMyyz;
			real mxyyPxzz_NET = mxyyPxzz;
			real mxyyMxzz_NET = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NEB);
	  vx2_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NEB);
	  vx3_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NEB);

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx2_NEB)));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NEB) - ((vx2_NEB*vx3_NEB)));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx3_NEB)));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB)));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB)));

			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			mfcbb = f_E   ;
			mfabb = f_W   ;
			mfbcb = f_N   ;
			mfbab = f_S   ;
			mfbbc = f_T   ;
			mfbba = f_B   ;
			mfccb = f_NE  ;
			mfaab = f_SW  ;
			mfcab = f_SE  ;
			mfacb = f_NW  ;
			mfcbc = f_TE  ;
			mfaba = f_BW  ;
			mfcba = f_BE  ;
			mfabc = f_TW  ;
			mfbcc = f_TN  ;
			mfbaa = f_BS  ;
			mfbca = f_BN  ;
			mfbac = f_TS  ;
			mfbbb = f_ZERO;
			mfccc = f_TNE ;
			mfaac = f_TSW ;
			mfcac = f_TSE ;
			mfacc = f_TNW ;
			mfcca = f_BNE ;
			mfaaa = f_BSW ;
			mfcaa = f_BSE ;
			mfaca = f_BNW ;
			////////////////////////////////////////////////////////////////////////////////////
			drho = ((((mfccc+mfaaa) + (mfaca+mfcac)) + ((mfacc+mfcaa) + (mfaac+mfcca))) + 
					(((mfbac+mfbca) + (mfbaa+mfbcc)) + ((mfabc+mfcba) + (mfaba+mfcbc)) + ((mfacb+mfcab) + (mfaab+mfccb))) +
					((mfabb+mfcbb) + (mfbab+mfbcb)) + (mfbba+mfbbc)) + mfbbb;

			rho = c1o1+drho;
			////////////////////////////////////////////////////////////////////////////////////
			vvx    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfcaa-mfacc) + (mfcca-mfaac))) + 
				     (((mfcba-mfabc) + (mfcbc-mfaba)) + ((mfcab-mfacb) + (mfccb-mfaab))) +
				       (mfcbb-mfabb)) / rho;
			vvy    =((((mfccc-mfaaa) + (mfaca-mfcac)) + ((mfacc-mfcaa) + (mfcca-mfaac))) + 
			         (((mfbca-mfbac) + (mfbcc-mfbaa)) + ((mfacb-mfcab) + (mfccb-mfaab))) +
			           (mfbcb-mfbab)) / rho;
			vvz    =((((mfccc-mfaaa) + (mfcac-mfaca)) + ((mfacc-mfcaa) + (mfaac-mfcca))) + 
			         (((mfbac-mfbca) + (mfbcc-mfbaa)) + ((mfabc-mfcba) + (mfcbc-mfaba))) +
			           (mfbbc-mfbba)) / rho;
			////////////////////////////////////////////////////////////////////////////////////
			//fast
			oMdrho = c1o1; // comp special
			vx2=vvx*vvx;
			vy2=vvy*vvy;
			vz2=vvz*vvz;
			////////////////////////////////////////////////////////////////////////////////////
			//Hin
			////////////////////////////////////////////////////////////////////////////////////
			// mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36  Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Z - Dir
			m2    = mfaaa	+ mfaac;
			m1    = mfaac	- mfaaa;
			m0    = m2		+ mfaab;
			mfaaa = m0;
			m0   += c1o36 * oMdrho;	
			mfaab = m1 -		m0 * vvz;
			mfaac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfabc;
			m1    = mfabc  - mfaba;
			m0    = m2		+ mfabb;
			mfaba = m0;
			m0   += c1o9 * oMdrho;
			mfabb = m1 -		m0 * vvz;
			mfabc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfacc;
			m1    = mfacc  - mfaca;
			m0    = m2		+ mfacb;
			mfaca = m0;
			m0   += c1o36 * oMdrho;
			mfacb = m1 -		m0 * vvz;
			mfacc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbac;
			m1    = mfbac	- mfbaa;
			m0    = m2		+ mfbab;
			mfbaa = m0;
			m0   += c1o9 * oMdrho;
			mfbab = m1 -		m0 * vvz;
			mfbac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbba  + mfbbc;
			m1    = mfbbc  - mfbba;
			m0    = m2		+ mfbbb;
			mfbba = m0;
			m0   += c4o9 * oMdrho;
			mfbbb = m1 -		m0 * vvz;
			mfbbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbca  + mfbcc;
			m1    = mfbcc  - mfbca;
			m0    = m2		+ mfbcb;
			mfbca = m0;
			m0   += c1o9 * oMdrho;
			mfbcb = m1 -		m0 * vvz;
			mfbcc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcac;
			m1    = mfcac	- mfcaa;
			m0    = m2		+ mfcab;
			mfcaa = m0;
			m0   += c1o36 * oMdrho;
			mfcab = m1 -		m0 * vvz;
			mfcac = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcba  + mfcbc;
			m1    = mfcbc  - mfcba;
			m0    = m2		+ mfcbb;
			mfcba = m0;
			m0   += c1o9 * oMdrho;
			mfcbb = m1 -		m0 * vvz;
			mfcbc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcca  + mfccc;
			m1    = mfccc  - mfcca;
			m0    = m2		+ mfccb;
			mfcca = m0;
			m0   += c1o36 * oMdrho;
			mfccb = m1 -		m0 * vvz;
			mfccc = m2 - c2o1*	m1 * vvz + vz2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit  1/6, 0, 1/18, 2/3, 0, 2/9, 1/6, 0, 1/18 Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// Y - Dir
			m2    = mfaaa	+ mfaca;
			m1    = mfaca	- mfaaa;
			m0    = m2		+ mfaba;
			mfaaa = m0;
			m0   += c1o6 * oMdrho;
			mfaba = m1 -		m0 * vvy;
			mfaca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab  + mfacb;
			m1    = mfacb  - mfaab;
			m0    = m2		+ mfabb;
			mfaab = m0;
			mfabb = m1 -		m0 * vvy;
			mfacb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac  + mfacc;
			m1    = mfacc  - mfaac;
			m0    = m2		+ mfabc;
			mfaac = m0;
			m0   += c1o18 * oMdrho;
			mfabc = m1 -		m0 * vvy;
			mfacc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbaa	+ mfbca;
			m1    = mfbca	- mfbaa;
			m0    = m2		+ mfbba;
			mfbaa = m0;
			m0   += c2o3 * oMdrho;
			mfbba = m1 -		m0 * vvy;
			mfbca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbab  + mfbcb;
			m1    = mfbcb  - mfbab;
			m0    = m2		+ mfbbb;
			mfbab = m0;
			mfbbb = m1 -		m0 * vvy;
			mfbcb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfbac  + mfbcc;
			m1    = mfbcc  - mfbac;
			m0    = m2		+ mfbbc;
			mfbac = m0;
			m0   += c2o9 * oMdrho;
			mfbbc = m1 -		m0 * vvy;
			mfbcc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcaa	+ mfcca;
			m1    = mfcca	- mfcaa;
			m0    = m2		+ mfcba;
			mfcaa = m0;
			m0   += c1o6 * oMdrho;
			mfcba = m1 -		m0 * vvy;
			mfcca = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcab  + mfccb;
			m1    = mfccb  - mfcab;
			m0    = m2		+ mfcbb;
			mfcab = m0;
			mfcbb = m1 -		m0 * vvy;
			mfccb = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfcac  + mfccc;
			m1    = mfccc  - mfcac;
			m0    = m2		+ mfcbc;
			mfcac = m0;
			m0   += c1o18 * oMdrho;
			mfcbc = m1 -		m0 * vvy;
			mfccc = m2 - c2o1*	m1 * vvy + vy2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			// mit     1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9		Konditionieren
			////////////////////////////////////////////////////////////////////////////////////
			// X - Dir
			m2    = mfaaa	+ mfcaa;
			m1    = mfcaa	- mfaaa;
			m0    = m2		+ mfbaa;
			mfaaa = m0;
			m0   += c1o1* oMdrho;
			mfbaa = m1 -		m0 * vvx;
			mfcaa = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaba  + mfcba;
			m1    = mfcba  - mfaba;
			m0    = m2		+ mfbba;
			mfaba = m0;
			mfbba = m1 -		m0 * vvx;
			mfcba = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaca  + mfcca;
			m1    = mfcca  - mfaca;
			m0    = m2		+ mfbca;
			mfaca = m0;
			m0   += c1o3 * oMdrho;
			mfbca = m1 -		m0 * vvx;
			mfcca = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaab	+ mfcab;
			m1    = mfcab	- mfaab;
			m0    = m2		+ mfbab;
			mfaab = m0;
			mfbab = m1 -		m0 * vvx;
			mfcab = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabb  + mfcbb;
			m1    = mfcbb  - mfabb;
			m0    = m2		+ mfbbb;
			mfabb = m0;
			mfbbb = m1 -		m0 * vvx;
			mfcbb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacb  + mfccb;
			m1    = mfccb  - mfacb;
			m0    = m2		+ mfbcb;
			mfacb = m0;
			mfbcb = m1 -		m0 * vvx;
			mfccb = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfaac	+ mfcac;
			m1    = mfcac	- mfaac;
			m0    = m2		+ mfbac;
			mfaac = m0;
			m0   += c1o3 * oMdrho;
			mfbac = m1 -		m0 * vvx;
			mfcac = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfabc  + mfcbc;
			m1    = mfcbc  - mfabc;
			m0    = m2		+ mfbbc;
			mfabc = m0;
			mfbbc = m1 -		m0 * vvx;
			mfcbc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			m2    = mfacc  + mfccc;
			m1    = mfccc  - mfacc;
			m0    = m2		+ mfbcc;
			mfacc = m0;
			m0   += c1o9 * oMdrho;
			mfbcc = m1 -		m0 * vvx;
			mfccc = m2 - c2o1*	m1 * vvx + vx2 * m0;
			////////////////////////////////////////////////////////////////////////////////////
			// linear combinations

			mxxyPyzz = mfcba + mfabc;
			mxxyMyzz = mfcba - mfabc;

			mxxzPyyz = mfcab + mfacb;
			mxxzMyyz = mfcab - mfacb;

			mxyyPxzz = mfbca + mfbac;
			mxyyMxzz = mfbca - mfbac;


			//////////////////////////////////////////////////////////////////////////
			//exclusive for this source node
			real mfbbb_NEB    = mfbbb;
			real mxxyPyzz_NEB = mxxyPyzz;
			real mxxyMyzz_NEB = mxxyMyzz;
			real mxxzPyyz_NEB = mxxzPyyz;
			real mxxzMyyz_NEB = mxxzMyyz;
			real mxyyPxzz_NEB = mxyyPxzz;
			real mxyyMxzz_NEB = mxyyMxzz;
			//////////////////////////////////////////////////////////////////////////






















































      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real mfbbbMean    = c1o8 * (mfbbb_SWB    + mfbbb_SWT    + mfbbb_SET    + mfbbb_SEB    + mfbbb_NWB    + mfbbb_NWT    + mfbbb_NET    + mfbbb_NEB);
	  real mxxyPyzzMean = c1o8 * (mxxyPyzz_SWB + mxxyPyzz_SWT + mxxyPyzz_SET + mxxyPyzz_SEB + mxxyPyzz_NWB + mxxyPyzz_NWT + mxxyPyzz_NET + mxxyPyzz_NEB);
	  real mxxyMyzzMean = c1o8 * (mxxyMyzz_SWB + mxxyMyzz_SWT + mxxyMyzz_SET + mxxyMyzz_SEB + mxxyMyzz_NWB + mxxyMyzz_NWT + mxxyMyzz_NET + mxxyMyzz_NEB);
	  real mxxzPyyzMean = c1o8 * (mxxzPyyz_SWB + mxxzPyyz_SWT + mxxzPyyz_SET + mxxzPyyz_SEB + mxxzPyyz_NWB + mxxzPyyz_NWT + mxxzPyyz_NET + mxxzPyyz_NEB);
	  real mxxzMyyzMean = c1o8 * (mxxzMyyz_SWB + mxxzMyyz_SWT + mxxzMyyz_SET + mxxzMyyz_SEB + mxxzMyyz_NWB + mxxzMyyz_NWT + mxxzMyyz_NET + mxxzMyyz_NEB);
	  real mxyyPxzzMean = c1o8 * (mxyyPxzz_SWB + mxyyPxzz_SWT + mxyyPxzz_SET + mxyyPxzz_SEB + mxyyPxzz_NWB + mxyyPxzz_NWT + mxyyPxzz_NET + mxyyPxzz_NEB);
	  real mxyyMxzzMean = c1o8 * (mxyyMxzz_SWB + mxyyMxzz_SWT + mxyyMxzz_SET + mxyyMxzz_SEB + mxyyMxzz_NWB + mxyyMxzz_NWT + mxyyMxzz_NET + mxyyMxzz_NEB);
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //kxyFromfcNEQ_SWB    = zero;
	  //kyzFromfcNEQ_SWB    = zero;
	  //kxzFromfcNEQ_SWB    = zero;
	  //kxxMyyFromfcNEQ_SWB = zero;
	  //kxxMzzFromfcNEQ_SWB = zero;
	  //kxyFromfcNEQ_SWT    = zero;
	  //kyzFromfcNEQ_SWT    = zero;
	  //kxzFromfcNEQ_SWT    = zero;
	  //kxxMyyFromfcNEQ_SWT = zero;
	  //kxxMzzFromfcNEQ_SWT = zero;
	  //kxyFromfcNEQ_SET    = zero;
	  //kyzFromfcNEQ_SET    = zero;
	  //kxzFromfcNEQ_SET    = zero;
	  //kxxMyyFromfcNEQ_SET = zero;
	  //kxxMzzFromfcNEQ_SET = zero;
	  //kxyFromfcNEQ_SEB    = zero;
	  //kyzFromfcNEQ_SEB    = zero;
	  //kxzFromfcNEQ_SEB    = zero;
	  //kxxMyyFromfcNEQ_SEB = zero;
	  //kxxMzzFromfcNEQ_SEB = zero;
	  //kxyFromfcNEQ_NWB    = zero;
	  //kyzFromfcNEQ_NWB    = zero;
	  //kxzFromfcNEQ_NWB    = zero;
	  //kxxMyyFromfcNEQ_NWB = zero;
	  //kxxMzzFromfcNEQ_NWB = zero;
	  //kxyFromfcNEQ_NWT    = zero;
	  //kyzFromfcNEQ_NWT    = zero;
	  //kxzFromfcNEQ_NWT    = zero;
	  //kxxMyyFromfcNEQ_NWT = zero;
	  //kxxMzzFromfcNEQ_NWT = zero;
	  //kxyFromfcNEQ_NET    = zero;
	  //kyzFromfcNEQ_NET    = zero;
	  //kxzFromfcNEQ_NET    = zero;
	  //kxxMyyFromfcNEQ_NET = zero;
	  //kxxMzzFromfcNEQ_NET = zero;
	  //kxyFromfcNEQ_NEB    = zero;
	  //kyzFromfcNEQ_NEB    = zero;
	  //kxzFromfcNEQ_NEB    = zero;
	  //kxxMyyFromfcNEQ_NEB = zero;
	  //kxxMzzFromfcNEQ_NEB = zero;
      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
      a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_NWT + 
			 c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_NWT + 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_SWT + 
			 c8o1*vx1_NEB + c8o1*vx1_NET + c8o1*vx1_NWB + c8o1*vx1_NWT + c8o1*vx1_SEB + 
			 c8o1*vx1_SET + c8o1*vx1_SWB + c8o1*vx1_SWT + c2o1*vx2_NEB + c2o1*vx2_NET - 
			 c2o1*vx2_NWB - c2o1*vx2_NWT - c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + 
			 c2o1*vx2_SWT - c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      b0 = (c2o1*kxxMyyFromfcNEQ_NEB + c2o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_NWT - 
			 c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET + c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_NWT - 
			 c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT + 
			 c8o1*vx2_NEB + c8o1*vx2_NET + c8o1*vx2_NWB + c8o1*vx2_NWT + 
			 c8o1*vx2_SEB + c8o1*vx2_SET + c8o1*vx2_SWB + c8o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
			 c2o1*kxxMzzFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_NWT - 
			 c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_NWT - 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_SWT - 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT + 
			 c8o1*vx3_NEB + c8o1*vx3_NET + c8o1*vx3_NWB + c8o1*vx3_NWT + 
			 c8o1*vx3_SEB + c8o1*vx3_SET + c8o1*vx3_SWB + c8o1*vx3_SWT)/c64o1;
      ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + c2o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
			 kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx1_NEB - c2o1*vx1_NET + c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB + c2o1*vx1_SET - c2o1*vx1_SWB - c2o1*vx1_SWT)/c8o1;
      cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB - c2o1*vx1_NET - c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB - c2o1*vx1_SET - c2o1*vx1_SWB + c2o1*vx1_SWT)/c8o1;
      ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
			 kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB - c2o1*vx2_SWT)/c8o1;
      byy= (-c2o1*kxxMyyFromfcNEQ_NEB - c2o1*kxxMyyFromfcNEQ_NET - c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_NWT + 
			 c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB + c2o1*vx2_SWT)/c8o1;
      az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/c4o1;
      bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/c4o1;
      cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/c4o1;
      azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
			 c2o1*kxxMzzFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_NWT + 
			 c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT)/c16o1;
      axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/c2o1;
      bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/c2o1;
      cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/c2o1;
      axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real kxyAverage	     = c0o1;
	  real kyzAverage	     = c0o1;
	  real kxzAverage	     = c0o1;
	  real kxxMyyAverage	 = c0o1;
	  real kxxMzzAverage	 = c0o1;
	  //real kxyAverage	 =(kxyFromfcNEQ_SWB+
			//				   kxyFromfcNEQ_SWT+
			//				   kxyFromfcNEQ_SET+
			//				   kxyFromfcNEQ_SEB+
			//				   kxyFromfcNEQ_NWB+
			//				   kxyFromfcNEQ_NWT+
			//				   kxyFromfcNEQ_NET+
			//				   kxyFromfcNEQ_NEB)*c1o8-(ay+bx);
	  //real kyzAverage	 =(kyzFromfcNEQ_SWB+
			//				   kyzFromfcNEQ_SWT+
			//				   kyzFromfcNEQ_SET+
			//				   kyzFromfcNEQ_SEB+
			//				   kyzFromfcNEQ_NWB+
			//				   kyzFromfcNEQ_NWT+
			//				   kyzFromfcNEQ_NET+
			//				   kyzFromfcNEQ_NEB)*c1o8-(bz+cy);
	  //real kxzAverage	 =(kxzFromfcNEQ_SWB+
			//				   kxzFromfcNEQ_SWT+
			//				   kxzFromfcNEQ_SET+
			//				   kxzFromfcNEQ_SEB+
			//				   kxzFromfcNEQ_NWB+
			//				   kxzFromfcNEQ_NWT+
			//				   kxzFromfcNEQ_NET+
			//				   kxzFromfcNEQ_NEB)*c1o8-(az+cx);
	  //real kxxMyyAverage	 =(kxxMyyFromfcNEQ_SWB+
			//				   kxxMyyFromfcNEQ_SWT+
			//				   kxxMyyFromfcNEQ_SET+
			//				   kxxMyyFromfcNEQ_SEB+
			//				   kxxMyyFromfcNEQ_NWB+
			//				   kxxMyyFromfcNEQ_NWT+
			//				   kxxMyyFromfcNEQ_NET+
			//				   kxxMyyFromfcNEQ_NEB)*c1o8-(ax-by);
	  //real kxxMzzAverage	 =(kxxMzzFromfcNEQ_SWB+
			//				   kxxMzzFromfcNEQ_SWT+
			//				   kxxMzzFromfcNEQ_SET+
			//				   kxxMzzFromfcNEQ_SEB+
			//				   kxxMzzFromfcNEQ_NWB+
			//				   kxxMzzFromfcNEQ_NWT+
			//				   kxxMzzFromfcNEQ_NET+
			//				   kxxMzzFromfcNEQ_NEB)*c1o8-(ax-cz);



	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////Press
	  //d0   = ( press_NEB + press_NET + press_NWB + press_NWT + press_SEB + press_SET + press_SWB + press_SWT) * c1o8;
	  //dx   = ( press_NEB + press_NET - press_NWB - press_NWT + press_SEB + press_SET - press_SWB - press_SWT) * c1o4;
	  //dy   = ( press_NEB + press_NET + press_NWB + press_NWT - press_SEB - press_SET - press_SWB - press_SWT) * c1o4;
	  //dz   = (-press_NEB + press_NET - press_NWB + press_NWT - press_SEB + press_SET - press_SWB + press_SWT) * c1o4;
	  //dxy  = ( press_NEB + press_NET - press_NWB - press_NWT - press_SEB - press_SET + press_SWB + press_SWT) * c1o2;
	  //dxz  = (-press_NEB + press_NET + press_NWB - press_NWT - press_SEB + press_SET + press_SWB - press_SWT) * c1o2;
	  //dyz  = (-press_NEB + press_NET - press_NWB + press_NWT + press_SEB - press_SET + press_SWB - press_SWT) * c1o2;
	  //dxyz =  -press_NEB + press_NET + press_NWB - press_NWT + press_SEB - press_SET - press_SWB + press_SWT;
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //drho
	  real LapRho = ((xoff != c0o1) || (yoff != c0o1) || (zoff != c0o1)) ? c0o1 : -c3o1*(ax*ax + by*by + cz*cz) - c6o1 * (bx*ay + cx*az + cy*bz); 
	  d0   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT + drho_SEB + drho_SET + drho_SWB + drho_SWT - c2o1*LapRho) * c1o8;
	  dx   = ( drho_NEB + drho_NET - drho_NWB - drho_NWT + drho_SEB + drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dy   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT - drho_SEB - drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dz   = (-drho_NEB + drho_NET - drho_NWB + drho_NWT - drho_SEB + drho_SET - drho_SWB + drho_SWT) * c1o4;
	  dxy  = ( drho_NEB + drho_NET - drho_NWB - drho_NWT - drho_SEB - drho_SET + drho_SWB + drho_SWT) * c1o2;
	  dxz  = (-drho_NEB + drho_NET + drho_NWB - drho_NWT - drho_SEB + drho_SET + drho_SWB - drho_SWT) * c1o2;
	  dyz  = (-drho_NEB + drho_NET - drho_NWB + drho_NWT + drho_SEB - drho_SET + drho_SWB - drho_SWT) * c1o2;
	  //dxyz =  -drho_NEB + drho_NET + drho_NWB - drho_NWT + drho_SEB - drho_SET - drho_SWB + drho_SWT;
	  //d0   = zero;
	  //dx   = zero;
	  //dy   = zero;
	  //dz   = zero;
	  //dxy  = zero;
	  //dxz  = zero;
	  //dyz  = zero;
	  //dxyz = zero;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot 
	  //
      //
	  // x------x
	  // |      |
	  // |	 ---+--->X
	  // |		|  \
	  // x------x   \
	  //			off-vector
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
	  d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff*yoff*dxy + xoff*zoff*dxz + yoff*zoff*dyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //  FIX  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //AAAAAAAAAAAAHHHHHHHHHHHH!!!!! Mieser Test!!!
	  //b0= bx= by= bz= bxx= byy= bzz= bxy= bxz= byz= c0= cx= cy= cz= cxx= cyy= czz= cxy= cxz= cyz= axyz= bxyz= cxyz=zero;
	  //b0=zero;
	  //bx=zero;
	  //by=zero;
	  //bz=zero;
	  //bxx=zero;
	  //byy=zero;
	  //bzz=zero;
	  //bxy=zero;
	  //bxz=zero;
	  //byz=zero;
	  //c0=zero;
	  //cx=zero;
	  //cy=zero;
	  //cz=zero;
	  //cxx=zero;
	  //cyy=zero;
	  //czz=zero;
	  //cxy=zero;
	  //cxz=zero;
	  //cyz=zero;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	  
	  mfcbb = c0o1;
	  mfabb = c0o1;
	  mfbcb = c0o1;
	  mfbab = c0o1;
	  mfbbc = c0o1;
	  mfbba = c0o1;
	  mfccb = c0o1;
	  mfaab = c0o1;
	  mfcab = c0o1;
	  mfacb = c0o1;
	  mfcbc = c0o1;
	  mfaba = c0o1;
	  mfcba = c0o1;
	  mfabc = c0o1;
	  mfbcc = c0o1;
	  mfbaa = c0o1;
	  mfbca = c0o1;
	  mfbac = c0o1;
	  mfbbb = c0o1;
	  mfccc = c0o1;
	  mfaac = c0o1;
	  mfcac = c0o1;
	  mfacc = c0o1;
	  mfcca = c0o1;
	  mfaaa = c0o1;
	  mfcaa = c0o1;
	  mfaca = c0o1;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
	  //real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	  //real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
	  //real O3 = two - o;
	  //real residu, residutmp;
	  //residutmp = zero;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
	  //real NeqOn = one;//zero;//one;   //.... one = on ..... zero = off 
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //
	  //Position C 0., 0., 0.
	  //
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //x = 0.;
	  //y = 0.;
	  //z = 0.;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real mxoff = -xoff;
	  //real myoff = -yoff;
	  //real mzoff = -zoff;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //press = press_NET * (c1o8 - c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NWT * (c1o8 + c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SET * (c1o8 - c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SWT * (c1o8 + c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NEB * (c1o8 - c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_NWB * (c1o8 + c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SEB * (c1o8 - c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SWB * (c1o8 + c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff);
	  //drho  = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
	  press = d0;
	  vvx   = a0;
	  vvy   = b0;
	  vvz   = c0;

	  //mfaaa = drho;
	  //mfaaa = press + (ax+by+cz)/three;  //  1/3 = 2/3*(1/op-1/2)
	  mfaaa = press; // if drho is interpolated directly

	  vx2 = vvx*vvx;
	  vy2 = vvy*vvy;
	  vz2 = vvz*vvz;
	  oMdrho = c1o1;
	  //oMdrho = one - mfaaa;

	  //two
	  // linear combinations
	  mxxPyyPzz = mfaaa;
	  //mxxMyy    = -c2o3*(ax - by)*eps_new/o;
	  //mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

	  //mfabb     = -c1o3 * (bz + cy)*eps_new/o;
	  //mfbab     = -c1o3 * (az + cx)*eps_new/o;
	  //mfbba     = -c1o3 * (ay + bx)*eps_new/o;
	  mxxMyy    = -c2o3*((ax - by)+kxxMyyAverage)*eps_new/o * (c1o1 + press);
	  mxxMzz    = -c2o3*((ax - cz)+kxxMzzAverage)*eps_new/o * (c1o1 + press);

	  mfabb     = -c1o3 * ((bz + cy)+kyzAverage)*eps_new/o * (c1o1 + press);
	  mfbab     = -c1o3 * ((az + cx)+kxzAverage)*eps_new/o * (c1o1 + press);
	  mfbba     = -c1o3 * ((ay + bx)+kxyAverage)*eps_new/o * (c1o1 + press);

	  
	  // linear combinations back
	  mfcaa = c1o3 * (       mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaca = c1o3 * (-c2o1 * mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaac = c1o3 * (       mxxMyy - c2o1 * mxxMzz + mxxPyyPzz) * NeqOn;

	  //3.
	  // linear combinations
	  mfbbb    = c1o2 * (( omCoarse + c12o1)*(-omFine + c2o1)) / (( omFine + c12o1)*(-omCoarse + c2o1)) * mfbbbMean;
	  mxxyPyzz = c1o2 * ((-omCoarse + c3o1 )*(-omFine + c2o1)) / ((-omFine + c3o1 )*(-omCoarse + c2o1)) * mxxyPyzzMean;
	  mxxyMyzz = c1o2 * ((-omCoarse + c6o1   )*(-omFine + c2o1)) / ((-omFine + c6o1   )*(-omCoarse + c2o1)) * mxxyMyzzMean;
	  mxxzPyyz = c1o2 * ((-omCoarse + c3o1 )*(-omFine + c2o1)) / ((-omFine + c3o1 )*(-omCoarse + c2o1)) * mxxzPyyzMean;
	  mxxzMyyz = c1o2 * ((-omCoarse + c6o1   )*(-omFine + c2o1)) / ((-omFine + c6o1   )*(-omCoarse + c2o1)) * mxxzMyyzMean;
	  mxyyPxzz = c1o2 * ((-omCoarse + c3o1 )*(-omFine + c2o1)) / ((-omFine + c3o1 )*(-omCoarse + c2o1)) * mxyyPxzzMean;
	  mxyyMxzz = c1o2 * ((-omCoarse + c6o1   )*(-omFine + c2o1)) / ((-omFine + c6o1   )*(-omCoarse + c2o1)) * mxyyMxzzMean;

	  // linear combinations back
	  mfcba = ( mxxyMyzz + mxxyPyzz) * c1o2;
	  mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
	  mfcab = ( mxxzMyyz + mxxzPyyz) * c1o2;
	  mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
	  mfbca = ( mxyyMxzz + mxyyPxzz) * c1o2;
	  mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

	  //4.
	  mfacc = mfaaa*c1o9; 
	  mfcac = mfacc; 
	  mfcca = mfacc; 
	  //5.

	  //6.
	  mfccc = mfaaa*c1o27;
	  ////////////////////////////////////////////////////////////////////////////////////
	  //back
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Z - Dir
	  m0 =  mfaac * c1o2 +      mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfaac        - c2o1 * mfaab *  vvz         +  mfaaa                * (c1o1 - vz2)              - c1o1 * oMdrho * vz2; 
	  m2 =  mfaac * c1o2 +      mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaaa = m0;
	  mfaab = m1;
	  mfaac = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfabc * c1o2 +      mfabb * (vvz - c1o2) + mfaba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfabc        - c2o1 * mfabb *  vvz         + mfaba * (c1o1 - vz2); 
	  m2 =  mfabc * c1o2 +      mfabb * (vvz + c1o2) + mfaba * (     vz2 + vvz) * c1o2;
	  mfaba = m0;
	  mfabb = m1;
	  mfabc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfacb *  vvz         +  mfaca                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfacc * c1o2 +      mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaca = m0;
	  mfacb = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbac * c1o2 +      mfbab * (vvz - c1o2) + mfbaa * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbac        - c2o1 * mfbab *  vvz         + mfbaa * (c1o1 - vz2); 
	  m2 =  mfbac * c1o2 +      mfbab * (vvz + c1o2) + mfbaa * (     vz2 + vvz) * c1o2;
	  mfbaa = m0;
	  mfbab = m1;
	  mfbac = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbbc * c1o2 +      mfbbb * (vvz - c1o2) + mfbba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbbc        - c2o1 * mfbbb *  vvz         + mfbba * (c1o1 - vz2); 
	  m2 =  mfbbc * c1o2 +      mfbbb * (vvz + c1o2) + mfbba * (     vz2 + vvz) * c1o2;
	  mfbba = m0;
	  mfbbb = m1;
	  mfbbc = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbcb * (vvz - c1o2) + mfbca * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbcb *  vvz         + mfbca * (c1o1 - vz2); 
	  m2 =  mfbcc * c1o2 +      mfbcb * (vvz + c1o2) + mfbca * (     vz2 + vvz) * c1o2;
	  mfbca = m0;
	  mfbcb = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfcab *  vvz         +  mfcaa                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfcac * c1o2 +      mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcaa = m0;
	  mfcab = m1;
	  mfcac = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfcbb * (vvz - c1o2) + mfcba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfcbb *  vvz         + mfcba * (c1o1 - vz2); 
	  m2 =  mfcbc * c1o2 +      mfcbb * (vvz + c1o2) + mfcba * (     vz2 + vvz) * c1o2;
	  mfcba = m0;
	  mfcbb = m1;
	  mfcbc = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfccb *  vvz         +  mfcca                  * (c1o1 - vz2)              - c1o9 * oMdrho * vz2; 
	  m2 =  mfccc * c1o2 +      mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcca = m0;
	  mfccb = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Y - Dir
	  m0 =  mfaca * c1o2 +      mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfaca        - c2o1 * mfaba *  vvy         +  mfaaa                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfaca * c1o2 +      mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaaa = m0;
	  mfaba = m1;
	  mfaca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacb * c1o2 +      mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacb        - c2o1 * mfabb *  vvy         +  mfaab                  * (c1o1 - vy2)              - c2o3 * oMdrho * vy2; 
	  m2 =  mfacb * c1o2 +      mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaab = m0;
	  mfabb = m1;
	  mfacb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfabc *  vvy         +  mfaac                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfacc * c1o2 +      mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaac = m0;
	  mfabc = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbca * c1o2 +      mfbba * (vvy - c1o2) + mfbaa * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbca        - c2o1 * mfbba *  vvy         + mfbaa * (c1o1 - vy2); 
	  m2 =  mfbca * c1o2 +      mfbba * (vvy + c1o2) + mfbaa * (     vy2 + vvy) * c1o2;
	  mfbaa = m0;
	  mfbba = m1;
	  mfbca = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcb * c1o2 +      mfbbb * (vvy - c1o2) + mfbab * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcb        - c2o1 * mfbbb *  vvy         + mfbab * (c1o1 - vy2); 
	  m2 =  mfbcb * c1o2 +      mfbbb * (vvy + c1o2) + mfbab * (     vy2 + vvy) * c1o2;
	  mfbab = m0;
	  mfbbb = m1;
	  mfbcb = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbbc * (vvy - c1o2) + mfbac * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbbc *  vvy         + mfbac * (c1o1 - vy2); 
	  m2 =  mfbcc * c1o2 +      mfbbc * (vvy + c1o2) + mfbac * (     vy2 + vvy) * c1o2;
	  mfbac = m0;
	  mfbbc = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfcba *  vvy         +  mfcaa                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfcca * c1o2 +      mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcaa = m0;
	  mfcba = m1;
	  mfcca = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfcbb *  vvy         +  mfcab                  * (c1o1 - vy2)              - c2o9 * oMdrho * vy2; 
	  m2 =  mfccb * c1o2 +      mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcab = m0;
	  mfcbb = m1;
	  mfccb = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfcbc *  vvy         +  mfcac                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfccc * c1o2 +      mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcac = m0;
	  mfcbc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // X - Dir
	  m0 =  mfcaa * c1o2 +      mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcaa        - c2o1 * mfbaa *  vvx         +  mfaaa                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcaa * c1o2 +      mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaaa = m0;
	  mfbaa = m1;
	  mfcaa = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcba * c1o2 +      mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcba        - c2o1 * mfbba *  vvx         +  mfaba                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcba * c1o2 +      mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaba = m0;
	  mfbba = m1;
	  mfcba = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfbca *  vvx         +  mfaca                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcca * c1o2 +      mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaca = m0;
	  mfbca = m1;
	  mfcca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcab * c1o2 +      mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcab        - c2o1 * mfbab *  vvx         +  mfaab                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcab * c1o2 +      mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaab = m0;
	  mfbab = m1;
	  mfcab = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbb * c1o2 +      mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbb        - c2o1 * mfbbb *  vvx         +  mfabb                  * (c1o1 - vx2)              - c4o9 * oMdrho * vx2; 
	  m2 =  mfcbb * c1o2 +      mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabb = m0;
	  mfbbb = m1;
	  mfcbb = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfbcb *  vvx         +  mfacb                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfccb * c1o2 +      mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacb = m0;
	  mfbcb = m1;
	  mfccb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfbac *  vvx         +  mfaac                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcac * c1o2 +      mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaac = m0;
	  mfbac = m1;
	  mfcac = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfbbc *  vvx         +  mfabc                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcbc * c1o2 +      mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabc = m0;
	  mfbbc = m1;
	  mfcbc = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfbcc *  vvx         +  mfacc                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfccc * c1o2 +      mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacc = m0;
	  mfbcc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////
	  //index 0
	  kzero= posC[k];
	  kw   = neighborCX[kzero];
	  ks   = neighborCY[kzero];
	  kb   = neighborCZ[kzero];
	  ksw  = neighborCY[kw];
	  kbw  = neighborCZ[kw];
	  kbs  = neighborCZ[ks];
	  kbsw = neighborCZ[ksw];
	  ////////////////////////////////////////////////////////////////////////////////////


	  ////////////////////////////////////////////////////////////////////////////////////
	  feC[kzero]    = mfcbb;                                                                 
	  fwC[kw]       = mfabb;                                                               
	  fnC[kzero]    = mfbcb;
	  fsC[ks]       = mfbab;
	  ftC[kzero]    = mfbbc;
	  fbC[kb]       = mfbba;
	  fneC[kzero]   = mfccb;
	  fswC[ksw]     = mfaab;
	  fseC[ks]      = mfcab;
	  fnwC[kw]      = mfacb;
	  fteC[kzero]   = mfcbc;
	  fbwC[kbw]     = mfaba;
	  fbeC[kb]      = mfcba;
	  ftwC[kw]      = mfabc;
	  ftnC[kzero]   = mfbcc;
	  fbsC[kbs]     = mfbaa;
	  fbnC[kb]      = mfbca;
	  ftsC[ks]      = mfbac;
	  fzeroC[kzero] = mfbbb;
	  ftneC[kzero]  = mfccc;
	  ftseC[ks]     = mfcac;
	  fbneC[kb]     = mfcca;
	  fbseC[kbs]    = mfcaa;
	  ftnwC[kw]     = mfacc;
	  ftswC[ksw]    = mfaac;
	  fbnwC[kbw]    = mfaca;
	  fbswC[kbsw]   = mfaaa;
	  ////////////////////////////////////////////////////////////////////////////////////
   }
}
//////////////////////////////////////////////////////////////////////////






















































//////////////////////////////////////////////////////////////////////////
__device__ void scaleFC_RhoSq_comp_27_Calculation(real *DC, real *DF, unsigned int *neighborCX, unsigned int *neighborCY,
                                                  unsigned int *neighborCZ, unsigned int *neighborFX, unsigned int *neighborFY,
                                                  unsigned int *neighborFZ, unsigned int size_MatC, unsigned int size_MatF,
                                                  bool isEvenTimestep, unsigned int *posC, unsigned int *posFSWB, unsigned int kFC,
                                                  real omCoarse, real omFine, real nu, unsigned int nxC, unsigned int nyC,
                                                  unsigned int nxF, unsigned int nyF, OffFC offFC, const unsigned k)
{
    real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF,
        *fbnF, *ftsF, *fzeroF, *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

    feF    = &DF[DIR_P00 * size_MatF];
    fwF    = &DF[DIR_M00 * size_MatF];
    fnF    = &DF[DIR_0P0 * size_MatF];
    fsF    = &DF[DIR_0M0 * size_MatF];
    ftF    = &DF[DIR_00P * size_MatF];
    fbF    = &DF[DIR_00M * size_MatF];
    fneF   = &DF[DIR_PP0 * size_MatF];
    fswF   = &DF[DIR_MM0 * size_MatF];
    fseF   = &DF[DIR_PM0 * size_MatF];
    fnwF   = &DF[DIR_MP0 * size_MatF];
    fteF   = &DF[DIR_P0P * size_MatF];
    fbwF   = &DF[DIR_M0M * size_MatF];
    fbeF   = &DF[DIR_P0M * size_MatF];
    ftwF   = &DF[DIR_M0P * size_MatF];
    ftnF   = &DF[DIR_0PP * size_MatF];
    fbsF   = &DF[DIR_0MM * size_MatF];
    fbnF   = &DF[DIR_0PM * size_MatF];
    ftsF   = &DF[DIR_0MP * size_MatF];
    fzeroF = &DF[DIR_000 * size_MatF];
    ftneF  = &DF[DIR_PPP * size_MatF];
    ftswF  = &DF[DIR_MMP * size_MatF];
    ftseF  = &DF[DIR_PMP * size_MatF];
    ftnwF  = &DF[DIR_MPP * size_MatF];
    fbneF  = &DF[DIR_PPM * size_MatF];
    fbswF  = &DF[DIR_MMM * size_MatF];
    fbseF  = &DF[DIR_PMM * size_MatF];
    fbnwF  = &DF[DIR_MPM * size_MatF];

    real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC,
        *fbnC, *ftsC, *fzeroC, *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

    if (isEvenTimestep == true) {
        feC    = &DC[DIR_P00 * size_MatC];
        fwC    = &DC[DIR_M00 * size_MatC];
        fnC    = &DC[DIR_0P0 * size_MatC];
        fsC    = &DC[DIR_0M0 * size_MatC];
        ftC    = &DC[DIR_00P * size_MatC];
        fbC    = &DC[DIR_00M * size_MatC];
        fneC   = &DC[DIR_PP0 * size_MatC];
        fswC   = &DC[DIR_MM0 * size_MatC];
        fseC   = &DC[DIR_PM0 * size_MatC];
        fnwC   = &DC[DIR_MP0 * size_MatC];
        fteC   = &DC[DIR_P0P * size_MatC];
        fbwC   = &DC[DIR_M0M * size_MatC];
        fbeC   = &DC[DIR_P0M * size_MatC];
        ftwC   = &DC[DIR_M0P * size_MatC];
        ftnC   = &DC[DIR_0PP * size_MatC];
        fbsC   = &DC[DIR_0MM * size_MatC];
        fbnC   = &DC[DIR_0PM * size_MatC];
        ftsC   = &DC[DIR_0MP * size_MatC];
        fzeroC = &DC[DIR_000 * size_MatC];
        ftneC  = &DC[DIR_PPP * size_MatC];
        ftswC  = &DC[DIR_MMP * size_MatC];
        ftseC  = &DC[DIR_PMP * size_MatC];
        ftnwC  = &DC[DIR_MPP * size_MatC];
        fbneC  = &DC[DIR_PPM * size_MatC];
        fbswC  = &DC[DIR_MMM * size_MatC];
        fbseC  = &DC[DIR_PMM * size_MatC];
        fbnwC  = &DC[DIR_MPM * size_MatC];
    } else {
        fwC    = &DC[DIR_P00 * size_MatC];
        feC    = &DC[DIR_M00 * size_MatC];
        fsC    = &DC[DIR_0P0 * size_MatC];
        fnC    = &DC[DIR_0M0 * size_MatC];
        fbC    = &DC[DIR_00P * size_MatC];
        ftC    = &DC[DIR_00M * size_MatC];
        fswC   = &DC[DIR_PP0 * size_MatC];
        fneC   = &DC[DIR_MM0 * size_MatC];
        fnwC   = &DC[DIR_PM0 * size_MatC];
        fseC   = &DC[DIR_MP0 * size_MatC];
        fbwC   = &DC[DIR_P0P * size_MatC];
        fteC   = &DC[DIR_M0M * size_MatC];
        ftwC   = &DC[DIR_P0M * size_MatC];
        fbeC   = &DC[DIR_M0P * size_MatC];
        fbsC   = &DC[DIR_0PP * size_MatC];
        ftnC   = &DC[DIR_0MM * size_MatC];
        ftsC   = &DC[DIR_0PM * size_MatC];
        fbnC   = &DC[DIR_0MP * size_MatC];
        fzeroC = &DC[DIR_000 * size_MatC];
        fbswC  = &DC[DIR_PPP * size_MatC];
        fbneC  = &DC[DIR_MMP * size_MatC];
        fbnwC  = &DC[DIR_PMP * size_MatC];
        fbseC  = &DC[DIR_MPP * size_MatC];
        ftswC  = &DC[DIR_PPM * size_MatC];
        ftneC  = &DC[DIR_MMM * size_MatC];
        ftnwC  = &DC[DIR_PMM * size_MatC];
        ftseC  = &DC[DIR_MPM * size_MatC];
    }

    ////////////////////////////////////////////////////////////////////////////////
    real eps_new = c2o1;
    real omegaS  = omFine;   //-omFine;
    real o       = omCoarse; //-omCoarse;
    // real op = one;
    // real cu_sq;

    real xoff, yoff, zoff;
    real xoff_sq, yoff_sq, zoff_sq;

    real press; //,drho,vx1,vx2,vx3;
    real /*press_SWT,*/ drho_SWT, vx1_SWT, vx2_SWT, vx3_SWT;
    real /*press_NWT,*/ drho_NWT, vx1_NWT, vx2_NWT, vx3_NWT;
    real /*press_NET,*/ drho_NET, vx1_NET, vx2_NET, vx3_NET;
    real /*press_SET,*/ drho_SET, vx1_SET, vx2_SET, vx3_SET;
    real /*press_SWB,*/ drho_SWB, vx1_SWB, vx2_SWB, vx3_SWB;
    real /*press_NWB,*/ drho_NWB, vx1_NWB, vx2_NWB, vx3_NWB;
    real /*press_NEB,*/ drho_NEB, vx1_NEB, vx2_NEB, vx3_NEB;
    real /*press_SEB,*/ drho_SEB, vx1_SEB, vx2_SEB, vx3_SEB;
    real f_E, f_W, f_N, f_S, f_T, f_B, f_NE, f_SW, f_SE, f_NW, f_TE, f_BW, f_BE, f_TW, f_TN, f_BS, f_BN, f_TS, f_ZERO,
        f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
    // real
    // feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE,
    // feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
    real kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
    real kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
    real kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
    real kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
    real kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
    real kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
    real kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
    real kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
    real a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz,
        cxx, cyy, czz, cxy, cxz, cyz /*, axyz, bxyz, cxyz*/;
    real d0, dx, dy, dz, dxy, dxz, dyz /*, dxyz*/;

    if (k < kFC) {
        //////////////////////////////////////////////////////////////////////////
        xoff    = offFC.xOffFC[k];
        yoff    = offFC.yOffFC[k];
        zoff    = offFC.zOffFC[k];
        xoff_sq = xoff * xoff;
        yoff_sq = yoff * yoff;
        zoff_sq = zoff * zoff;
        //////////////////////////////////////////////////////////////////////////
        // SWB//
        //////////////////////////////////////////////////////////////////////////
        // index 0
        unsigned int k0zero = posFSWB[k];
        unsigned int k0w    = neighborFX[k0zero];
        unsigned int k0s    = neighborFY[k0zero];
        unsigned int k0b    = neighborFZ[k0zero];
        unsigned int k0sw   = neighborFY[k0w];
        unsigned int k0bw   = neighborFZ[k0w];
        unsigned int k0bs   = neighborFZ[k0s];
        unsigned int k0bsw  = neighborFZ[k0sw];
        //////////////////////////////////////////////////////////////////////////
        // index
        unsigned int kzero = k0zero;
        unsigned int kw    = k0w;
        unsigned int ks    = k0s;
        unsigned int kb    = k0b;
        unsigned int ksw   = k0sw;
        unsigned int kbw   = k0bw;
        unsigned int kbs   = k0bs;
        unsigned int kbsw  = k0bsw;
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_SWB = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_SWB = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_SWB);
        vx2_SWB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_SWB);
        vx3_SWB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_SWB);

        kxyFromfcNEQ_SWB =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_SWB) -
             ((vx1_SWB * vx2_SWB)));
        kyzFromfcNEQ_SWB =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_SWB) -
             ((vx2_SWB * vx3_SWB)));
        kxzFromfcNEQ_SWB =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_SWB) -
             ((vx1_SWB * vx3_SWB)));
        kxxMyyFromfcNEQ_SWB =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_SWB) -
             ((vx1_SWB * vx1_SWB - vx2_SWB * vx2_SWB)));
        kxxMzzFromfcNEQ_SWB =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_SWB) -
             ((vx1_SWB * vx1_SWB - vx3_SWB * vx3_SWB)));

        //////////////////////////////////////////////////////////////////////////
        // SWT//
        //////////////////////////////////////////////////////////////////////////
        // index
        kzero = kb;
        kw    = kbw;
        ks    = kbs;
        kb    = neighborFZ[kb];
        ksw   = kbsw;
        kbw   = neighborFZ[kbw];
        kbs   = neighborFZ[kbs];
        kbsw  = neighborFZ[kbsw];
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_SWT = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_SWT = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_SWT);
        vx2_SWT = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_SWT);
        vx3_SWT = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_SWT);

        kxyFromfcNEQ_SWT =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_SWT) -
             ((vx1_SWT * vx2_SWT)));
        kyzFromfcNEQ_SWT =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_SWT) -
             ((vx2_SWT * vx3_SWT)));
        kxzFromfcNEQ_SWT =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_SWT) -
             ((vx1_SWT * vx3_SWT)));
        kxxMyyFromfcNEQ_SWT =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_SWT) -
             ((vx1_SWT * vx1_SWT - vx2_SWT * vx2_SWT)));
        kxxMzzFromfcNEQ_SWT =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_SWT) -
             ((vx1_SWT * vx1_SWT - vx3_SWT * vx3_SWT)));

        //////////////////////////////////////////////////////////////////////////
        // SET//
        //////////////////////////////////////////////////////////////////////////
        // index
        kzero = kw;
        kw    = neighborFX[kw];
        ks    = ksw;
        kb    = kbw;
        ksw   = neighborFX[ksw];
        kbw   = neighborFX[kbw];
        kbs   = kbsw;
        kbsw  = neighborFX[kbsw];
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_SET = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_SET = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_SET);
        vx2_SET = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_SET);
        vx3_SET = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_SET);

        kxyFromfcNEQ_SET =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_SET) -
             ((vx1_SET * vx2_SET)));
        kyzFromfcNEQ_SET =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_SET) -
             ((vx2_SET * vx3_SET)));
        kxzFromfcNEQ_SET =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_SET) -
             ((vx1_SET * vx3_SET)));
        kxxMyyFromfcNEQ_SET =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_SET) -
             ((vx1_SET * vx1_SET - vx2_SET * vx2_SET)));
        kxxMzzFromfcNEQ_SET =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_SET) -
             ((vx1_SET * vx1_SET - vx3_SET * vx3_SET)));

        //////////////////////////////////////////////////////////////////////////
        // SEB//
        //////////////////////////////////////////////////////////////////////////
        // index
        kb    = kzero;
        kbw   = kw;
        kbs   = ks;
        kbsw  = ksw;
        kzero = k0w;
        kw    = neighborFX[k0w];
        ks    = k0sw;
        ksw   = neighborFX[k0sw];
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_SEB = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_SEB = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_SEB);
        vx2_SEB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_SEB);
        vx3_SEB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_SEB);

        kxyFromfcNEQ_SEB =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_SEB) -
             ((vx1_SEB * vx2_SEB)));
        kyzFromfcNEQ_SEB =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_SEB) -
             ((vx2_SEB * vx3_SEB)));
        kxzFromfcNEQ_SEB =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_SEB) -
             ((vx1_SEB * vx3_SEB)));
        kxxMyyFromfcNEQ_SEB =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_SEB) -
             ((vx1_SEB * vx1_SEB - vx2_SEB * vx2_SEB)));
        kxxMzzFromfcNEQ_SEB =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_SEB) -
             ((vx1_SEB * vx1_SEB - vx3_SEB * vx3_SEB)));

        //////////////////////////////////////////////////////////////////////////
        // NWB//
        //////////////////////////////////////////////////////////////////////////
        // index 0
        k0zero = k0s;
        k0w    = k0sw;
        k0s    = neighborFY[k0s];
        k0b    = k0bs;
        k0sw   = neighborFY[k0sw];
        k0bw   = k0bsw;
        k0bs   = neighborFY[k0bs];
        k0bsw  = neighborFY[k0bsw];
        //////////////////////////////////////////////////////////////////////////
        // index
        kzero = k0zero;
        kw    = k0w;
        ks    = k0s;
        kb    = k0b;
        ksw   = k0sw;
        kbw   = k0bw;
        kbs   = k0bs;
        kbsw  = k0bsw;
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_NWB = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_NWB = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_NWB);
        vx2_NWB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_NWB);
        vx3_NWB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_NWB);

        kxyFromfcNEQ_NWB =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_NWB) -
             ((vx1_NWB * vx2_NWB)));
        kyzFromfcNEQ_NWB =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_NWB) -
             ((vx2_NWB * vx3_NWB)));
        kxzFromfcNEQ_NWB =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_NWB) -
             ((vx1_NWB * vx3_NWB)));
        kxxMyyFromfcNEQ_NWB =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_NWB) -
             ((vx1_NWB * vx1_NWB - vx2_NWB * vx2_NWB)));
        kxxMzzFromfcNEQ_NWB =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_NWB) -
             ((vx1_NWB * vx1_NWB - vx3_NWB * vx3_NWB)));

        //////////////////////////////////////////////////////////////////////////
        // NWT//
        //////////////////////////////////////////////////////////////////////////
        // index
        kzero = kb;
        kw    = kbw;
        ks    = kbs;
        kb    = neighborFZ[kb];
        ksw   = kbsw;
        kbw   = neighborFZ[kbw];
        kbs   = neighborFZ[kbs];
        kbsw  = neighborFZ[kbsw];
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_NWT = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_NWT = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_NWT);
        vx2_NWT = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_NWT);
        vx3_NWT = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_NWT);

        kxyFromfcNEQ_NWT =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_NWT) -
             ((vx1_NWT * vx2_NWT)));
        kyzFromfcNEQ_NWT =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_NWT) -
             ((vx2_NWT * vx3_NWT)));
        kxzFromfcNEQ_NWT =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_NWT) -
             ((vx1_NWT * vx3_NWT)));
        kxxMyyFromfcNEQ_NWT =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_NWT) -
             ((vx1_NWT * vx1_NWT - vx2_NWT * vx2_NWT)));
        kxxMzzFromfcNEQ_NWT =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_NWT) -
             ((vx1_NWT * vx1_NWT - vx3_NWT * vx3_NWT)));

        //////////////////////////////////////////////////////////////////////////
        // NET//
        //////////////////////////////////////////////////////////////////////////
        // index
        kzero = kw;
        kw    = neighborFX[kw];
        ks    = ksw;
        kb    = kbw;
        ksw   = neighborFX[ksw];
        kbw   = neighborFX[kbw];
        kbs   = kbsw;
        kbsw  = neighborFX[kbsw];
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_NET = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_NET = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_NET);
        vx2_NET = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_NET);
        vx3_NET = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_NET);

        kxyFromfcNEQ_NET =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_NET) -
             ((vx1_NET * vx2_NET)));
        kyzFromfcNEQ_NET =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_NET) -
             ((vx2_NET * vx3_NET)));
        kxzFromfcNEQ_NET =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_NET) -
             ((vx1_NET * vx3_NET)));
        kxxMyyFromfcNEQ_NET =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_NET) -
             ((vx1_NET * vx1_NET - vx2_NET * vx2_NET)));
        kxxMzzFromfcNEQ_NET =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_NET) -
             ((vx1_NET * vx1_NET - vx3_NET * vx3_NET)));

        //////////////////////////////////////////////////////////////////////////
        // NEB//
        //////////////////////////////////////////////////////////////////////////
        // index
        kb    = kzero;
        kbw   = kw;
        kbs   = ks;
        kbsw  = ksw;
        kzero = k0w;
        kw    = neighborFX[k0w];
        ks    = k0sw;
        ksw   = neighborFX[k0sw];
        ////////////////////////////////////////////////////////////////////////////////
        f_E    = feF[kzero];
        f_W    = fwF[kw];
        f_N    = fnF[kzero];
        f_S    = fsF[ks];
        f_T    = ftF[kzero];
        f_B    = fbF[kb];
        f_NE   = fneF[kzero];
        f_SW   = fswF[ksw];
        f_SE   = fseF[ks];
        f_NW   = fnwF[kw];
        f_TE   = fteF[kzero];
        f_BW   = fbwF[kbw];
        f_BE   = fbeF[kb];
        f_TW   = ftwF[kw];
        f_TN   = ftnF[kzero];
        f_BS   = fbsF[kbs];
        f_BN   = fbnF[kb];
        f_TS   = ftsF[ks];
        f_ZERO = fzeroF[kzero];
        f_TNE  = ftneF[kzero];
        f_TSW  = ftswF[ksw];
        f_TSE  = ftseF[ks];
        f_TNW  = ftnwF[kw];
        f_BNE  = fbneF[kb];
        f_BSW  = fbswF[kbsw];
        f_BSE  = fbseF[kbs];
        f_BNW  = fbnwF[kbw];

        drho_NEB = f_E + f_W + f_N + f_S + f_T + f_B + f_NE + f_SW + f_SE + f_NW + f_TE + f_BW + f_BE + f_TW + f_TN +
                   f_BS + f_BN + f_TS + f_ZERO + f_TNE + f_TSW + f_TSE + f_TNW + f_BNE + f_BSW + f_BSE + f_BNW;
        vx1_NEB = (((f_TNE - f_BSW) + (f_TSE - f_BNW) + (f_BNE - f_TSW) + (f_BSE - f_TNW)) +
                   (((f_NE - f_SW) + (f_TE - f_BW)) + ((f_SE - f_NW) + (f_BE - f_TW))) + (f_E - f_W)) /
                  (c1o1 + drho_NEB);
        vx2_NEB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_BNE - f_TSW) + (f_BNW - f_TSE)) +
                   (((f_NE - f_SW) + (f_TN - f_BS)) + ((f_BN - f_TS) + (f_NW - f_SE))) + (f_N - f_S)) /
                  (c1o1 + drho_NEB);
        vx3_NEB = (((f_TNE - f_BSW) + (f_TNW - f_BSE) + (f_TSE - f_BNW) + (f_TSW - f_BNE)) +
                   (((f_TE - f_BW) + (f_TN - f_BS)) + ((f_TW - f_BE) + (f_TS - f_BN))) + (f_T - f_B)) /
                  (c1o1 + drho_NEB);

        kxyFromfcNEQ_NEB =
            -c3o1 * omegaS *
            ((f_SW + f_BSW + f_TSW - f_NW - f_BNW - f_TNW - f_SE - f_BSE - f_TSE + f_NE + f_BNE + f_TNE) /
                 (c1o1 + drho_NEB) -
             ((vx1_NEB * vx2_NEB)));
        kyzFromfcNEQ_NEB =
            -c3o1 * omegaS *
            ((f_BS + f_BSE + f_BSW - f_TS - f_TSE - f_TSW - f_BN - f_BNE - f_BNW + f_TN + f_TNE + f_TNW) /
                 (c1o1 + drho_NEB) -
             ((vx2_NEB * vx3_NEB)));
        kxzFromfcNEQ_NEB =
            -c3o1 * omegaS *
            ((f_BW + f_BSW + f_BNW - f_TW - f_TSW - f_TNW - f_BE - f_BSE - f_BNE + f_TE + f_TSE + f_TNE) /
                 (c1o1 + drho_NEB) -
             ((vx1_NEB * vx3_NEB)));
        kxxMyyFromfcNEQ_NEB =
            -c3o2 * omegaS *
            ((f_BW + f_W + f_TW - f_BS - f_S - f_TS - f_BN - f_N - f_TN + f_BE + f_E + f_TE) / (c1o1 + drho_NEB) -
             ((vx1_NEB * vx1_NEB - vx2_NEB * vx2_NEB)));
        kxxMzzFromfcNEQ_NEB =
            -c3o2 * omegaS *
            ((f_SW + f_W + f_NW - f_BS - f_TS - f_B - f_T - f_BN - f_TN + f_SE + f_E + f_NE) / (c1o1 + drho_NEB) -
             ((vx1_NEB * vx1_NEB - vx3_NEB * vx3_NEB)));

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // kxyFromfcNEQ_SWB    = zero;
        // kyzFromfcNEQ_SWB    = zero;
        // kxzFromfcNEQ_SWB    = zero;
        // kxxMyyFromfcNEQ_SWB = zero;
        // kxxMzzFromfcNEQ_SWB = zero;
        // kxyFromfcNEQ_SWT    = zero;
        // kyzFromfcNEQ_SWT    = zero;
        // kxzFromfcNEQ_SWT    = zero;
        // kxxMyyFromfcNEQ_SWT = zero;
        // kxxMzzFromfcNEQ_SWT = zero;
        // kxyFromfcNEQ_SET    = zero;
        // kyzFromfcNEQ_SET    = zero;
        // kxzFromfcNEQ_SET    = zero;
        // kxxMyyFromfcNEQ_SET = zero;
        // kxxMzzFromfcNEQ_SET = zero;
        // kxyFromfcNEQ_SEB    = zero;
        // kyzFromfcNEQ_SEB    = zero;
        // kxzFromfcNEQ_SEB    = zero;
        // kxxMyyFromfcNEQ_SEB = zero;
        // kxxMzzFromfcNEQ_SEB = zero;
        // kxyFromfcNEQ_NWB    = zero;
        // kyzFromfcNEQ_NWB    = zero;
        // kxzFromfcNEQ_NWB    = zero;
        // kxxMyyFromfcNEQ_NWB = zero;
        // kxxMzzFromfcNEQ_NWB = zero;
        // kxyFromfcNEQ_NWT    = zero;
        // kyzFromfcNEQ_NWT    = zero;
        // kxzFromfcNEQ_NWT    = zero;
        // kxxMyyFromfcNEQ_NWT = zero;
        // kxxMzzFromfcNEQ_NWT = zero;
        // kxyFromfcNEQ_NET    = zero;
        // kyzFromfcNEQ_NET    = zero;
        // kxzFromfcNEQ_NET    = zero;
        // kxxMyyFromfcNEQ_NET = zero;
        // kxxMzzFromfcNEQ_NET = zero;
        // kxyFromfcNEQ_NEB    = zero;
        // kyzFromfcNEQ_NEB    = zero;
        // kxzFromfcNEQ_NEB    = zero;
        // kxxMyyFromfcNEQ_NEB = zero;
        // kxxMzzFromfcNEQ_NEB = zero;
        //////////////////////////////////////////////////////////////////////////
        // 3
        //////////////////////////////////////////////////////////////////////////
        a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT -
              kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT -
              kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT -
              kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT -
              c2o1 * kxyFromfcNEQ_NEB - c2o1 * kxyFromfcNEQ_NET - c2o1 * kxyFromfcNEQ_NWB - c2o1 * kxyFromfcNEQ_NWT +
              c2o1 * kxyFromfcNEQ_SEB + c2o1 * kxyFromfcNEQ_SET + c2o1 * kxyFromfcNEQ_SWB + c2o1 * kxyFromfcNEQ_SWT +
              c2o1 * kxzFromfcNEQ_NEB - c2o1 * kxzFromfcNEQ_NET + c2o1 * kxzFromfcNEQ_NWB - c2o1 * kxzFromfcNEQ_NWT +
              c2o1 * kxzFromfcNEQ_SEB - c2o1 * kxzFromfcNEQ_SET + c2o1 * kxzFromfcNEQ_SWB - c2o1 * kxzFromfcNEQ_SWT +
              c8o1 * vx1_NEB + c8o1 * vx1_NET + c8o1 * vx1_NWB + c8o1 * vx1_NWT + c8o1 * vx1_SEB + c8o1 * vx1_SET +
              c8o1 * vx1_SWB + c8o1 * vx1_SWT + c2o1 * vx2_NEB + c2o1 * vx2_NET - c2o1 * vx2_NWB - c2o1 * vx2_NWT -
              c2o1 * vx2_SEB - c2o1 * vx2_SET + c2o1 * vx2_SWB + c2o1 * vx2_SWT - c2o1 * vx3_NEB + c2o1 * vx3_NET +
              c2o1 * vx3_NWB - c2o1 * vx3_NWT - c2o1 * vx3_SEB + c2o1 * vx3_SET + c2o1 * vx3_SWB - c2o1 * vx3_SWT) /
             c64o1;
        b0 = (c2o1 * kxxMyyFromfcNEQ_NEB + c2o1 * kxxMyyFromfcNEQ_NET + c2o1 * kxxMyyFromfcNEQ_NWB +
              c2o1 * kxxMyyFromfcNEQ_NWT - c2o1 * kxxMyyFromfcNEQ_SEB - c2o1 * kxxMyyFromfcNEQ_SET -
              c2o1 * kxxMyyFromfcNEQ_SWB - c2o1 * kxxMyyFromfcNEQ_SWT - kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET -
              kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET +
              kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - c2o1 * kxyFromfcNEQ_NEB - c2o1 * kxyFromfcNEQ_NET +
              c2o1 * kxyFromfcNEQ_NWB + c2o1 * kxyFromfcNEQ_NWT - c2o1 * kxyFromfcNEQ_SEB - c2o1 * kxyFromfcNEQ_SET +
              c2o1 * kxyFromfcNEQ_SWB + c2o1 * kxyFromfcNEQ_SWT + c2o1 * kyzFromfcNEQ_NEB - c2o1 * kyzFromfcNEQ_NET +
              c2o1 * kyzFromfcNEQ_NWB - c2o1 * kyzFromfcNEQ_NWT + c2o1 * kyzFromfcNEQ_SEB - c2o1 * kyzFromfcNEQ_SET +
              c2o1 * kyzFromfcNEQ_SWB - c2o1 * kyzFromfcNEQ_SWT + c2o1 * vx1_NEB + c2o1 * vx1_NET - c2o1 * vx1_NWB -
              c2o1 * vx1_NWT - c2o1 * vx1_SEB - c2o1 * vx1_SET + c2o1 * vx1_SWB + c2o1 * vx1_SWT + c8o1 * vx2_NEB +
              c8o1 * vx2_NET + c8o1 * vx2_NWB + c8o1 * vx2_NWT + c8o1 * vx2_SEB + c8o1 * vx2_SET + c8o1 * vx2_SWB +
              c8o1 * vx2_SWT - c2o1 * vx3_NEB + c2o1 * vx3_NET - c2o1 * vx3_NWB + c2o1 * vx3_NWT + c2o1 * vx3_SEB -
              c2o1 * vx3_SET + c2o1 * vx3_SWB - c2o1 * vx3_SWT) /
             c64o1;
        c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT +
              kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT -
              c2o1 * kxxMzzFromfcNEQ_NEB + c2o1 * kxxMzzFromfcNEQ_NET - c2o1 * kxxMzzFromfcNEQ_NWB +
              c2o1 * kxxMzzFromfcNEQ_NWT - c2o1 * kxxMzzFromfcNEQ_SEB + c2o1 * kxxMzzFromfcNEQ_SET -
              c2o1 * kxxMzzFromfcNEQ_SWB + c2o1 * kxxMzzFromfcNEQ_SWT - c2o1 * kxzFromfcNEQ_NEB -
              c2o1 * kxzFromfcNEQ_NET + c2o1 * kxzFromfcNEQ_NWB + c2o1 * kxzFromfcNEQ_NWT - c2o1 * kxzFromfcNEQ_SEB -
              c2o1 * kxzFromfcNEQ_SET + c2o1 * kxzFromfcNEQ_SWB + c2o1 * kxzFromfcNEQ_SWT - c2o1 * kyzFromfcNEQ_NEB -
              c2o1 * kyzFromfcNEQ_NET - c2o1 * kyzFromfcNEQ_NWB - c2o1 * kyzFromfcNEQ_NWT + c2o1 * kyzFromfcNEQ_SEB +
              c2o1 * kyzFromfcNEQ_SET + c2o1 * kyzFromfcNEQ_SWB + c2o1 * kyzFromfcNEQ_SWT - c2o1 * vx1_NEB +
              c2o1 * vx1_NET + c2o1 * vx1_NWB - c2o1 * vx1_NWT - c2o1 * vx1_SEB + c2o1 * vx1_SET + c2o1 * vx1_SWB -
              c2o1 * vx1_SWT - c2o1 * vx2_NEB + c2o1 * vx2_NET - c2o1 * vx2_NWB + c2o1 * vx2_NWT + c2o1 * vx2_SEB -
              c2o1 * vx2_SET + c2o1 * vx2_SWB - c2o1 * vx2_SWT + c8o1 * vx3_NEB + c8o1 * vx3_NET + c8o1 * vx3_NWB +
              c8o1 * vx3_NWT + c8o1 * vx3_SEB + c8o1 * vx3_SET + c8o1 * vx3_SWB + c8o1 * vx3_SWT) /
             c64o1;
        ax  = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT) / c4o1;
        bx  = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT) / c4o1;
        cx  = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT) / c4o1;
        axx = (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT +
               kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT +
               kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT +
               kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + c2o1 * vx2_NEB +
               c2o1 * vx2_NET - c2o1 * vx2_NWB - c2o1 * vx2_NWT - c2o1 * vx2_SEB - c2o1 * vx2_SET + c2o1 * vx2_SWB +
               c2o1 * vx2_SWT - c2o1 * vx3_NEB + c2o1 * vx3_NET + c2o1 * vx3_NWB - c2o1 * vx3_NWT - c2o1 * vx3_SEB +
               c2o1 * vx3_SET + c2o1 * vx3_SWB - c2o1 * vx3_SWT) /
              c16o1;
        bxx = (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + kxyFromfcNEQ_SEB +
               kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - c2o1 * vx1_NEB - c2o1 * vx1_NET +
               c2o1 * vx1_NWB + c2o1 * vx1_NWT + c2o1 * vx1_SEB + c2o1 * vx1_SET - c2o1 * vx1_SWB - c2o1 * vx1_SWT) /
              c8o1;
        cxx = (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SEB +
               kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + c2o1 * vx1_NEB - c2o1 * vx1_NET -
               c2o1 * vx1_NWB + c2o1 * vx1_NWT + c2o1 * vx1_SEB - c2o1 * vx1_SET - c2o1 * vx1_SWB + c2o1 * vx1_SWT) /
              c8o1;
        ay  = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT) / c4o1;
        by  = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT) / c4o1;
        cy  = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT) / c4o1;
        ayy = (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - kxyFromfcNEQ_SEB -
               kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - c2o1 * vx2_NEB - c2o1 * vx2_NET +
               c2o1 * vx2_NWB + c2o1 * vx2_NWT + c2o1 * vx2_SEB + c2o1 * vx2_SET - c2o1 * vx2_SWB - c2o1 * vx2_SWT) /
              c8o1;
        byy = (-c2o1 * kxxMyyFromfcNEQ_NEB - c2o1 * kxxMyyFromfcNEQ_NET - c2o1 * kxxMyyFromfcNEQ_NWB -
               c2o1 * kxxMyyFromfcNEQ_NWT + c2o1 * kxxMyyFromfcNEQ_SEB + c2o1 * kxxMyyFromfcNEQ_SET +
               c2o1 * kxxMyyFromfcNEQ_SWB + c2o1 * kxxMyyFromfcNEQ_SWT + kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET +
               kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET -
               kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + c2o1 * vx1_NEB + c2o1 * vx1_NET - c2o1 * vx1_NWB -
               c2o1 * vx1_NWT - c2o1 * vx1_SEB - c2o1 * vx1_SET + c2o1 * vx1_SWB + c2o1 * vx1_SWT - c2o1 * vx3_NEB +
               c2o1 * vx3_NET - c2o1 * vx3_NWB + c2o1 * vx3_NWT + c2o1 * vx3_SEB - c2o1 * vx3_SET + c2o1 * vx3_SWB -
               c2o1 * vx3_SWT) /
              c16o1;
        cyy = (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SEB -
               kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + c2o1 * vx2_NEB - c2o1 * vx2_NET +
               c2o1 * vx2_NWB - c2o1 * vx2_NWT - c2o1 * vx2_SEB + c2o1 * vx2_SET - c2o1 * vx2_SWB + c2o1 * vx2_SWT) /
              c8o1;
        az  = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT) / c4o1;
        bz  = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT) / c4o1;
        cz  = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT) / c4o1;
        azz = (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SEB +
               kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + c2o1 * vx3_NEB - c2o1 * vx3_NET -
               c2o1 * vx3_NWB + c2o1 * vx3_NWT + c2o1 * vx3_SEB - c2o1 * vx3_SET - c2o1 * vx3_SWB + c2o1 * vx3_SWT) /
              c8o1;
        bzz = (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SEB +
               kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + c2o1 * vx3_NEB - c2o1 * vx3_NET +
               c2o1 * vx3_NWB - c2o1 * vx3_NWT - c2o1 * vx3_SEB + c2o1 * vx3_SET - c2o1 * vx3_SWB + c2o1 * vx3_SWT) /
              c8o1;
        czz = (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT -
               kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT +
               c2o1 * kxxMzzFromfcNEQ_NEB - c2o1 * kxxMzzFromfcNEQ_NET + c2o1 * kxxMzzFromfcNEQ_NWB -
               c2o1 * kxxMzzFromfcNEQ_NWT + c2o1 * kxxMzzFromfcNEQ_SEB - c2o1 * kxxMzzFromfcNEQ_SET +
               c2o1 * kxxMzzFromfcNEQ_SWB - c2o1 * kxxMzzFromfcNEQ_SWT - c2o1 * vx1_NEB + c2o1 * vx1_NET +
               c2o1 * vx1_NWB - c2o1 * vx1_NWT - c2o1 * vx1_SEB + c2o1 * vx1_SET + c2o1 * vx1_SWB - c2o1 * vx1_SWT -
               c2o1 * vx2_NEB + c2o1 * vx2_NET - c2o1 * vx2_NWB + c2o1 * vx2_NWT + c2o1 * vx2_SEB - c2o1 * vx2_SET +
               c2o1 * vx2_SWB - c2o1 * vx2_SWT) /
              c16o1;
        axy = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT) / c2o1;
        bxy = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT) / c2o1;
        cxy = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT) / c2o1;
        axz = (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT) / c2o1;
        bxz = (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT) / c2o1;
        cxz = (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT) / c2o1;
        ayz = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT) / c2o1;
        byz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT) / c2o1;
        cyz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT) / c2o1;
        // axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
        // bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
        // cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        real kxyAverage    = c0o1;
        real kyzAverage    = c0o1;
        real kxzAverage    = c0o1;
        real kxxMyyAverage = c0o1;
        real kxxMzzAverage = c0o1;
        // real kxyAverage	 =(kxyFromfcNEQ_SWB+
        //				   kxyFromfcNEQ_SWT+
        //				   kxyFromfcNEQ_SET+
        //				   kxyFromfcNEQ_SEB+
        //				   kxyFromfcNEQ_NWB+
        //				   kxyFromfcNEQ_NWT+
        //				   kxyFromfcNEQ_NET+
        //				   kxyFromfcNEQ_NEB)*c1o8-(ay+bx);
        // real kyzAverage	 =(kyzFromfcNEQ_SWB+
        //				   kyzFromfcNEQ_SWT+
        //				   kyzFromfcNEQ_SET+
        //				   kyzFromfcNEQ_SEB+
        //				   kyzFromfcNEQ_NWB+
        //				   kyzFromfcNEQ_NWT+
        //				   kyzFromfcNEQ_NET+
        //				   kyzFromfcNEQ_NEB)*c1o8-(bz+cy);
        // real kxzAverage	 =(kxzFromfcNEQ_SWB+
        //				   kxzFromfcNEQ_SWT+
        //				   kxzFromfcNEQ_SET+
        //				   kxzFromfcNEQ_SEB+
        //				   kxzFromfcNEQ_NWB+
        //				   kxzFromfcNEQ_NWT+
        //				   kxzFromfcNEQ_NET+
        //				   kxzFromfcNEQ_NEB)*c1o8-(az+cx);
        // real kxxMyyAverage	 =(kxxMyyFromfcNEQ_SWB+
        //				   kxxMyyFromfcNEQ_SWT+
        //				   kxxMyyFromfcNEQ_SET+
        //				   kxxMyyFromfcNEQ_SEB+
        //				   kxxMyyFromfcNEQ_NWB+
        //				   kxxMyyFromfcNEQ_NWT+
        //				   kxxMyyFromfcNEQ_NET+
        //				   kxxMyyFromfcNEQ_NEB)*c1o8-(ax-by);
        // real kxxMzzAverage	 =(kxxMzzFromfcNEQ_SWB+
        //				   kxxMzzFromfcNEQ_SWT+
        //				   kxxMzzFromfcNEQ_SET+
        //				   kxxMzzFromfcNEQ_SEB+
        //				   kxxMzzFromfcNEQ_NWB+
        //				   kxxMzzFromfcNEQ_NWT+
        //				   kxxMzzFromfcNEQ_NET+
        //				   kxxMzzFromfcNEQ_NEB)*c1o8-(ax-cz);

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////Press
        // d0   = ( press_NEB + press_NET + press_NWB + press_NWT + press_SEB + press_SET + press_SWB + press_SWT) *
        // c1o8; dx   = ( press_NEB + press_NET - press_NWB - press_NWT + press_SEB + press_SET - press_SWB - press_SWT)
        // * c1o4; dy   = ( press_NEB + press_NET + press_NWB + press_NWT - press_SEB - press_SET - press_SWB -
        // press_SWT) * c1o4; dz   = (-press_NEB + press_NET - press_NWB + press_NWT - press_SEB + press_SET - press_SWB
        // + press_SWT) * c1o4; dxy  = ( press_NEB + press_NET - press_NWB - press_NWT - press_SEB - press_SET +
        // press_SWB + press_SWT) * c1o2; dxz  = (-press_NEB + press_NET + press_NWB - press_NWT - press_SEB + press_SET
        // + press_SWB - press_SWT) * c1o2; dyz  = (-press_NEB + press_NET - press_NWB + press_NWT + press_SEB -
        // press_SET + press_SWB - press_SWT) * c1o2; dxyz =  -press_NEB + press_NET + press_NWB - press_NWT + press_SEB
        // - press_SET - press_SWB + press_SWT;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // drho
        real LapRho = ((xoff != c0o1) || (yoff != c0o1) || (zoff != c0o1))
                          ? c0o1
                          : -c3o1 * (ax * ax + by * by + cz * cz) - c6o1 * (bx * ay + cx * az + cy * bz);
        d0 = (drho_NEB + drho_NET + drho_NWB + drho_NWT + drho_SEB + drho_SET + drho_SWB + drho_SWT - c2o1 * LapRho) *
             c1o8;
        dx  = (drho_NEB + drho_NET - drho_NWB - drho_NWT + drho_SEB + drho_SET - drho_SWB - drho_SWT) * c1o4;
        dy  = (drho_NEB + drho_NET + drho_NWB + drho_NWT - drho_SEB - drho_SET - drho_SWB - drho_SWT) * c1o4;
        dz  = (-drho_NEB + drho_NET - drho_NWB + drho_NWT - drho_SEB + drho_SET - drho_SWB + drho_SWT) * c1o4;
        dxy = (drho_NEB + drho_NET - drho_NWB - drho_NWT - drho_SEB - drho_SET + drho_SWB + drho_SWT) * c1o2;
        dxz = (-drho_NEB + drho_NET + drho_NWB - drho_NWT - drho_SEB + drho_SET + drho_SWB - drho_SWT) * c1o2;
        dyz = (-drho_NEB + drho_NET - drho_NWB + drho_NWT + drho_SEB - drho_SET + drho_SWB - drho_SWT) * c1o2;
        // dxyz =  -drho_NEB + drho_NET + drho_NWB - drho_NWT + drho_SEB - drho_SET - drho_SWB + drho_SWT;
        // d0   = zero;
        // dx   = zero;
        // dy   = zero;
        // dz   = zero;
        // dxy  = zero;
        // dxz  = zero;
        // dyz  = zero;
        // dxyz = zero;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Bernd das Brot
        //
        //
        // x------x
        // |      |
        // |	 ---+--->X
        // |		|  \
	  // x------x   \
	  //			off-vector
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz +
             xoff * yoff * axy + xoff * zoff * axz + yoff * zoff * ayz;
        ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
        ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
        az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
        b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz +
             xoff * yoff * bxy + xoff * zoff * bxz + yoff * zoff * byz;
        bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
        by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
        bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
        c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz +
             xoff * yoff * cxy + xoff * zoff * cxz + yoff * zoff * cyz;
        cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
        cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
        cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
        d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff * yoff * dxy + xoff * zoff * dxz + yoff * zoff * dyz;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //  FIX
        //  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // AAAAAAAAAAAAHHHHHHHHHHHH!!!!! Mieser Test!!!
        // b0= bx= by= bz= bxx= byy= bzz= bxy= bxz= byz= c0= cx= cy= cz= cxx= cyy= czz= cxy= cxz= cyz= axyz= bxyz=
        // cxyz=zero; b0=zero; bx=zero; by=zero; bz=zero; bxx=zero; byy=zero; bzz=zero; bxy=zero; bxz=zero; byz=zero;
        // c0=zero;
        // cx=zero;
        // cy=zero;
        // cz=zero;
        // cxx=zero;
        // cyy=zero;
        // czz=zero;
        // cxy=zero;
        // cxz=zero;
        // cyz=zero;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        real mfcbb = c0o1;
        real mfabb = c0o1;
        real mfbcb = c0o1;
        real mfbab = c0o1;
        real mfbbc = c0o1;
        real mfbba = c0o1;
        real mfccb = c0o1;
        real mfaab = c0o1;
        real mfcab = c0o1;
        real mfacb = c0o1;
        real mfcbc = c0o1;
        real mfaba = c0o1;
        real mfcba = c0o1;
        real mfabc = c0o1;
        real mfbcc = c0o1;
        real mfbaa = c0o1;
        real mfbca = c0o1;
        real mfbac = c0o1;
        real mfbbb = c0o1;
        real mfccc = c0o1;
        real mfaac = c0o1;
        real mfcac = c0o1;
        real mfacc = c0o1;
        real mfcca = c0o1;
        real mfaaa = c0o1;
        real mfcaa = c0o1;
        real mfaca = c0o1;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
        real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
        // real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
        // real O3 = c2o1 - o;
        // real residu, residutmp;
        // residutmp = c0o1;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
        real NeqOn = c1o1; // zero;//one;   //.... one = on ..... zero = off
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Position C 0., 0., 0.
        //
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // x = 0.;
        // y = 0.;
        // z = 0.;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // real mxoff = -xoff;
        // real myoff = -yoff;
        // real mzoff = -zoff;
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // press = press_NET * (c1o8 - c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) +
        //  press_NWT * (c1o8 + c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) +
        //  press_SET * (c1o8 - c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) +
        //  press_SWT * (c1o8 + c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) +
        //  press_NEB * (c1o8 - c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) +
        //  press_NWB * (c1o8 + c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) +
        //  press_SEB * (c1o8 - c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff) +
        //  press_SWB * (c1o8 + c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff);
        // drho  = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) +
        //  drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) +
        //  drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) +
        //  drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) +
        //  drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) +
        //  drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) +
        //  drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) +
        //  drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
        press = d0;
        vvx   = a0;
        vvy   = b0;
        vvz   = c0;

        // mfaaa = drho;
        // mfaaa = press + (ax+by+cz)/three;  //  1/3 = 2/3*(1/op-1/2)
        mfaaa = press; // if drho is interpolated directly

        vx2    = vvx * vvx;
        vy2    = vvy * vvy;
        vz2    = vvz * vvz;
        oMdrho = c1o1;
        // oMdrho = one - mfaaa;

        // two
        // linear combinations
        mxxPyyPzz = mfaaa;
        // mxxMyy    = -c2o3*(ax - by)*eps_new/o;
        // mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

        // mfabb     = -c1o3 * (bz + cy)*eps_new/o;
        // mfbab     = -c1o3 * (az + cx)*eps_new/o;
        // mfbba     = -c1o3 * (ay + bx)*eps_new/o;
        mxxMyy = -c2o3 * ((ax - by) + kxxMyyAverage) * eps_new / o * (c1o1 + press);
        mxxMzz = -c2o3 * ((ax - cz) + kxxMzzAverage) * eps_new / o * (c1o1 + press);

        mfabb = -c1o3 * ((bz + cy) + kyzAverage) * eps_new / o * (c1o1 + press);
        mfbab = -c1o3 * ((az + cx) + kxzAverage) * eps_new / o * (c1o1 + press);
        mfbba = -c1o3 * ((ay + bx) + kxyAverage) * eps_new / o * (c1o1 + press);

        // linear combinations back
        mfcaa = c1o3 * (mxxMyy + mxxMzz + mxxPyyPzz) * NeqOn;
        mfaca = c1o3 * (-c2o1 * mxxMyy + mxxMzz + mxxPyyPzz) * NeqOn;
        mfaac = c1o3 * (mxxMyy - c2o1 * mxxMzz + mxxPyyPzz) * NeqOn;

        // 3.
        // linear combinations
        // residu = residutmp * (ayz + bxz + cxy );
        // mfbbb = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
        mfbbb = c0o1;

        // residu = residutmp * (axy + two*bxx + two*bzz + cyz );
        // residu = -(c1o9*(axy - 2*bxx - 2*bzz + cyz ));
        // mxxyPyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
        mxxyPyzz = c0o1;

        // residu = residutmp * (axy + two*bxx - two*bzz - cyz );
        // residu = c1o9*(axy - 2*bxx + 2*bzz - cyz );
        // mxxyMyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
        mxxyMyzz = c0o1;

        // residu = residutmp * (axz + byz + two*cxx + two*cyy );
        // residu = -(c1o9*(axz + byz - 2*cxx - 2*cyy ));
        // mxxzPyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
        mxxzPyyz = c0o1;

        // residu = residutmp * (axz - byz + two*cxx - two*cyy );
        // residu = c1o9*(axz - byz - 2*cxx + 2*cyy );
        // mxxzMyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
        mxxzMyyz = c0o1;

        // residu = residutmp * (two*ayy + two*azz + bxy + cxz );
        // residu = c1o9*(2*ayy + 2*azz - bxy - cxz );
        // mxyyPxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
        mxyyPxzz = c0o1;

        // residu = residutmp * (two*ayy - two*azz + bxy - cxz );
        // residu = c1o9*(-2*ayy + 2*azz + bxy - cxz );
        // mxyyMxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
        mxyyMxzz = c0o1;

        // linear combinations back
        mfcba = (mxxyMyzz + mxxyPyzz) * c1o2;
        mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
        mfcab = (mxxzMyyz + mxxzPyyz) * c1o2;
        mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
        mfbca = (mxyyMxzz + mxyyPxzz) * c1o2;
        mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

        // 4.
        mfacc = mfaaa * c1o9;
        mfcac = mfacc;
        mfcca = mfacc;
        // 5.

        // 6.
        mfccc = mfaaa * c1o27;
        ////////////////////////////////////////////////////////////////////////////////////
        // back
        ////////////////////////////////////////////////////////////////////////////////////
        // mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
        ////////////////////////////////////////////////////////////////////////////////////
        // Z - Dir
        m0    = mfaac * c1o2 + mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (vz2 - vvz) * c1o2;
        m1    = -mfaac - c2o1 * mfaab * vvz + mfaaa * (c1o1 - vz2) - c1o1 * oMdrho * vz2;
        m2    = mfaac * c1o2 + mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (vz2 + vvz) * c1o2;
        mfaaa = m0;
        mfaab = m1;
        mfaac = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfabc * c1o2 + mfabb * (vvz - c1o2) + mfaba * (vz2 - vvz) * c1o2;
        m1    = -mfabc - c2o1 * mfabb * vvz + mfaba * (c1o1 - vz2);
        m2    = mfabc * c1o2 + mfabb * (vvz + c1o2) + mfaba * (vz2 + vvz) * c1o2;
        mfaba = m0;
        mfabb = m1;
        mfabc = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfacc * c1o2 + mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (vz2 - vvz) * c1o2;
        m1    = -mfacc - c2o1 * mfacb * vvz + mfaca * (c1o1 - vz2) - c1o3 * oMdrho * vz2;
        m2    = mfacc * c1o2 + mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (vz2 + vvz) * c1o2;
        mfaca = m0;
        mfacb = m1;
        mfacc = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfbac * c1o2 + mfbab * (vvz - c1o2) + mfbaa * (vz2 - vvz) * c1o2;
        m1    = -mfbac - c2o1 * mfbab * vvz + mfbaa * (c1o1 - vz2);
        m2    = mfbac * c1o2 + mfbab * (vvz + c1o2) + mfbaa * (vz2 + vvz) * c1o2;
        mfbaa = m0;
        mfbab = m1;
        mfbac = m2;
        /////////b//////////////////////////////////////////////////////////////////////////
        m0    = mfbbc * c1o2 + mfbbb * (vvz - c1o2) + mfbba * (vz2 - vvz) * c1o2;
        m1    = -mfbbc - c2o1 * mfbbb * vvz + mfbba * (c1o1 - vz2);
        m2    = mfbbc * c1o2 + mfbbb * (vvz + c1o2) + mfbba * (vz2 + vvz) * c1o2;
        mfbba = m0;
        mfbbb = m1;
        mfbbc = m2;
        /////////b//////////////////////////////////////////////////////////////////////////
        m0    = mfbcc * c1o2 + mfbcb * (vvz - c1o2) + mfbca * (vz2 - vvz) * c1o2;
        m1    = -mfbcc - c2o1 * mfbcb * vvz + mfbca * (c1o1 - vz2);
        m2    = mfbcc * c1o2 + mfbcb * (vvz + c1o2) + mfbca * (vz2 + vvz) * c1o2;
        mfbca = m0;
        mfbcb = m1;
        mfbcc = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfcac * c1o2 + mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (vz2 - vvz) * c1o2;
        m1    = -mfcac - c2o1 * mfcab * vvz + mfcaa * (c1o1 - vz2) - c1o3 * oMdrho * vz2;
        m2    = mfcac * c1o2 + mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (vz2 + vvz) * c1o2;
        mfcaa = m0;
        mfcab = m1;
        mfcac = m2;
        /////////c//////////////////////////////////////////////////////////////////////////
        m0    = mfcbc * c1o2 + mfcbb * (vvz - c1o2) + mfcba * (vz2 - vvz) * c1o2;
        m1    = -mfcbc - c2o1 * mfcbb * vvz + mfcba * (c1o1 - vz2);
        m2    = mfcbc * c1o2 + mfcbb * (vvz + c1o2) + mfcba * (vz2 + vvz) * c1o2;
        mfcba = m0;
        mfcbb = m1;
        mfcbc = m2;
        /////////c//////////////////////////////////////////////////////////////////////////
        m0    = mfccc * c1o2 + mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (vz2 - vvz) * c1o2;
        m1    = -mfccc - c2o1 * mfccb * vvz + mfcca * (c1o1 - vz2) - c1o9 * oMdrho * vz2;
        m2    = mfccc * c1o2 + mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (vz2 + vvz) * c1o2;
        mfcca = m0;
        mfccb = m1;
        mfccc = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        // mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
        ////////////////////////////////////////////////////////////////////////////////////
        // Y - Dir
        m0    = mfaca * c1o2 + mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (vy2 - vvy) * c1o2;
        m1    = -mfaca - c2o1 * mfaba * vvy + mfaaa * (c1o1 - vy2) - c1o6 * oMdrho * vy2;
        m2    = mfaca * c1o2 + mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (vy2 + vvy) * c1o2;
        mfaaa = m0;
        mfaba = m1;
        mfaca = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfacb * c1o2 + mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (vy2 - vvy) * c1o2;
        m1    = -mfacb - c2o1 * mfabb * vvy + mfaab * (c1o1 - vy2) - c2o3 * oMdrho * vy2;
        m2    = mfacb * c1o2 + mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (vy2 + vvy) * c1o2;
        mfaab = m0;
        mfabb = m1;
        mfacb = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfacc * c1o2 + mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (vy2 - vvy) * c1o2;
        m1    = -mfacc - c2o1 * mfabc * vvy + mfaac * (c1o1 - vy2) - c1o6 * oMdrho * vy2;
        m2    = mfacc * c1o2 + mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (vy2 + vvy) * c1o2;
        mfaac = m0;
        mfabc = m1;
        mfacc = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfbca * c1o2 + mfbba * (vvy - c1o2) + mfbaa * (vy2 - vvy) * c1o2;
        m1    = -mfbca - c2o1 * mfbba * vvy + mfbaa * (c1o1 - vy2);
        m2    = mfbca * c1o2 + mfbba * (vvy + c1o2) + mfbaa * (vy2 + vvy) * c1o2;
        mfbaa = m0;
        mfbba = m1;
        mfbca = m2;
        /////////b//////////////////////////////////////////////////////////////////////////
        m0    = mfbcb * c1o2 + mfbbb * (vvy - c1o2) + mfbab * (vy2 - vvy) * c1o2;
        m1    = -mfbcb - c2o1 * mfbbb * vvy + mfbab * (c1o1 - vy2);
        m2    = mfbcb * c1o2 + mfbbb * (vvy + c1o2) + mfbab * (vy2 + vvy) * c1o2;
        mfbab = m0;
        mfbbb = m1;
        mfbcb = m2;
        /////////b//////////////////////////////////////////////////////////////////////////
        m0    = mfbcc * c1o2 + mfbbc * (vvy - c1o2) + mfbac * (vy2 - vvy) * c1o2;
        m1    = -mfbcc - c2o1 * mfbbc * vvy + mfbac * (c1o1 - vy2);
        m2    = mfbcc * c1o2 + mfbbc * (vvy + c1o2) + mfbac * (vy2 + vvy) * c1o2;
        mfbac = m0;
        mfbbc = m1;
        mfbcc = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfcca * c1o2 + mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (vy2 - vvy) * c1o2;
        m1    = -mfcca - c2o1 * mfcba * vvy + mfcaa * (c1o1 - vy2) - c1o18 * oMdrho * vy2;
        m2    = mfcca * c1o2 + mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (vy2 + vvy) * c1o2;
        mfcaa = m0;
        mfcba = m1;
        mfcca = m2;
        /////////c//////////////////////////////////////////////////////////////////////////
        m0    = mfccb * c1o2 + mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (vy2 - vvy) * c1o2;
        m1    = -mfccb - c2o1 * mfcbb * vvy + mfcab * (c1o1 - vy2) - c2o9 * oMdrho * vy2;
        m2    = mfccb * c1o2 + mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (vy2 + vvy) * c1o2;
        mfcab = m0;
        mfcbb = m1;
        mfccb = m2;
        /////////c//////////////////////////////////////////////////////////////////////////
        m0    = mfccc * c1o2 + mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (vy2 - vvy) * c1o2;
        m1    = -mfccc - c2o1 * mfcbc * vvy + mfcac * (c1o1 - vy2) - c1o18 * oMdrho * vy2;
        m2    = mfccc * c1o2 + mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (vy2 + vvy) * c1o2;
        mfcac = m0;
        mfcbc = m1;
        mfccc = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        // mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
        ////////////////////////////////////////////////////////////////////////////////////
        // X - Dir
        m0    = mfcaa * c1o2 + mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfcaa - c2o1 * mfbaa * vvx + mfaaa * (c1o1 - vx2) - c1o36 * oMdrho * vx2;
        m2    = mfcaa * c1o2 + mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (vx2 + vvx) * c1o2;
        mfaaa = m0;
        mfbaa = m1;
        mfcaa = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfcba * c1o2 + mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfcba - c2o1 * mfbba * vvx + mfaba * (c1o1 - vx2) - c1o9 * oMdrho * vx2;
        m2    = mfcba * c1o2 + mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (vx2 + vvx) * c1o2;
        mfaba = m0;
        mfbba = m1;
        mfcba = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfcca * c1o2 + mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfcca - c2o1 * mfbca * vvx + mfaca * (c1o1 - vx2) - c1o36 * oMdrho * vx2;
        m2    = mfcca * c1o2 + mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (vx2 + vvx) * c1o2;
        mfaca = m0;
        mfbca = m1;
        mfcca = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfcab * c1o2 + mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfcab - c2o1 * mfbab * vvx + mfaab * (c1o1 - vx2) - c1o9 * oMdrho * vx2;
        m2    = mfcab * c1o2 + mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (vx2 + vvx) * c1o2;
        mfaab = m0;
        mfbab = m1;
        mfcab = m2;
        ///////////b////////////////////////////////////////////////////////////////////////
        m0    = mfcbb * c1o2 + mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfcbb - c2o1 * mfbbb * vvx + mfabb * (c1o1 - vx2) - c4o9 * oMdrho * vx2;
        m2    = mfcbb * c1o2 + mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (vx2 + vvx) * c1o2;
        mfabb = m0;
        mfbbb = m1;
        mfcbb = m2;
        ///////////b////////////////////////////////////////////////////////////////////////
        m0    = mfccb * c1o2 + mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfccb - c2o1 * mfbcb * vvx + mfacb * (c1o1 - vx2) - c1o9 * oMdrho * vx2;
        m2    = mfccb * c1o2 + mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (vx2 + vvx) * c1o2;
        mfacb = m0;
        mfbcb = m1;
        mfccb = m2;
        ////////////////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////
        m0    = mfcac * c1o2 + mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfcac - c2o1 * mfbac * vvx + mfaac * (c1o1 - vx2) - c1o36 * oMdrho * vx2;
        m2    = mfcac * c1o2 + mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (vx2 + vvx) * c1o2;
        mfaac = m0;
        mfbac = m1;
        mfcac = m2;
        ///////////c////////////////////////////////////////////////////////////////////////
        m0    = mfcbc * c1o2 + mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfcbc - c2o1 * mfbbc * vvx + mfabc * (c1o1 - vx2) - c1o9 * oMdrho * vx2;
        m2    = mfcbc * c1o2 + mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (vx2 + vvx) * c1o2;
        mfabc = m0;
        mfbbc = m1;
        mfcbc = m2;
        ///////////c////////////////////////////////////////////////////////////////////////
        m0    = mfccc * c1o2 + mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (vx2 - vvx) * c1o2;
        m1    = -mfccc - c2o1 * mfbcc * vvx + mfacc * (c1o1 - vx2) - c1o36 * oMdrho * vx2;
        m2    = mfccc * c1o2 + mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (vx2 + vvx) * c1o2;
        mfacc = m0;
        mfbcc = m1;
        mfccc = m2;
        ////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////
        // index 0
        kzero = posC[k];
        kw    = neighborCX[kzero];
        ks    = neighborCY[kzero];
        kb    = neighborCZ[kzero];
        ksw   = neighborCY[kw];
        kbw   = neighborCZ[kw];
        kbs   = neighborCZ[ks];
        kbsw  = neighborCZ[ksw];
        ////////////////////////////////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////////////////////////////////
        feC[kzero]    = mfcbb;
        fwC[kw]       = mfabb;
        fnC[kzero]    = mfbcb;
        fsC[ks]       = mfbab;
        ftC[kzero]    = mfbbc;
        fbC[kb]       = mfbba;
        fneC[kzero]   = mfccb;
        fswC[ksw]     = mfaab;
        fseC[ks]      = mfcab;
        fnwC[kw]      = mfacb;
        fteC[kzero]   = mfcbc;
        fbwC[kbw]     = mfaba;
        fbeC[kb]      = mfcba;
        ftwC[kw]      = mfabc;
        ftnC[kzero]   = mfbcc;
        fbsC[kbs]     = mfbaa;
        fbnC[kb]      = mfbca;
        ftsC[ks]      = mfbac;
        fzeroC[kzero] = mfbbb;
        ftneC[kzero]  = mfccc;
        ftseC[ks]     = mfcac;
        fbneC[kb]     = mfcca;
        fbseC[kbs]    = mfcaa;
        ftnwC[kw]     = mfacc;
        ftswC[ksw]    = mfaac;
        fbnwC[kbw]    = mfaca;
        fbswC[kbsw]   = mfaaa;
        ////////////////////////////////////////////////////////////////////////////////////
    }
}

__global__ void scaleFC_RhoSq_comp_27(real* DC, 
												 real* DF, 
												 unsigned int* neighborCX,
												 unsigned int* neighborCY,
												 unsigned int* neighborCZ,
												 unsigned int* neighborFX,
												 unsigned int* neighborFY,
												 unsigned int* neighborFZ,
												 unsigned int size_MatC, 
												 unsigned int size_MatF, 
												 bool isEvenTimestep,
												 unsigned int* posC, 
												 unsigned int* posFSWB, 
												 unsigned int kFC, 
												 real omCoarse, 
												 real omFine, 
												 real nu, 
												 unsigned int nxC, 
												 unsigned int nyC, 
												 unsigned int nxF, 
												 unsigned int nyF,
												 OffFC offFC)
{
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   scaleFC_RhoSq_comp_27_Calculation(DC, DF, neighborCX, neighborCY, neighborCZ, neighborFX, neighborFY, neighborFZ,
                                     size_MatC, size_MatF, isEvenTimestep, posC, posFSWB, kFC, omCoarse, omFine, nu, nxC,
                                     nyC, nxF, nyF, offFC, k);
}






















































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC_staggered_time_comp_27(   real* DC, 
															 real* DF, 
															 unsigned int* neighborCX,
															 unsigned int* neighborCY,
															 unsigned int* neighborCZ,
															 unsigned int* neighborFX,
															 unsigned int* neighborFY,
															 unsigned int* neighborFZ,
															 unsigned int size_MatC, 
															 unsigned int size_MatF, 
															 bool isEvenTimestep,
															 unsigned int* posC, 
															 unsigned int* posFSWB, 
															 unsigned int kFC, 
															 real omCoarse, 
															 real omFine, 
															 real nu, 
															 unsigned int nxC, 
															 unsigned int nyC, 
															 unsigned int nxF, 
															 unsigned int nyF,
															 OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   //real op = one;
   //real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   real        press;//,drho,vx1,vx2,vx3;
   real        /*press_SWT,*/drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        /*press_NWT,*/drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        /*press_NET,*/drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        /*press_SET,*/drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        /*press_SWB,*/drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        /*press_NWB,*/drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        /*press_NEB,*/drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        /*press_SEB,*/drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   //real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;
   real        d0, dx, dy, dz, dxy, dxz, dyz/*, dxyz*/;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWB);
	  vx2_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWB);
	  vx3_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWB);

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx2_SWB)));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SWB) - ((vx2_SWB*vx3_SWB)));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx3_SWB)));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB)));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB)));

	  
      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWT);
	  vx2_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWT);
	  vx3_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWT);

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx2_SWT)));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SWT) - ((vx2_SWT*vx3_SWT)));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx3_SWT)));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT)));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT)));

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SET);
	  vx2_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SET);
	  vx3_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SET);

      kxyFromfcNEQ_SET    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SET) - ((vx1_SET*vx2_SET)));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SET) - ((vx2_SET*vx3_SET)));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SET) - ((vx1_SET*vx3_SET)));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET-vx2_SET*vx2_SET)));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET-vx3_SET*vx3_SET)));

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SEB);
	  vx2_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SEB);
	  vx3_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SEB);

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx2_SEB)));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_SEB) - ((vx2_SEB*vx3_SEB)));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx3_SEB)));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB)));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB)));

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWB);
	  vx2_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWB);
	  vx3_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWB);

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx2_NWB)));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NWB) - ((vx2_NWB*vx3_NWB)));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx3_NWB)));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB)));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB)));

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWT);
	  vx2_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWT);
	  vx3_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWT);

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx2_NWT)));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NWT) - ((vx2_NWT*vx3_NWT)));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx3_NWT)));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT)));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT)));

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NET);
	  vx2_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NET);
	  vx3_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NET);

      kxyFromfcNEQ_NET    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NET) - ((vx1_NET*vx2_NET)));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NET) - ((vx2_NET*vx3_NET)));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NET) - ((vx1_NET*vx3_NET)));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET-vx2_NET*vx2_NET)));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET-vx3_NET*vx3_NET)));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NEB);
	  vx2_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NEB);
	  vx3_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NEB);

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx2_NEB)));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (c1o1 + drho_NEB) - ((vx2_NEB*vx3_NEB)));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx3_NEB)));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB)));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB)));

   //   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////pointertausch
	  // if (isEvenTimestep==false)
	  // {
		 // feC    = &DC[DIR_P00   *size_MatC];
		 // fwC    = &DC[DIR_M00   *size_MatC];
		 // fnC    = &DC[DIR_0P0   *size_MatC];
		 // fsC    = &DC[DIR_0M0   *size_MatC];
		 // ftC    = &DC[DIR_00P   *size_MatC];
		 // fbC    = &DC[DIR_00M   *size_MatC];
		 // fneC   = &DC[DIR_PP0  *size_MatC];
		 // fswC   = &DC[DIR_MM0  *size_MatC];
		 // fseC   = &DC[DIR_PM0  *size_MatC];
		 // fnwC   = &DC[DIR_MP0  *size_MatC];
		 // fteC   = &DC[DIR_P0P  *size_MatC];
		 // fbwC   = &DC[DIR_M0M  *size_MatC];
		 // fbeC   = &DC[DIR_P0M  *size_MatC];
		 // ftwC   = &DC[DIR_M0P  *size_MatC];
		 // ftnC   = &DC[DIR_0PP  *size_MatC];
		 // fbsC   = &DC[DIR_0MM  *size_MatC];
		 // fbnC   = &DC[DIR_0PM  *size_MatC];
		 // ftsC   = &DC[DIR_0MP  *size_MatC];
		 // fzeroC = &DC[DIR_000*size_MatC];
		 // ftneC  = &DC[DIR_PPP *size_MatC];
		 // ftswC  = &DC[DIR_MMP *size_MatC];
		 // ftseC  = &DC[DIR_PMP *size_MatC];
		 // ftnwC  = &DC[DIR_MPP *size_MatC];
		 // fbneC  = &DC[DIR_PPM *size_MatC];
		 // fbswC  = &DC[DIR_MMM *size_MatC];
		 // fbseC  = &DC[DIR_PMM *size_MatC];
		 // fbnwC  = &DC[DIR_MPM *size_MatC];
	  // } 
	  // else
	  // {
		 // fwC    = &DC[DIR_P00   *size_MatC];
		 // feC    = &DC[DIR_M00   *size_MatC];
		 // fsC    = &DC[DIR_0P0   *size_MatC];
		 // fnC    = &DC[DIR_0M0   *size_MatC];
		 // fbC    = &DC[DIR_00P   *size_MatC];
		 // ftC    = &DC[DIR_00M   *size_MatC];
		 // fswC   = &DC[DIR_PP0  *size_MatC];
		 // fneC   = &DC[DIR_MM0  *size_MatC];
		 // fnwC   = &DC[DIR_PM0  *size_MatC];
		 // fseC   = &DC[DIR_MP0  *size_MatC];
		 // fbwC   = &DC[DIR_P0P  *size_MatC];
		 // fteC   = &DC[DIR_M0M  *size_MatC];
		 // ftwC   = &DC[DIR_P0M  *size_MatC];
		 // fbeC   = &DC[DIR_M0P  *size_MatC];
		 // fbsC   = &DC[DIR_0PP  *size_MatC];
		 // ftnC   = &DC[DIR_0MM  *size_MatC];
		 // ftsC   = &DC[DIR_0PM  *size_MatC];
		 // fbnC   = &DC[DIR_0MP  *size_MatC];
		 // fzeroC = &DC[DIR_000*size_MatC];
		 // fbswC  = &DC[DIR_PPP *size_MatC];
		 // fbneC  = &DC[DIR_MMP *size_MatC];
		 // fbnwC  = &DC[DIR_PMP *size_MatC];
		 // fbseC  = &DC[DIR_MPP *size_MatC];
		 // ftswC  = &DC[DIR_PPM *size_MatC];
		 // ftneC  = &DC[DIR_MMM *size_MatC];
		 // ftnwC  = &DC[DIR_PMM *size_MatC];
		 // ftseC  = &DC[DIR_MPM *size_MatC];
	  // }

 	 // real rho_tmp;
	  //real vx1_tmp;
	  //real vx2_tmp;
	  //real vx3_tmp;

   //  //////////////////////////////////////////////////////////////////////////
   //   xoff = offFC.xOffFC[k];
   //   yoff = offFC.yOffFC[k];
   //   zoff = offFC.zOffFC[k];      
   //   xoff_sq = xoff * xoff;
   //   yoff_sq = yoff * yoff;
   //   zoff_sq = zoff * zoff;
   //   //////////////////////////////////////////////////////////////////////////
   //   //SWB//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 0
   //   k0zero= posFSWB[k];
   //   k0w   = neighborFX[k0zero];
   //   k0s   = neighborFY[k0zero];
   //   k0b   = neighborFZ[k0zero];
   //   k0sw  = neighborFY[k0w];
   //   k0bw  = neighborFZ[k0w];
   //   k0bs  = neighborFZ[k0s];
   //   k0bsw = neighborFZ[k0sw];
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kzero= k0zero;
   //   kw   = k0w;   
   //   ks   = k0s;   
   //   kb   = k0b;   
   //   ksw  = k0sw;  
   //   kbw  = k0bw;  
   //   kbs  = k0bs;  
   //   kbsw = k0bsw; 
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_SWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_SWB);
	  ////vx2_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_SWB);
	  ////vx3_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_SWB);

   //   //kxyFromfcNEQ_SWB    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SWB) - ((vx1_SWB*vx2_SWB)));
   //   //kyzFromfcNEQ_SWB    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SWB) - ((vx2_SWB*vx3_SWB)));
   //   //kxzFromfcNEQ_SWB    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SWB) - ((vx1_SWB*vx3_SWB)));
   //   //kxxMyyFromfcNEQ_SWB = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SWB) - ((vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB)));
   //   //kxxMzzFromfcNEQ_SWB = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SWB) - ((vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_SWB += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_SWB  += vx1_tmp;
	  //vx2_SWB  += vx2_tmp;
	  //vx3_SWB  += vx3_tmp;

   //   drho_SWB *= c1o2;
   //   vx1_SWB  *= c1o2;
	  //vx2_SWB  *= c1o2;
	  //vx3_SWB  *= c1o2;

   //   kxyFromfcNEQ_SWB    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_SWB    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_SWB    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_SWB += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_SWB += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_SWB    *= c1o2;
	  //kyzFromfcNEQ_SWB    *= c1o2;
	  //kxzFromfcNEQ_SWB    *= c1o2;
	  //kxxMyyFromfcNEQ_SWB *= c1o2;
	  //kxxMzzFromfcNEQ_SWB *= c1o2;

   //   //////////////////////////////////////////////////////////////////////////
   //   //SWT//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kzero= kb;
   //   kw   = kbw;   
   //   ks   = kbs;   
   //   kb   = neighborFZ[kb];   
   //   ksw  = kbsw;  
   //   kbw  = neighborFZ[kbw];  
   //   kbs  = neighborFZ[kbs];  
   //   kbsw = neighborFZ[kbsw]; 
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_SWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_SWT);
	  ////vx2_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_SWT);
	  ////vx3_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_SWT);

   //   //kxyFromfcNEQ_SWT    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SWT) - ((vx1_SWT*vx2_SWT)));
   //   //kyzFromfcNEQ_SWT    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SWT) - ((vx2_SWT*vx3_SWT)));
   //   //kxzFromfcNEQ_SWT    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SWT) - ((vx1_SWT*vx3_SWT)));
   //   //kxxMyyFromfcNEQ_SWT = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SWT) - ((vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT)));
   //   //kxxMzzFromfcNEQ_SWT = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SWT) - ((vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_SWT += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_SWT  += vx1_tmp;
	  //vx2_SWT  += vx2_tmp;
	  //vx3_SWT  += vx3_tmp;

   //   drho_SWT *= c1o2;
   //   vx1_SWT  *= c1o2;
	  //vx2_SWT  *= c1o2;
	  //vx3_SWT  *= c1o2;

   //   kxyFromfcNEQ_SWT    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_SWT    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_SWT    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_SWT += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_SWT += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_SWT    *= c1o2;
	  //kyzFromfcNEQ_SWT    *= c1o2;
	  //kxzFromfcNEQ_SWT    *= c1o2;
	  //kxxMyyFromfcNEQ_SWT *= c1o2;
	  //kxxMzzFromfcNEQ_SWT *= c1o2;

   //   //////////////////////////////////////////////////////////////////////////
   //   //SET//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kzero= kw;
   //   kw   = neighborFX[kw];   
   //   ks   = ksw;   
   //   kb   = kbw;   
   //   ksw  = neighborFX[ksw];  
   //   kbw  = neighborFX[kbw];  
   //   kbs  = kbsw;  
   //   kbsw = neighborFX[kbsw]; 
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_SET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_SET);
	  ////vx2_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_SET);
	  ////vx3_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_SET);

   //   //kxyFromfcNEQ_SET    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SET) - ((vx1_SET*vx2_SET)));
   //   //kyzFromfcNEQ_SET    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SET) - ((vx2_SET*vx3_SET)));
   //   //kxzFromfcNEQ_SET    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SET) - ((vx1_SET*vx3_SET)));
   //   //kxxMyyFromfcNEQ_SET = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SET) - ((vx1_SET*vx1_SET-vx2_SET*vx2_SET)));
   //   //kxxMzzFromfcNEQ_SET = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SET) - ((vx1_SET*vx1_SET-vx3_SET*vx3_SET)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_SET += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_SET  += vx1_tmp;
	  //vx2_SET  += vx2_tmp;
	  //vx3_SET  += vx3_tmp;

   //   drho_SET *= c1o2;
   //   vx1_SET  *= c1o2;
	  //vx2_SET  *= c1o2;
	  //vx3_SET  *= c1o2;

   //   kxyFromfcNEQ_SET    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_SET    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_SET    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_SET += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_SET += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_SET    *= c1o2;
	  //kyzFromfcNEQ_SET    *= c1o2;
	  //kxzFromfcNEQ_SET    *= c1o2;
	  //kxxMyyFromfcNEQ_SET *= c1o2;
	  //kxxMzzFromfcNEQ_SET *= c1o2;

   //   //////////////////////////////////////////////////////////////////////////
   //   //SEB//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kb   = kzero;   
   //   kbw  = kw;  
   //   kbs  = ks;  
   //   kbsw = ksw; 
   //   kzero= k0w;
   //   kw   = neighborFX[k0w];   
   //   ks   = k0sw;   
   //   ksw  = neighborFX[k0sw];  
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_SEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_SEB);
	  ////vx2_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_SEB);
	  ////vx3_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_SEB);

   //   //kxyFromfcNEQ_SEB    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SEB) - ((vx1_SEB*vx2_SEB)));
   //   //kyzFromfcNEQ_SEB    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SEB) - ((vx2_SEB*vx3_SEB)));
   //   //kxzFromfcNEQ_SEB    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SEB) - ((vx1_SEB*vx3_SEB)));
   //   //kxxMyyFromfcNEQ_SEB = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SEB) - ((vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB)));
   //   //kxxMzzFromfcNEQ_SEB = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SEB) - ((vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_SEB += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_SEB  += vx1_tmp;
	  //vx2_SEB  += vx2_tmp;
	  //vx3_SEB  += vx3_tmp;

   //   drho_SEB *= c1o2;
   //   vx1_SEB  *= c1o2;
	  //vx2_SEB  *= c1o2;
	  //vx3_SEB  *= c1o2;

   //   kxyFromfcNEQ_SEB    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_SEB    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_SEB    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_SEB += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_SEB += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_SEB    *= c1o2;
	  //kyzFromfcNEQ_SEB    *= c1o2;
	  //kxzFromfcNEQ_SEB    *= c1o2;
	  //kxxMyyFromfcNEQ_SEB *= c1o2;
	  //kxxMzzFromfcNEQ_SEB *= c1o2;

   //   //////////////////////////////////////////////////////////////////////////
   //   //NWB//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 0
   //   k0zero= k0s;
   //   k0w   = k0sw;
   //   k0s   = neighborFY[k0s];
   //   k0b   = k0bs;
   //   k0sw  = neighborFY[k0sw];
   //   k0bw  = k0bsw;
   //   k0bs  = neighborFY[k0bs];
   //   k0bsw = neighborFY[k0bsw];
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kzero= k0zero;
   //   kw   = k0w;   
   //   ks   = k0s;   
   //   kb   = k0b;   
   //   ksw  = k0sw;  
   //   kbw  = k0bw;  
   //   kbs  = k0bs;  
   //   kbsw = k0bsw; 
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_NWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_NWB);
	  ////vx2_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_NWB);
	  ////vx3_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_NWB);

   //   //kxyFromfcNEQ_NWB    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NWB) - ((vx1_NWB*vx2_NWB)));
   //   //kyzFromfcNEQ_NWB    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NWB) - ((vx2_NWB*vx3_NWB)));
   //   //kxzFromfcNEQ_NWB    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NWB) - ((vx1_NWB*vx3_NWB)));
   //   //kxxMyyFromfcNEQ_NWB = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NWB) - ((vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB)));
   //   //kxxMzzFromfcNEQ_NWB = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NWB) - ((vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_NWB += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_NWB  += vx1_tmp;
	  //vx2_NWB  += vx2_tmp;
	  //vx3_NWB  += vx3_tmp;

   //   drho_NWB *= c1o2;
   //   vx1_NWB  *= c1o2;
	  //vx2_NWB  *= c1o2;
	  //vx3_NWB  *= c1o2;

   //   kxyFromfcNEQ_NWB    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_NWB    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_NWB    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_NWB += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_NWB += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_NWB    *= c1o2;
	  //kyzFromfcNEQ_NWB    *= c1o2;
	  //kxzFromfcNEQ_NWB    *= c1o2;
	  //kxxMyyFromfcNEQ_NWB *= c1o2;
	  //kxxMzzFromfcNEQ_NWB *= c1o2;

   //   //////////////////////////////////////////////////////////////////////////
   //   //NWT//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kzero= kb;
   //   kw   = kbw;   
   //   ks   = kbs;   
   //   kb   = neighborFZ[kb];   
   //   ksw  = kbsw;  
   //   kbw  = neighborFZ[kbw];  
   //   kbs  = neighborFZ[kbs];  
   //   kbsw = neighborFZ[kbsw]; 
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_NWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_NWT);
	  ////vx2_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_NWT);
	  ////vx3_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_NWT);

   //   //kxyFromfcNEQ_NWT    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NWT) - ((vx1_NWT*vx2_NWT)));
   //   //kyzFromfcNEQ_NWT    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NWT) - ((vx2_NWT*vx3_NWT)));
   //   //kxzFromfcNEQ_NWT    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NWT) - ((vx1_NWT*vx3_NWT)));
   //   //kxxMyyFromfcNEQ_NWT = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NWT) - ((vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT)));
   //   //kxxMzzFromfcNEQ_NWT = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NWT) - ((vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_NWT += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_NWT  += vx1_tmp;
	  //vx2_NWT  += vx2_tmp;
	  //vx3_NWT  += vx3_tmp;

   //   drho_NWT *= c1o2;
   //   vx1_NWT  *= c1o2;
	  //vx2_NWT  *= c1o2;
	  //vx3_NWT  *= c1o2;

   //   kxyFromfcNEQ_NWT    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_NWT    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_NWT    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_NWT += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_NWT += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_NWT    *= c1o2;
	  //kyzFromfcNEQ_NWT    *= c1o2;
	  //kxzFromfcNEQ_NWT    *= c1o2;
	  //kxxMyyFromfcNEQ_NWT *= c1o2;
	  //kxxMzzFromfcNEQ_NWT *= c1o2;

   //   //////////////////////////////////////////////////////////////////////////
   //   //NET//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kzero= kw;
   //   kw   = neighborFX[kw];   
   //   ks   = ksw;   
   //   kb   = kbw;   
   //   ksw  = neighborFX[ksw];  
   //   kbw  = neighborFX[kbw];  
   //   kbs  = kbsw;  
   //   kbsw = neighborFX[kbsw]; 
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_NET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_NET);
	  ////vx2_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_NET);
	  ////vx3_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_NET);

   //   //kxyFromfcNEQ_NET    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NET) - ((vx1_NET*vx2_NET)));
   //   //kyzFromfcNEQ_NET    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NET) - ((vx2_NET*vx3_NET)));
   //   //kxzFromfcNEQ_NET    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NET) - ((vx1_NET*vx3_NET)));
   //   //kxxMyyFromfcNEQ_NET = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NET) - ((vx1_NET*vx1_NET-vx2_NET*vx2_NET)));
   //   //kxxMzzFromfcNEQ_NET = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NET) - ((vx1_NET*vx1_NET-vx3_NET*vx3_NET)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_NET += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_NET  += vx1_tmp;
	  //vx2_NET  += vx2_tmp;
	  //vx3_NET  += vx3_tmp;

   //   drho_NET *= c1o2;
   //   vx1_NET  *= c1o2;
	  //vx2_NET  *= c1o2;
	  //vx3_NET  *= c1o2;

   //   kxyFromfcNEQ_NET    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_NET    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_NET    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_NET += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_NET += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_NET    *= c1o2;
	  //kyzFromfcNEQ_NET    *= c1o2;
	  //kxzFromfcNEQ_NET    *= c1o2;
	  //kxxMyyFromfcNEQ_NET *= c1o2;
	  //kxxMzzFromfcNEQ_NET *= c1o2;

   //   //////////////////////////////////////////////////////////////////////////
   //   //NEB//
   //   //////////////////////////////////////////////////////////////////////////
   //   //index 
   //   kb   = kzero;   
   //   kbw  = kw;  
   //   kbs  = ks;  
   //   kbsw = ksw; 
   //   kzero= k0w;
   //   kw   = neighborFX[k0w];   
   //   ks   = k0sw;   
   //   ksw  = neighborFX[k0sw];  
   //   ////////////////////////////////////////////////////////////////////////////////
   //   f_E    = fwF[kw];
   //   f_W    = feF[kzero];
   //   f_N    = fsF[ks];
   //   f_S    = fnF[kzero];
   //   f_T    = fbF[kb];
   //   f_B    = ftF[kzero];
   //   f_NE   = fswF[ksw];
   //   f_SW   = fneF[kzero];
   //   f_SE   = fnwF[kw];
   //   f_NW   = fseF[ks];
   //   f_TE   = fbwF[kbw];
   //   f_BW   = fteF[kzero];
   //   f_BE   = ftwF[kw];
   //   f_TW   = fbeF[kb];
   //   f_TN   = fbsF[kbs];
   //   f_BS   = ftnF[kzero];
   //   f_BN   = ftsF[ks];
   //   f_TS   = fbnF[kb];
   //   f_ZERO = fzeroF[kzero];
   //   f_TNE  = fbswF[kbsw];
   //   f_TSW  = fbneF[kb];
   //   f_TSE  = fbnwF[kbw];
   //   f_TNW  = fbseF[kbs];
   //   f_BNE  = ftswF[ksw];
   //   f_BSW  = ftneF[kzero];
   //   f_BSE  = ftnwF[kw];
   //   f_BNW  = ftseF[ks];

   //   //drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
   //   //vx1_NEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + drho_NEB);
	  ////vx2_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + drho_NEB);
	  ////vx3_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + drho_NEB);

   //   //kxyFromfcNEQ_NEB    = -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NEB) - ((vx1_NEB*vx2_NEB)));
   //   //kyzFromfcNEQ_NEB    = -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NEB) - ((vx2_NEB*vx3_NEB)));
   //   //kxzFromfcNEQ_NEB    = -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NEB) - ((vx1_NEB*vx3_NEB)));
   //   //kxxMyyFromfcNEQ_NEB = -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NEB) - ((vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB)));
   //   //kxxMzzFromfcNEQ_NEB = -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NEB) - ((vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB)));

	  //rho_tmp = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //
	  //drho_NEB += rho_tmp;

	  //vx1_tmp  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(one + rho_tmp);
	  //vx2_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(one + rho_tmp);
	  //vx3_tmp  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(one + rho_tmp);

   //   vx1_NEB  += vx1_tmp;
	  //vx2_NEB  += vx2_tmp;
	  //vx3_NEB  += vx3_tmp;

   //   drho_NEB *= c1o2;
   //   vx1_NEB  *= c1o2;
	  //vx2_NEB  *= c1o2;
	  //vx3_NEB  *= c1o2;

   //   kxyFromfcNEQ_NEB    += -three*omegaS/(one-omegaS)*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx2_tmp)));
   //   kyzFromfcNEQ_NEB    += -three*omegaS/(one-omegaS)*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + rho_tmp) - ((vx2_tmp*vx3_tmp)));
   //   kxzFromfcNEQ_NEB    += -three*omegaS/(one-omegaS)*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + rho_tmp) - ((vx1_tmp*vx3_tmp)));
   //   kxxMyyFromfcNEQ_NEB += -c3o2*omegaS/(one-omegaS) *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx2_tmp*vx2_tmp)));
   //   kxxMzzFromfcNEQ_NEB += -c3o2*omegaS/(one-omegaS) *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + rho_tmp) - ((vx1_tmp*vx1_tmp-vx3_tmp*vx3_tmp)));

	  //kxyFromfcNEQ_NEB    *= c1o2;
	  //kyzFromfcNEQ_NEB    *= c1o2;
	  //kxzFromfcNEQ_NEB    *= c1o2;
	  //kxxMyyFromfcNEQ_NEB *= c1o2;
	  //kxxMzzFromfcNEQ_NEB *= c1o2;
	  //
	  //
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //kxyFromfcNEQ_SWB    = zero;
	  //kyzFromfcNEQ_SWB    = zero;
	  //kxzFromfcNEQ_SWB    = zero;
	  //kxxMyyFromfcNEQ_SWB = zero;
	  //kxxMzzFromfcNEQ_SWB = zero;
	  //kxyFromfcNEQ_SWT    = zero;
	  //kyzFromfcNEQ_SWT    = zero;
	  //kxzFromfcNEQ_SWT    = zero;
	  //kxxMyyFromfcNEQ_SWT = zero;
	  //kxxMzzFromfcNEQ_SWT = zero;
	  //kxyFromfcNEQ_SET    = zero;
	  //kyzFromfcNEQ_SET    = zero;
	  //kxzFromfcNEQ_SET    = zero;
	  //kxxMyyFromfcNEQ_SET = zero;
	  //kxxMzzFromfcNEQ_SET = zero;
	  //kxyFromfcNEQ_SEB    = zero;
	  //kyzFromfcNEQ_SEB    = zero;
	  //kxzFromfcNEQ_SEB    = zero;
	  //kxxMyyFromfcNEQ_SEB = zero;
	  //kxxMzzFromfcNEQ_SEB = zero;
	  //kxyFromfcNEQ_NWB    = zero;
	  //kyzFromfcNEQ_NWB    = zero;
	  //kxzFromfcNEQ_NWB    = zero;
	  //kxxMyyFromfcNEQ_NWB = zero;
	  //kxxMzzFromfcNEQ_NWB = zero;
	  //kxyFromfcNEQ_NWT    = zero;
	  //kyzFromfcNEQ_NWT    = zero;
	  //kxzFromfcNEQ_NWT    = zero;
	  //kxxMyyFromfcNEQ_NWT = zero;
	  //kxxMzzFromfcNEQ_NWT = zero;
	  //kxyFromfcNEQ_NET    = zero;
	  //kyzFromfcNEQ_NET    = zero;
	  //kxzFromfcNEQ_NET    = zero;
	  //kxxMyyFromfcNEQ_NET = zero;
	  //kxxMzzFromfcNEQ_NET = zero;
	  //kxyFromfcNEQ_NEB    = zero;
	  //kyzFromfcNEQ_NEB    = zero;
	  //kxzFromfcNEQ_NEB    = zero;
	  //kxxMyyFromfcNEQ_NEB = zero;
	  //kxxMzzFromfcNEQ_NEB = zero;
      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
      a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_NWT + 
			 c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_NWT + 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_SWT + 
			 c8o1*vx1_NEB + c8o1*vx1_NET + c8o1*vx1_NWB + c8o1*vx1_NWT + c8o1*vx1_SEB + 
			 c8o1*vx1_SET + c8o1*vx1_SWB + c8o1*vx1_SWT + c2o1*vx2_NEB + c2o1*vx2_NET - 
			 c2o1*vx2_NWB - c2o1*vx2_NWT - c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + 
			 c2o1*vx2_SWT - c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      b0 = (c2o1*kxxMyyFromfcNEQ_NEB + c2o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_NWT - 
			 c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET + c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_NWT - 
			 c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT + 
			 c8o1*vx2_NEB + c8o1*vx2_NET + c8o1*vx2_NWB + c8o1*vx2_NWT + 
			 c8o1*vx2_SEB + c8o1*vx2_SET + c8o1*vx2_SWB + c8o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
			 c2o1*kxxMzzFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_NWT - 
			 c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_NWT - 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_SWT - 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT + 
			 c8o1*vx3_NEB + c8o1*vx3_NET + c8o1*vx3_NWB + c8o1*vx3_NWT + 
			 c8o1*vx3_SEB + c8o1*vx3_SET + c8o1*vx3_SWB + c8o1*vx3_SWT)/c64o1;
      ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + c2o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
			 kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx1_NEB - c2o1*vx1_NET + c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB + c2o1*vx1_SET - c2o1*vx1_SWB - c2o1*vx1_SWT)/c8o1;
      cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB - c2o1*vx1_NET - c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB - c2o1*vx1_SET - c2o1*vx1_SWB + c2o1*vx1_SWT)/c8o1;
      ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
			 kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB - c2o1*vx2_SWT)/c8o1;
      byy= (-c2o1*kxxMyyFromfcNEQ_NEB - c2o1*kxxMyyFromfcNEQ_NET - c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_NWT + 
			 c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB + c2o1*vx2_SWT)/c8o1;
      az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/c4o1;
      bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/c4o1;
      cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/c4o1;
      azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
			 c2o1*kxxMzzFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_NWT + 
			 c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT)/c16o1;
      axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/c2o1;
      bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/c2o1;
      cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/c2o1;
      axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real kxyAverage	 =(kxyFromfcNEQ_SWB+
							   kxyFromfcNEQ_SWT+
							   kxyFromfcNEQ_SET+
							   kxyFromfcNEQ_SEB+
							   kxyFromfcNEQ_NWB+
							   kxyFromfcNEQ_NWT+
							   kxyFromfcNEQ_NET+
							   kxyFromfcNEQ_NEB)*c1o8-(ay+bx);
	  real kyzAverage	 =(kyzFromfcNEQ_SWB+
							   kyzFromfcNEQ_SWT+
							   kyzFromfcNEQ_SET+
							   kyzFromfcNEQ_SEB+
							   kyzFromfcNEQ_NWB+
							   kyzFromfcNEQ_NWT+
							   kyzFromfcNEQ_NET+
							   kyzFromfcNEQ_NEB)*c1o8-(bz+cy);
	  real kxzAverage	 =(kxzFromfcNEQ_SWB+
							   kxzFromfcNEQ_SWT+
							   kxzFromfcNEQ_SET+
							   kxzFromfcNEQ_SEB+
							   kxzFromfcNEQ_NWB+
							   kxzFromfcNEQ_NWT+
							   kxzFromfcNEQ_NET+
							   kxzFromfcNEQ_NEB)*c1o8-(az+cx);
	  real kxxMyyAverage	 =(kxxMyyFromfcNEQ_SWB+
							   kxxMyyFromfcNEQ_SWT+
							   kxxMyyFromfcNEQ_SET+
							   kxxMyyFromfcNEQ_SEB+
							   kxxMyyFromfcNEQ_NWB+
							   kxxMyyFromfcNEQ_NWT+
							   kxxMyyFromfcNEQ_NET+
							   kxxMyyFromfcNEQ_NEB)*c1o8-(ax-by);
	  real kxxMzzAverage	 =(kxxMzzFromfcNEQ_SWB+
							   kxxMzzFromfcNEQ_SWT+
							   kxxMzzFromfcNEQ_SET+
							   kxxMzzFromfcNEQ_SEB+
							   kxxMzzFromfcNEQ_NWB+
							   kxxMzzFromfcNEQ_NWT+
							   kxxMzzFromfcNEQ_NET+
							   kxxMzzFromfcNEQ_NEB)*c1o8-(ax-cz);



	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////Press
	  //d0   = ( press_NEB + press_NET + press_NWB + press_NWT + press_SEB + press_SET + press_SWB + press_SWT) * c1o8;
	  //dx   = ( press_NEB + press_NET - press_NWB - press_NWT + press_SEB + press_SET - press_SWB - press_SWT) * c1o4;
	  //dy   = ( press_NEB + press_NET + press_NWB + press_NWT - press_SEB - press_SET - press_SWB - press_SWT) * c1o4;
	  //dz   = (-press_NEB + press_NET - press_NWB + press_NWT - press_SEB + press_SET - press_SWB + press_SWT) * c1o4;
	  //dxy  = ( press_NEB + press_NET - press_NWB - press_NWT - press_SEB - press_SET + press_SWB + press_SWT) * c1o2;
	  //dxz  = (-press_NEB + press_NET + press_NWB - press_NWT - press_SEB + press_SET + press_SWB - press_SWT) * c1o2;
	  //dyz  = (-press_NEB + press_NET - press_NWB + press_NWT + press_SEB - press_SET + press_SWB - press_SWT) * c1o2;
	  //dxyz =  -press_NEB + press_NET + press_NWB - press_NWT + press_SEB - press_SET - press_SWB + press_SWT;
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //drho
	  d0   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT + drho_SEB + drho_SET + drho_SWB + drho_SWT) * c1o8;
	  dx   = ( drho_NEB + drho_NET - drho_NWB - drho_NWT + drho_SEB + drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dy   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT - drho_SEB - drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dz   = (-drho_NEB + drho_NET - drho_NWB + drho_NWT - drho_SEB + drho_SET - drho_SWB + drho_SWT) * c1o4;
	  dxy  = ( drho_NEB + drho_NET - drho_NWB - drho_NWT - drho_SEB - drho_SET + drho_SWB + drho_SWT) * c1o2;
	  dxz  = (-drho_NEB + drho_NET + drho_NWB - drho_NWT - drho_SEB + drho_SET + drho_SWB - drho_SWT) * c1o2;
	  dyz  = (-drho_NEB + drho_NET - drho_NWB + drho_NWT + drho_SEB - drho_SET + drho_SWB - drho_SWT) * c1o2;
	  //dxyz =  -drho_NEB + drho_NET + drho_NWB - drho_NWT + drho_SEB - drho_SET - drho_SWB + drho_SWT;
	  //d0   = zero;
	  //dx   = zero;
	  //dy   = zero;
	  //dz   = zero;
	  //dxy  = zero;
	  //dxz  = zero;
	  //dyz  = zero;
	  //dxyz = zero;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot 
	  //
      //
	  // x------x
	  // |      |
	  // |	 ---+--->X
	  // |		|  \
	  // x------x   \
	  //			off-vector
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
	  d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff*yoff*dxy + xoff*zoff*dxz + yoff*zoff*dyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //  FIX  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //AAAAAAAAAAAAHHHHHHHHHHHH!!!!! Mieser Test!!!
	  //b0= bx= by= bz= bxx= byy= bzz= bxy= bxz= byz= c0= cx= cy= cz= cxx= cyy= czz= cxy= cxz= cyz= axyz= bxyz= cxyz=zero;
	  //b0=zero;
	  //bx=zero;
	  //by=zero;
	  //bz=zero;
	  //bxx=zero;
	  //byy=zero;
	  //bzz=zero;
	  //bxy=zero;
	  //bxz=zero;
	  //byz=zero;
	  //c0=zero;
	  //cx=zero;
	  //cy=zero;
	  //cz=zero;
	  //cxx=zero;
	  //cyy=zero;
	  //czz=zero;
	  //cxy=zero;
	  //cxz=zero;
	  //cyz=zero;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	  
	  real mfcbb = c0o1;
	  real mfabb = c0o1;
	  real mfbcb = c0o1;
	  real mfbab = c0o1;
	  real mfbbc = c0o1;
	  real mfbba = c0o1;
	  real mfccb = c0o1;
	  real mfaab = c0o1;
	  real mfcab = c0o1;
	  real mfacb = c0o1;
	  real mfcbc = c0o1;
	  real mfaba = c0o1;
	  real mfcba = c0o1;
	  real mfabc = c0o1;
	  real mfbcc = c0o1;
	  real mfbaa = c0o1;
	  real mfbca = c0o1;
	  real mfbac = c0o1;
	  real mfbbb = c0o1;
	  real mfccc = c0o1;
	  real mfaac = c0o1;
	  real mfcac = c0o1;
	  real mfacc = c0o1;
	  real mfcca = c0o1;
	  real mfaaa = c0o1;
	  real mfcaa = c0o1;
	  real mfaca = c0o1;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
	  real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	  real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
	  real O3 = c2o1 - o;
	  real residu, residutmp;
	  residutmp = c0o1;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
	  real NeqOn = c1o1;//zero;//one;   //.... one = on ..... zero = off 
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //
	  //Position C 0., 0., 0.
	  //
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //x = 0.;
	  //y = 0.;
	  //z = 0.;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real mxoff = -xoff;
	  //real myoff = -yoff;
	  //real mzoff = -zoff;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //press = press_NET * (c1o8 - c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NWT * (c1o8 + c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SET * (c1o8 - c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SWT * (c1o8 + c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NEB * (c1o8 - c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_NWB * (c1o8 + c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SEB * (c1o8 - c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SWB * (c1o8 + c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff);
	  //drho  = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
	  press = d0;
	  vvx   = a0;
	  vvy   = b0;
	  vvz   = c0;

	  //mfaaa = drho;
	  //mfaaa = press + (ax+by+cz)/three;  //  1/3 = 2/3*(1/op-1/2)
	  mfaaa = press; // if drho is interpolated directly

	  vx2 = vvx*vvx;
	  vy2 = vvy*vvy;
	  vz2 = vvz*vvz;
	  oMdrho = c1o1;
	  //oMdrho = one - mfaaa;

	  //two
	  // linear combinations
	  mxxPyyPzz = mfaaa;
	  //mxxMyy    = -c2o3*(ax - by)*eps_new/o;
	  //mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

	  //mfabb     = -c1o3 * (bz + cy)*eps_new/o;
	  //mfbab     = -c1o3 * (az + cx)*eps_new/o;
	  //mfbba     = -c1o3 * (ay + bx)*eps_new/o;
	  mxxMyy    = -c2o3*((ax - by)+kxxMyyAverage)*eps_new/o*mfaaa;
	  mxxMzz    = -c2o3*((ax - cz)+kxxMzzAverage)*eps_new/o*mfaaa;

	  mfabb     = -c1o3 * ((bz + cy)+kyzAverage)*eps_new/o*mfaaa;
	  mfbab     = -c1o3 * ((az + cx)+kxzAverage)*eps_new/o*mfaaa;
	  mfbba     = -c1o3 * ((ay + bx)+kxyAverage)*eps_new/o*mfaaa;

	  
	  // linear combinations back
	  mfcaa = c1o3 * (       mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaca = c1o3 * (-c2o1 * mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaac = c1o3 * (       mxxMyy - c2o1 * mxxMzz + mxxPyyPzz) * NeqOn;

	  //3.
	  // linear combinations
	  residu = residutmp * (ayz + bxz + cxy );
	  mfbbb = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu))*mfaaa;

	  residu = residutmp * (axy + c2o1*bxx + c2o1*bzz + cyz );
	  //residu = -(c1o9*(axy - 2*bxx - 2*bzz + cyz ));
	  mxxyPyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu))*mfaaa;

	  residu = residutmp * (axy + c2o1*bxx - c2o1*bzz - cyz );
	  //residu = c1o9*(axy - 2*bxx + 2*bzz - cyz );
	  mxxyMyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu))*mfaaa;

	  residu = residutmp * (axz + byz + c2o1*cxx + c2o1*cyy );
	  //residu = -(c1o9*(axz + byz - 2*cxx - 2*cyy ));
	  mxxzPyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu))*mfaaa;

	  residu = residutmp * (axz - byz + c2o1*cxx - c2o1*cyy );
	  //residu = c1o9*(axz - byz - 2*cxx + 2*cyy );
	  mxxzMyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu))*mfaaa;

	  residu = residutmp * (c2o1*ayy + c2o1*azz + bxy + cxz );
	  //residu = c1o9*(2*ayy + 2*azz - bxy - cxz );
	  mxyyPxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu))*mfaaa;

	  residu = residutmp * (c2o1*ayy - c2o1*azz + bxy - cxz );
	  //residu = c1o9*(-2*ayy + 2*azz + bxy - cxz );
	  mxyyMxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu))*mfaaa;

	  // linear combinations back
	  mfcba = ( mxxyMyzz + mxxyPyzz) * c1o2;
	  mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
	  mfcab = ( mxxzMyyz + mxxzPyyz) * c1o2;
	  mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
	  mfbca = ( mxyyMxzz + mxyyPxzz) * c1o2;
	  mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

	  //4.
	  mfacc = mfaaa*c1o9; 
	  mfcac = mfacc; 
	  mfcca = mfacc; 
	  //5.

	  //6.
	  mfccc = mfaaa*c1o27;
	  ////////////////////////////////////////////////////////////////////////////////////
	  //back
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Z - Dir
	  m0 =  mfaac * c1o2 +      mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfaac        - c2o1 * mfaab *  vvz         +  mfaaa                * (c1o1 - vz2)              - c1o1 * oMdrho * vz2; 
	  m2 =  mfaac * c1o2 +      mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaaa = m0;
	  mfaab = m1;
	  mfaac = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfabc * c1o2 +      mfabb * (vvz - c1o2) + mfaba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfabc        - c2o1 * mfabb *  vvz         + mfaba * (c1o1 - vz2); 
	  m2 =  mfabc * c1o2 +      mfabb * (vvz + c1o2) + mfaba * (     vz2 + vvz) * c1o2;
	  mfaba = m0;
	  mfabb = m1;
	  mfabc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfacb *  vvz         +  mfaca                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfacc * c1o2 +      mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaca = m0;
	  mfacb = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbac * c1o2 +      mfbab * (vvz - c1o2) + mfbaa * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbac        - c2o1 * mfbab *  vvz         + mfbaa * (c1o1 - vz2); 
	  m2 =  mfbac * c1o2 +      mfbab * (vvz + c1o2) + mfbaa * (     vz2 + vvz) * c1o2;
	  mfbaa = m0;
	  mfbab = m1;
	  mfbac = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbbc * c1o2 +      mfbbb * (vvz - c1o2) + mfbba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbbc        - c2o1 * mfbbb *  vvz         + mfbba * (c1o1 - vz2); 
	  m2 =  mfbbc * c1o2 +      mfbbb * (vvz + c1o2) + mfbba * (     vz2 + vvz) * c1o2;
	  mfbba = m0;
	  mfbbb = m1;
	  mfbbc = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbcb * (vvz - c1o2) + mfbca * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbcb *  vvz         + mfbca * (c1o1 - vz2); 
	  m2 =  mfbcc * c1o2 +      mfbcb * (vvz + c1o2) + mfbca * (     vz2 + vvz) * c1o2;
	  mfbca = m0;
	  mfbcb = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfcab *  vvz         +  mfcaa                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfcac * c1o2 +      mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcaa = m0;
	  mfcab = m1;
	  mfcac = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfcbb * (vvz - c1o2) + mfcba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfcbb *  vvz         + mfcba * (c1o1 - vz2); 
	  m2 =  mfcbc * c1o2 +      mfcbb * (vvz + c1o2) + mfcba * (     vz2 + vvz) * c1o2;
	  mfcba = m0;
	  mfcbb = m1;
	  mfcbc = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfccb *  vvz         +  mfcca                  * (c1o1 - vz2)              - c1o9 * oMdrho * vz2; 
	  m2 =  mfccc * c1o2 +      mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcca = m0;
	  mfccb = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Y - Dir
	  m0 =  mfaca * c1o2 +      mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfaca        - c2o1 * mfaba *  vvy         +  mfaaa                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfaca * c1o2 +      mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaaa = m0;
	  mfaba = m1;
	  mfaca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacb * c1o2 +      mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacb        - c2o1 * mfabb *  vvy         +  mfaab                  * (c1o1 - vy2)              - c2o3 * oMdrho * vy2; 
	  m2 =  mfacb * c1o2 +      mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaab = m0;
	  mfabb = m1;
	  mfacb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfabc *  vvy         +  mfaac                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfacc * c1o2 +      mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaac = m0;
	  mfabc = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbca * c1o2 +      mfbba * (vvy - c1o2) + mfbaa * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbca        - c2o1 * mfbba *  vvy         + mfbaa * (c1o1 - vy2); 
	  m2 =  mfbca * c1o2 +      mfbba * (vvy + c1o2) + mfbaa * (     vy2 + vvy) * c1o2;
	  mfbaa = m0;
	  mfbba = m1;
	  mfbca = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcb * c1o2 +      mfbbb * (vvy - c1o2) + mfbab * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcb        - c2o1 * mfbbb *  vvy         + mfbab * (c1o1 - vy2); 
	  m2 =  mfbcb * c1o2 +      mfbbb * (vvy + c1o2) + mfbab * (     vy2 + vvy) * c1o2;
	  mfbab = m0;
	  mfbbb = m1;
	  mfbcb = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbbc * (vvy - c1o2) + mfbac * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbbc *  vvy         + mfbac * (c1o1 - vy2); 
	  m2 =  mfbcc * c1o2 +      mfbbc * (vvy + c1o2) + mfbac * (     vy2 + vvy) * c1o2;
	  mfbac = m0;
	  mfbbc = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfcba *  vvy         +  mfcaa                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfcca * c1o2 +      mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcaa = m0;
	  mfcba = m1;
	  mfcca = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfcbb *  vvy         +  mfcab                  * (c1o1 - vy2)              - c2o9 * oMdrho * vy2; 
	  m2 =  mfccb * c1o2 +      mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcab = m0;
	  mfcbb = m1;
	  mfccb = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfcbc *  vvy         +  mfcac                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfccc * c1o2 +      mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcac = m0;
	  mfcbc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // X - Dir
	  m0 =  mfcaa * c1o2 +      mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcaa        - c2o1 * mfbaa *  vvx         +  mfaaa                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcaa * c1o2 +      mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaaa = m0;
	  mfbaa = m1;
	  mfcaa = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcba * c1o2 +      mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcba        - c2o1 * mfbba *  vvx         +  mfaba                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcba * c1o2 +      mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaba = m0;
	  mfbba = m1;
	  mfcba = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfbca *  vvx         +  mfaca                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcca * c1o2 +      mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaca = m0;
	  mfbca = m1;
	  mfcca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcab * c1o2 +      mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcab        - c2o1 * mfbab *  vvx         +  mfaab                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcab * c1o2 +      mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaab = m0;
	  mfbab = m1;
	  mfcab = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbb * c1o2 +      mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbb        - c2o1 * mfbbb *  vvx         +  mfabb                  * (c1o1 - vx2)              - c4o9 * oMdrho * vx2; 
	  m2 =  mfcbb * c1o2 +      mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabb = m0;
	  mfbbb = m1;
	  mfcbb = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfbcb *  vvx         +  mfacb                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfccb * c1o2 +      mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacb = m0;
	  mfbcb = m1;
	  mfccb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfbac *  vvx         +  mfaac                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcac * c1o2 +      mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaac = m0;
	  mfbac = m1;
	  mfcac = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfbbc *  vvx         +  mfabc                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcbc * c1o2 +      mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabc = m0;
	  mfbbc = m1;
	  mfcbc = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfbcc *  vvx         +  mfacc                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfccc * c1o2 +      mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacc = m0;
	  mfbcc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////
	  //index 0
	  kzero= posC[k];
	  kw   = neighborCX[kzero];
	  ks   = neighborCY[kzero];
	  kb   = neighborCZ[kzero];
	  ksw  = neighborCY[kw];
	  kbw  = neighborCZ[kw];
	  kbs  = neighborCZ[ks];
	  kbsw = neighborCZ[ksw];
	  ////////////////////////////////////////////////////////////////////////////////////


	  ////////////////////////////////////////////////////////////////////////////////////
	  feC[kzero]    = mfcbb;                                                                 
	  fwC[kw]       = mfabb;                                                               
	  fnC[kzero]    = mfbcb;
	  fsC[ks]       = mfbab;
	  ftC[kzero]    = mfbbc;
	  fbC[kb]       = mfbba;
	  fneC[kzero]   = mfccb;
	  fswC[ksw]     = mfaab;
	  fseC[ks]      = mfcab;
	  fnwC[kw]      = mfacb;
	  fteC[kzero]   = mfcbc;
	  fbwC[kbw]     = mfaba;
	  fbeC[kb]      = mfcba;
	  ftwC[kw]      = mfabc;
	  ftnC[kzero]   = mfbcc;
	  fbsC[kbs]     = mfbaa;
	  fbnC[kb]      = mfbca;
	  ftsC[ks]      = mfbac;
	  fzeroC[kzero] = mfbbb;
	  ftneC[kzero]  = mfccc;
	  ftseC[ks]     = mfcac;
	  fbneC[kb]     = mfcca;
	  fbseC[kbs]    = mfcaa;
	  ftnwC[kw]     = mfacc;
	  ftswC[ksw]    = mfaac;
	  fbnwC[kbw]    = mfaca;
	  fbswC[kbsw]   = mfaaa;
	  ////////////////////////////////////////////////////////////////////////////////////
   }
}
//////////////////////////////////////////////////////////////////////////






















































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC_Fix_comp_27(  real* DC, 
												 real* DF, 
												 unsigned int* neighborCX,
												 unsigned int* neighborCY,
												 unsigned int* neighborCZ,
												 unsigned int* neighborFX,
												 unsigned int* neighborFY,
												 unsigned int* neighborFZ,
												 unsigned int size_MatC, 
												 unsigned int size_MatF, 
												 bool isEvenTimestep,
												 unsigned int* posC, 
												 unsigned int* posFSWB, 
												 unsigned int kFC, 
												 real omCoarse, 
												 real omFine, 
												 real nu, 
												 unsigned int nxC, 
												 unsigned int nyC, 
												 unsigned int nxF, 
												 unsigned int nyF,
												 OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   //real op = one;
   //real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   // real drho;
   real        vvx, vvy, vvz, vx2, vy2, vz2;
   real        press;//,drho,vx1,vx2,vx3;
   real        /*press_SWT,*/drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        /*press_NWT,*/drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        /*press_NET,*/drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        /*press_SET,*/drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        /*press_SWB,*/drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        /*press_NWB,*/drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        /*press_NEB,*/drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        /*press_SEB,*/drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   //real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT, kyyMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT, kyyMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET, kyyMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET, kyyMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB, kyyMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB, kyyMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB, kyyMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB, kyyMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;
   real        d0, dx, dy, dz, dxy, dxz, dyz/*, dxyz*/;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWB);
	  vx2_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWB);
	  vx3_SWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWB);

	  //nicht konditioniert
	  //kxyFromfcNEQ_SWB    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SWB) - ((vx1_SWB*vx2_SWB)));
      //kyzFromfcNEQ_SWB    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SWB) - ((vx2_SWB*vx3_SWB)));
      //kxzFromfcNEQ_SWB    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SWB) - ((vx1_SWB*vx3_SWB)));
      //kxxMyyFromfcNEQ_SWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SWB) - ((vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB)));
      //kxxMzzFromfcNEQ_SWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SWB) - ((vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB)));

	  kxyFromfcNEQ_SWB = -c3o1*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_SWB) - ((vx1_SWB*vx2_SWB)));
	  kyzFromfcNEQ_SWB = -c3o1*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_SWB) - ((vx2_SWB*vx3_SWB)));
	  kxzFromfcNEQ_SWB = -c3o1*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_SWB) - ((vx1_SWB*vx3_SWB)));
	  kxxMyyFromfcNEQ_SWB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB - vx2_SWB*vx2_SWB)));
	  kxxMzzFromfcNEQ_SWB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_SWB) - ((vx1_SWB*vx1_SWB - vx3_SWB*vx3_SWB)));
	  kyyMzzFromfcNEQ_SWB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_SWB) - ((vx2_SWB*vx2_SWB - vx3_SWB*vx3_SWB)));

	  ////konditioniert
	  //vvx = vx1_SWB;
	  //vvy = vx2_SWB;
	  //vvz = vx3_SWB;
	  //drho = drho_SWB;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E    -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W    -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N    -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S    -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T    -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B    -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE   -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW   -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE   -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW   -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE   -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW   -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE   -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW   -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN   -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS   -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN   -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS   -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE  -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW  -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE  -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW  -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE  -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW  -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE  -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW  -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_SWB = -three*omegaS   *((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (one + drho));
	  //kyzFromfcNEQ_SWB = -three*omegaS   *((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (one + drho));
	  //kxzFromfcNEQ_SWB = -three*omegaS   *((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (one + drho));
	  //kxxMyyFromfcNEQ_SWB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N)))             / (one + drho));
	  //kxxMzzFromfcNEQ_SWB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T)))             / (one + drho));
	  //kyyMzzFromfcNEQ_SWB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));



      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SWT);
	  vx2_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SWT);
	  vx3_SWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SWT);

	  //nicht konditioniert
	  //kxyFromfcNEQ_SWT    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SWT) - ((vx1_SWT*vx2_SWT)));
      //kyzFromfcNEQ_SWT    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SWT) - ((vx2_SWT*vx3_SWT)));
      //kxzFromfcNEQ_SWT    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SWT) - ((vx1_SWT*vx3_SWT)));
      //kxxMyyFromfcNEQ_SWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SWT) - ((vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT)));
      //kxxMzzFromfcNEQ_SWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SWT) - ((vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT)));

	  kxyFromfcNEQ_SWT = -c3o1*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_SWT) - ((vx1_SWT*vx2_SWT)));
	  kyzFromfcNEQ_SWT = -c3o1*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_SWT) - ((vx2_SWT*vx3_SWT)));
	  kxzFromfcNEQ_SWT = -c3o1*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_SWT) - ((vx1_SWT*vx3_SWT)));
	  kxxMyyFromfcNEQ_SWT = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT - vx2_SWT*vx2_SWT)));
	  kxxMzzFromfcNEQ_SWT = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_SWT) - ((vx1_SWT*vx1_SWT - vx3_SWT*vx3_SWT)));
	  kyyMzzFromfcNEQ_SWT = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_SWT) - ((vx2_SWT*vx2_SWT - vx3_SWT*vx3_SWT)));

	  ////konditioniert
	  //vvx = vx1_SWT;
	  //vvy = vx2_SWT;
	  //vvz = vx3_SWT;
	  //drho = drho_SWT;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_SWT = -three*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (one + drho));
	  //kyzFromfcNEQ_SWT = -three*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (one + drho));
	  //kxzFromfcNEQ_SWT = -three*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (one + drho));
	  //kxxMyyFromfcNEQ_SWT = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (one + drho));
	  //kxxMzzFromfcNEQ_SWT = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (one + drho));
	  //kyyMzzFromfcNEQ_SWT = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));




      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SET);
	  vx2_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SET);
	  vx3_SET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SET);

	  //nicht konditioniert
	  //kxyFromfcNEQ_SET    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SET) - ((vx1_SET*vx2_SET)));
      //kyzFromfcNEQ_SET    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SET) - ((vx2_SET*vx3_SET)));
      //kxzFromfcNEQ_SET    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SET) - ((vx1_SET*vx3_SET)));
      //kxxMyyFromfcNEQ_SET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SET) - ((vx1_SET*vx1_SET-vx2_SET*vx2_SET)));
      //kxxMzzFromfcNEQ_SET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SET) - ((vx1_SET*vx1_SET-vx3_SET*vx3_SET)));

	  kxyFromfcNEQ_SET = -c3o1*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_SET) - ((vx1_SET*vx2_SET)));
	  kyzFromfcNEQ_SET = -c3o1*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_SET) - ((vx2_SET*vx3_SET)));
	  kxzFromfcNEQ_SET = -c3o1*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_SET) - ((vx1_SET*vx3_SET)));
	  kxxMyyFromfcNEQ_SET = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET - vx2_SET*vx2_SET)));
	  kxxMzzFromfcNEQ_SET = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_SET) - ((vx1_SET*vx1_SET - vx3_SET*vx3_SET)));
	  kyyMzzFromfcNEQ_SET = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_SET) - ((vx2_SET*vx2_SET - vx3_SET*vx3_SET)));

	  ////konditioniert
	  //vvx = vx1_SET;
	  //vvy = vx2_SET;
	  //vvz = vx3_SET;
	  //drho = drho_SET;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_SET = -three*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (one + drho));
	  //kyzFromfcNEQ_SET = -three*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (one + drho));
	  //kxzFromfcNEQ_SET = -three*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (one + drho));
	  //kxxMyyFromfcNEQ_SET = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (one + drho));
	  //kxxMzzFromfcNEQ_SET = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (one + drho));
	  //kyyMzzFromfcNEQ_SET = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));



      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_SEB);
	  vx2_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_SEB);
	  vx3_SEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_SEB);

	  //nicht konditioniert
	  //kxyFromfcNEQ_SEB    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_SEB) - ((vx1_SEB*vx2_SEB)));
      //kyzFromfcNEQ_SEB    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_SEB) - ((vx2_SEB*vx3_SEB)));
      //kxzFromfcNEQ_SEB    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_SEB) - ((vx1_SEB*vx3_SEB)));
      //kxxMyyFromfcNEQ_SEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_SEB) - ((vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB)));
      //kxxMzzFromfcNEQ_SEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_SEB) - ((vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB)));

	  kxyFromfcNEQ_SEB = -c3o1*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_SEB) - ((vx1_SEB*vx2_SEB)));
	  kyzFromfcNEQ_SEB = -c3o1*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_SEB) - ((vx2_SEB*vx3_SEB)));
	  kxzFromfcNEQ_SEB = -c3o1*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_SEB) - ((vx1_SEB*vx3_SEB)));
	  kxxMyyFromfcNEQ_SEB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB - vx2_SEB*vx2_SEB)));
	  kxxMzzFromfcNEQ_SEB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_SEB) - ((vx1_SEB*vx1_SEB - vx3_SEB*vx3_SEB)));
	  kyyMzzFromfcNEQ_SEB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_SEB) - ((vx2_SEB*vx2_SEB - vx3_SEB*vx3_SEB)));

	  ////konditioniert
	  //vvx = vx1_SEB;
	  //vvy = vx2_SEB;
	  //vvz = vx3_SEB;
	  //drho = drho_SEB;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_SEB = -three*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (one + drho));
	  //kyzFromfcNEQ_SEB = -three*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (one + drho));
	  //kxzFromfcNEQ_SEB = -three*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (one + drho));
	  //kxxMyyFromfcNEQ_SEB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (one + drho));
	  //kxxMzzFromfcNEQ_SEB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (one + drho));
	  //kyyMzzFromfcNEQ_SEB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));


      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWB);
	  vx2_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWB);
	  vx3_NWB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWB);

      //kxyFromfcNEQ_NWB    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NWB) - ((vx1_NWB*vx2_NWB)));
      //kyzFromfcNEQ_NWB    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NWB) - ((vx2_NWB*vx3_NWB)));
      //kxzFromfcNEQ_NWB    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NWB) - ((vx1_NWB*vx3_NWB)));
      //kxxMyyFromfcNEQ_NWB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NWB) - ((vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB)));
      //kxxMzzFromfcNEQ_NWB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NWB) - ((vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB)));

	  kxyFromfcNEQ_NWB = -c3o1*omegaS*   ((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_NWB) - ((vx1_NWB*vx2_NWB)));
	  kyzFromfcNEQ_NWB = -c3o1*omegaS*   ((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_NWB) - ((vx2_NWB*vx3_NWB)));
	  kxzFromfcNEQ_NWB = -c3o1*omegaS*   ((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_NWB) - ((vx1_NWB*vx3_NWB)));
	  kxxMyyFromfcNEQ_NWB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB - vx2_NWB*vx2_NWB)));
	  kxxMzzFromfcNEQ_NWB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_NWB) - ((vx1_NWB*vx1_NWB - vx3_NWB*vx3_NWB)));
	  kyyMzzFromfcNEQ_NWB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_NWB) - ((vx2_NWB*vx2_NWB - vx3_NWB*vx3_NWB)));

	  //konditioniert
	  //vvx = vx1_NWB;
	  //vvy = vx2_NWB;
	  //vvz = vx3_NWB;
	  //drho = drho_NWB;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_NWB = -three*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (one + drho));
	  //kyzFromfcNEQ_NWB = -three*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (one + drho));
	  //kxzFromfcNEQ_NWB = -three*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (one + drho));
	  //kxxMyyFromfcNEQ_NWB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (one + drho));
	  //kxxMzzFromfcNEQ_NWB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (one + drho));
	  //kyyMzzFromfcNEQ_NWB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));



	  //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWT  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NWT);
	  vx2_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NWT);
	  vx3_NWT  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NWT);

	  //nicht konditioniert
	  //kxyFromfcNEQ_NWT    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NWT) - ((vx1_NWT*vx2_NWT)));
      //kyzFromfcNEQ_NWT    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NWT) - ((vx2_NWT*vx3_NWT)));
      //kxzFromfcNEQ_NWT    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NWT) - ((vx1_NWT*vx3_NWT)));
      //kxxMyyFromfcNEQ_NWT = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NWT) - ((vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT)));
      //kxxMzzFromfcNEQ_NWT = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NWT) - ((vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT)));

	  kxyFromfcNEQ_NWT = -c3o1*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_NWT) - ((vx1_NWT*vx2_NWT)));
	  kyzFromfcNEQ_NWT = -c3o1*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_NWT) - ((vx2_NWT*vx3_NWT)));
	  kxzFromfcNEQ_NWT = -c3o1*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_NWT) - ((vx1_NWT*vx3_NWT)));
	  kxxMyyFromfcNEQ_NWT = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT - vx2_NWT*vx2_NWT)));
	  kxxMzzFromfcNEQ_NWT = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_NWT) - ((vx1_NWT*vx1_NWT - vx3_NWT*vx3_NWT)));
	  kyyMzzFromfcNEQ_NWT = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_NWT) - ((vx2_NWT*vx2_NWT - vx3_NWT*vx3_NWT)));

	  //konditioniert
	  //vvx = vx1_NWT;
	  //vvy = vx2_NWT;
	  //vvz = vx3_NWT;
	  //drho = drho_NWT;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_NWT = -three*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (one + drho));
	  //kyzFromfcNEQ_NWT = -three*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (one + drho));
	  //kxzFromfcNEQ_NWT = -three*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (one + drho));
	  //kxxMyyFromfcNEQ_NWT = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (one + drho));
	  //kxxMzzFromfcNEQ_NWT = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (one + drho));
	  //kyyMzzFromfcNEQ_NWT = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));



      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NET  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NET);
	  vx2_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NET);
	  vx3_NET  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NET);

	  //nicht konditioniert
	  //kxyFromfcNEQ_NET    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NET) - ((vx1_NET*vx2_NET)));
      //kyzFromfcNEQ_NET    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NET) - ((vx2_NET*vx3_NET)));
      //kxzFromfcNEQ_NET    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NET) - ((vx1_NET*vx3_NET)));
      //kxxMyyFromfcNEQ_NET = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NET) - ((vx1_NET*vx1_NET-vx2_NET*vx2_NET)));
      //kxxMzzFromfcNEQ_NET = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NET) - ((vx1_NET*vx1_NET-vx3_NET*vx3_NET)));

	  kxyFromfcNEQ_NET = -c3o1*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_NET) - ((vx1_NET*vx2_NET)));
	  kyzFromfcNEQ_NET = -c3o1*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_NET) - ((vx2_NET*vx3_NET)));
	  kxzFromfcNEQ_NET = -c3o1*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_NET) - ((vx1_NET*vx3_NET)));
	  kxxMyyFromfcNEQ_NET = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET - vx2_NET*vx2_NET)));
	  kxxMzzFromfcNEQ_NET = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_NET) - ((vx1_NET*vx1_NET - vx3_NET*vx3_NET)));
	  kyyMzzFromfcNEQ_NET = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_NET) - ((vx2_NET*vx2_NET - vx3_NET*vx3_NET)));

	  //konditioniert
	  //vvx = vx1_NET;
	  //vvy = vx2_NET;
	  //vvz = vx3_NET;
	  //drho = drho_NET;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_NET = -three*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (one + drho));
	  //kyzFromfcNEQ_NET = -three*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (one + drho));
	  //kxzFromfcNEQ_NET = -three*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (one + drho));
	  //kxxMyyFromfcNEQ_NET = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (one + drho));
	  //kxxMzzFromfcNEQ_NET = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (one + drho));
	  //kyyMzzFromfcNEQ_NET = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NEB  = (((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W))/(c1o1 + drho_NEB);
	  vx2_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S))/(c1o1 + drho_NEB);
	  vx3_NEB  = (((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B))/(c1o1 + drho_NEB);

	  //nicht konditioniert
	  //kxyFromfcNEQ_NEB    = -three*omegaS*((f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE ) / (one + drho_NEB) - ((vx1_NEB*vx2_NEB)));
	  //kyzFromfcNEQ_NEB    = -three*omegaS*((f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW ) / (one + drho_NEB) - ((vx2_NEB*vx3_NEB)));
	  //kxzFromfcNEQ_NEB    = -three*omegaS*((f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE ) / (one + drho_NEB) - ((vx1_NEB*vx3_NEB)));
	  //kxxMyyFromfcNEQ_NEB = -c3o2*omegaS *((f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE             ) / (one + drho_NEB) - ((vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB)));
	  //kxxMzzFromfcNEQ_NEB = -c3o2*omegaS *((f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE             ) / (one + drho_NEB) - ((vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB)));

	  kxyFromfcNEQ_NEB = -c3o1*omegaS*((((f_SW - f_SE) + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))) / (c1o1 + drho_NEB) - ((vx1_NEB*vx2_NEB)));
	  kyzFromfcNEQ_NEB = -c3o1*omegaS*((((f_BS - f_TS) + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))) / (c1o1 + drho_NEB) - ((vx2_NEB*vx3_NEB)));
	  kxzFromfcNEQ_NEB = -c3o1*omegaS*((((f_BW - f_BE) + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))) / (c1o1 + drho_NEB) - ((vx1_NEB*vx3_NEB)));
	  kxxMyyFromfcNEQ_NEB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S) + (f_E - f_N))) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB - vx2_NEB*vx2_NEB)));
	  kxxMzzFromfcNEQ_NEB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) + (f_E - f_T))) / (c1o1 + drho_NEB) - ((vx1_NEB*vx1_NEB - vx3_NEB*vx3_NEB)));
	  kyyMzzFromfcNEQ_NEB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (c1o1 + drho_NEB) - ((vx2_NEB*vx2_NEB - vx3_NEB*vx3_NEB)));

	  //konditioniert
	  //vvx = vx1_NEB;
	  //vvy = vx2_NEB;
	  //vvz = vx3_NEB;
	  //drho = drho_NEB;
	  //vx2 = vvx * vvx;
	  //vy2 = vvy * vvy;
	  //vz2 = vvz * vvz;


	  //f_E -= c2over27*drho + (drho + one)*(c2o9*(vvx + vx2) + (c1o6 + c1o2*(vvx + vx2))*vy2*vz2 - c1o9*(vy2 + vz2) - c1o3*(vvx + vx2)*(vy2 + vz2));
	  //f_W -= c2over27*drho - (drho + one)*((vvx - vx2)*(c2o9 - c1o3*vy2) - (c1o6*vy2 + (vvx - vx2)*(c1o3 - c1o2*vy2))*vz2 + c1o9*(vy2 + vz2));
	  //f_N -= c2over27*drho + (drho + one)*(c2o9*(vvy + vy2) + vx2*(c1o6 + c1o2*(vvy + vy2))*vz2 - c1o9*(vx2 + vz2) - c1o3*(vvy + vy2)*(vx2 + vz2));
	  //f_S -= c2over27*drho - (drho + one)*((c2o9 - c1o3*vx2)*(vvy - vy2) - (c1o6*vx2 + (c1o3 - c1o2*vx2)*(vvy - vy2))*vz2 + c1o9*(vx2 + vz2));
	  //f_T -= c2over27*drho + (drho + one)*(-(c1o9*(vx2 + vy2)) + c2o9*(vvz + vz2) - c1o3*(vx2 + vy2)*(vvz + vz2) + vx2*vy2*(c1o6 + c1o2*(vvz + vz2)));
	  //f_B -= c2over27*drho - (drho + one)*(c1o9*(vx2 + vy2) + c2o9*(vvz - vz2) - c1o3*(vx2 + vy2)*(vvz - vz2) - vx2*vy2*(c1o6 + c1o2*(-vvz + vz2)));
	  //f_NE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvy + vy2) + c1o18*(vvx + vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx + vx2)*(vvy + vy2) + c1o12*(vvx + vvy + vx2 + vy2))*vz2);
	  //f_SW -= c1over54*drho + (drho + one)*(c1o6*(vvx - vx2)*(vvy - vy2) + c1o18*(-vvx - vvy + vx2 + vy2) - (c1o36 + c1o4*(vvx - vx2)*(vvy - vy2) + c1o12*(-vvx - vvy + vx2 + vy2))*vz2);
	  //f_SE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvy - vy2)) + c1o18*(vvx - vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx + vx2)*(vvy - vy2) + c1o12*(vvx - vvy + vx2 + vy2))*vz2);
	  //f_NW -= c1over54*drho + (drho + one)*(-(c1o6*(vvx - vx2)*(vvy + vy2)) + c1o18*(-vvx + vvy + vx2 + vy2) - (c1o36 - c1o4*(vvx - vx2)*(vvy + vy2) + c1o12*(-vvx + vvy + vx2 + vy2))*vz2);
	  //f_TE -= c1over54*drho + (drho + one)*(c1o6*(vvx + vx2)*(vvz + vz2) + c1o18*(vvx + vvz + vx2 + vz2) - vy2*(c1o36 + c1o4*(vvx + vx2)*(vvz + vz2) + c1o12*(vvx + vvz + vx2 + vz2)));
	  //f_BW -= c1over54*drho - (drho + one)*(-(c1o6*(vvx - vx2)*(vvz - vz2)) + c1o18*(vvx + vvz - vx2 - vz2) + vy2*(c1o36 + c1o4*(vvx - vx2)*(vvz - vz2) + c1o12*(-vvx - vvz + vx2 + vz2)));
	  //f_BE -= c1over54*drho + (drho + one)*(-(c1o6*(vvx + vx2)*(vvz - vz2)) + c1o18*(vvx - vvz + vx2 + vz2) - vy2*(c1o36 - c1o4*(vvx + vx2)*(vvz - vz2) + c1o12*(vvx - vvz + vx2 + vz2)));
	  //f_TW -= c1over54*drho - (drho + one)*(c1o18*(vvx - vvz - vx2 - vz2) + c1o6*(vvx - vx2)*(vvz + vz2) + vy2*(c1o36 - c1o4*(vvx - vx2)*(vvz + vz2) + c1o12*(-vvx + vvz + vx2 + vz2)));
	  //f_TN -= c1over54*drho + (drho + one)*(c1o6*(vvy + vy2)*(vvz + vz2) + c1o18*(vvy + vvz + vy2 + vz2) - vx2*(c1o36 + c1o4*(vvy + vy2)*(vvz + vz2) + c1o12*(vvy + vvz + vy2 + vz2)));
	  //f_BS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_BN -= c1over54*drho + (drho + one)*(-(c1o6*(vvy + vy2)*(vvz - vz2)) + c1o18*(vvy - vvz + vy2 + vz2) - vx2*(c1o36 - c1o4*(vvy + vy2)*(vvz - vz2) + c1o12*(vvy - vvz + vy2 + vz2)));
	  //f_TS -= c1over54*drho - (drho + one)*(c1o18*(vvy - vvz - vy2 - vz2) + c1o6*(vvy - vy2)*(vvz + vz2) + vx2*(c1o36 - c1o4*(vvy - vy2)*(vvz + vz2) + c1o12*(-vvy + vvz + vy2 + vz2)));
	  //f_ZERO -= c8over27*drho - (drho + one)*(vx2*vy2*vz2 + c4o9*(vx2 + vy2 + vz2) - c2o3*(vx2*vy2 + (vx2 + vy2)*vz2));
	  //f_TNE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz + vz2) + c1o72*(vvx + vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) + vvx*(vvy + vvz + vy2 + vz2)));
	  //f_TSW -= c1over216*drho + (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz + vz2) + c1o72*(-vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + vvx*(vvy - vvz - vy2 - vz2) + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2)));
	  //f_TSE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz + vz2)) + c1o72*(vvx - vvy + vvz + vx2 + vy2 + vz2) + c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 - vvy*(vvz + vx2 + vz2) + vvx*(-vvy + vvz + vy2 + vz2)));
	  //f_TNW -= c1over216*drho - (drho + one)*(c1o72*(vvx - vvy - vvz - vx2 - vy2 - vz2) + c1o8*(vvx - vx2)*(vvy + vy2)*(vvz + vz2) - c1o24*(vvz*vx2 + vvz*vy2 + vx2*vy2 + (vx2 + vy2)*vz2 + vvy*(vvz + vx2 + vz2) - vvx*(vvy + vvz + vy2 + vz2)));
	  //f_BNE -= c1over216*drho + (drho + one)*(-(c1o8*(vvx + vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx + vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvy*vvz) + vvy*vx2 - vvz*vx2 - vvz*vy2 + vx2*vy2 + (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));
	  //f_BSW -= c1over216*drho - (drho + one)*(c1o8*(vvx - vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx + vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvz*vx2 + vvz*vy2 - vx2*vy2 - (vx2 + vy2)*vz2 + vvy*(-vvz + vx2 + vz2) + vvx*(-vvy - vvz + vy2 + vz2)));
	  //f_BSE -= c1over216*drho + (drho + one)*(c1o8*(vvx + vx2)*(vvy - vy2)*(vvz - vz2) + c1o72*(vvx - vvy - vvz + vx2 + vy2 + vz2) + c1o24*(-(vvx*vvy) - vvx*vvz + vvy*vvz - (vvy + vvz)*vx2 + (vvx - vvz + vx2)*vy2 + (vvx - vvy + vx2 + vy2)*vz2));
	  //f_BNW -= c1over216*drho - (drho + one)*(-(c1o8*(vvx - vx2)*(vvy + vy2)*(vvz - vz2)) + c1o72*(vvx - vvy + vvz - vx2 - vy2 - vz2) + c1o24*(vvy*vvz - vvy*vx2 + vvz*vx2 + vvz*vy2 - vx2*vy2 - (vvy + vx2 + vy2)*vz2 + vvx*(vvy - vvz + vy2 + vz2)));

	  //kxyFromfcNEQ_NEB = -three*omegaS*((((f_SW - f_SE)  + (f_NE - f_NW)) + (((f_BSW - f_BSE) + (f_BNE - f_BNW)) + ((f_TSW - f_TSE) + (f_TNE - f_TNW)))  ) / (one + drho));
	  //kyzFromfcNEQ_NEB = -three*omegaS*((((f_BS - f_TS)  + (f_TN - f_BN)) + (((f_BSE - f_TSE) + (f_BSW - f_BNW)) + ((f_TNE - f_BNE) + (f_TNW - f_TSW)))  ) / (one + drho));
	  //kxzFromfcNEQ_NEB = -three*omegaS*((((f_BW - f_BE)  + (f_TE - f_TW)) + (((f_BSW - f_BSE) + (f_BNW - f_BNE)) + ((f_TSE - f_TSW) + (f_TNE - f_TNW)))  ) / (one + drho));
	  //kxxMyyFromfcNEQ_NEB = -c3o2*omegaS *(((((f_BW - f_BS) + (f_TW - f_TS)) + ((f_BE - f_BN) + (f_TE - f_TN))) + ((f_W - f_S)  + (f_E - f_N))) / (one + drho));
	  //kxxMzzFromfcNEQ_NEB = -c3o2*omegaS *(((((f_SW - f_BS) + (f_NW - f_BN)) + ((f_SE - f_TS) + (f_NE - f_TN))) + ((f_W - f_B) +  (f_E - f_T))) / (one + drho));
	  //kyyMzzFromfcNEQ_NEB = -c3o2*omegaS *(((((f_SE - f_BE) + (f_SW - f_BW)) + ((f_NE - f_TE) + (f_NW - f_TW))) + ((f_S - f_B) + (f_N - f_T))) / (one + drho));

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //kxyFromfcNEQ_SWB    = zero;
	  //kyzFromfcNEQ_SWB    = zero;
	  //kxzFromfcNEQ_SWB    = zero;
	  //kxxMyyFromfcNEQ_SWB = zero;
	  //kxxMzzFromfcNEQ_SWB = zero;
	  //kxyFromfcNEQ_SWT    = zero;
	  //kyzFromfcNEQ_SWT    = zero;
	  //kxzFromfcNEQ_SWT    = zero;
	  //kxxMyyFromfcNEQ_SWT = zero;
	  //kxxMzzFromfcNEQ_SWT = zero;
	  //kxyFromfcNEQ_SET    = zero;
	  //kyzFromfcNEQ_SET    = zero;
	  //kxzFromfcNEQ_SET    = zero;
	  //kxxMyyFromfcNEQ_SET = zero;
	  //kxxMzzFromfcNEQ_SET = zero;
	  //kxyFromfcNEQ_SEB    = zero;
	  //kyzFromfcNEQ_SEB    = zero;
	  //kxzFromfcNEQ_SEB    = zero;
	  //kxxMyyFromfcNEQ_SEB = zero;
	  //kxxMzzFromfcNEQ_SEB = zero;
	  //kxyFromfcNEQ_NWB    = zero;
	  //kyzFromfcNEQ_NWB    = zero;
	  //kxzFromfcNEQ_NWB    = zero;
	  //kxxMyyFromfcNEQ_NWB = zero;
	  //kxxMzzFromfcNEQ_NWB = zero;
	  //kxyFromfcNEQ_NWT    = zero;
	  //kyzFromfcNEQ_NWT    = zero;
	  //kxzFromfcNEQ_NWT    = zero;
	  //kxxMyyFromfcNEQ_NWT = zero;
	  //kxxMzzFromfcNEQ_NWT = zero;
	  //kxyFromfcNEQ_NET    = zero;
	  //kyzFromfcNEQ_NET    = zero;
	  //kxzFromfcNEQ_NET    = zero;
	  //kxxMyyFromfcNEQ_NET = zero;
	  //kxxMzzFromfcNEQ_NET = zero;
	  //kxyFromfcNEQ_NEB    = zero;
	  //kyzFromfcNEQ_NEB    = zero;
	  //kxzFromfcNEQ_NEB    = zero;
	  //kxxMyyFromfcNEQ_NEB = zero;
	  //kxxMzzFromfcNEQ_NEB = zero;
      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
	  a0  = c1o8*(((vx1_NEB + vx1_SWT) + (vx1_NWB + vx1_SET)) + ((vx1_SEB + vx1_NWT) + (vx1_SWB + vx1_NET)));
	  ax  = c1o4*(((vx1_NEB - vx1_SWT) + (vx1_NET - vx1_SWB)) + ((vx1_SET - vx1_NWB) + (vx1_SEB - vx1_NWT)));
	  ay  = c1o4*(((vx1_NEB - vx1_SWT) + (vx1_NET - vx1_SWB)) + ((vx1_NWB - vx1_SET) + (vx1_NWT - vx1_SEB)));
	  az  = c1o4*(((vx1_SWT - vx1_NEB) + (vx1_NET - vx1_SWB)) + ((vx1_SET - vx1_NWB) + (vx1_NWT - vx1_SEB)));
	  axy = c1o2*(((vx1_NEB - vx1_SET) + (vx1_SWB - vx1_NWT)) + ((vx1_SWT - vx1_NWB) + (vx1_NET - vx1_SEB)));
	  axz = c1o2*(((vx1_SET - vx1_NEB) + (vx1_SWB - vx1_NWT)) + ((vx1_NWB - vx1_SWT) + (vx1_NET - vx1_SEB)));
	  ayz = c1o2*(((vx1_NET - vx1_NWB) + (vx1_SEB - vx1_SWT)) + ((vx1_NWT - vx1_NEB) + (vx1_SWB - vx1_SET)));
	  //axyz=		  ((vx1_SWT - vx1_NEB) + (vx1_NET - vx1_SWB)) + ((vx1_NWB - vx1_SET) + (vx1_SEB - vx1_NWT)) ;
	  b0  = c1o8*(((vx2_NEB + vx2_SWT) + (vx2_NWB + vx2_SET)) + ((vx2_SEB + vx2_NWT) + (vx2_SWB + vx2_NET)));
	  bx  = c1o4*(((vx2_NEB - vx2_SWT) + (vx2_NET - vx2_SWB)) + ((vx2_SET - vx2_NWB) + (vx2_SEB - vx2_NWT)));
	  by  = c1o4*(((vx2_NEB - vx2_SWT) + (vx2_NET - vx2_SWB)) + ((vx2_NWB - vx2_SET) + (vx2_NWT - vx2_SEB)));
	  bz  = c1o4*(((vx2_SWT - vx2_NEB) + (vx2_NET - vx2_SWB)) + ((vx2_SET - vx2_NWB) + (vx2_NWT - vx2_SEB)));
	  bxy = c1o2*(((vx2_NEB - vx2_NWT) + (vx2_SWB - vx2_SET)) + ((vx2_SWT - vx2_SEB) + (vx2_NET - vx2_NWB)));
	  bxz = c1o2*(((vx2_SWB - vx2_NEB) + (vx2_SET - vx2_NWT)) + ((vx2_NWB - vx2_SEB) + (vx2_NET - vx2_SWT)));
	  byz = c1o2*(((vx2_NWT - vx2_NEB) + (vx2_SWB - vx2_SET)) + ((vx2_SEB - vx2_SWT) + (vx2_NET - vx2_NWB)));
	  //bxyz=		  ((vx2_SWT - vx2_NEB) + (vx2_NET - vx2_SWB)) + ((vx2_NWB - vx2_SET) + (vx2_SEB - vx2_NWT)) ;
	  c0  = c1o8*(((vx3_NEB + vx3_SWT) + (vx3_NWB + vx3_SET)) + ((vx3_SEB + vx3_NWT) + (vx3_SWB + vx3_NET)));
	  cx  = c1o4*(((vx3_NEB - vx3_SWT) + (vx3_NET - vx3_SWB)) + ((vx3_SET - vx3_NWB) + (vx3_SEB - vx3_NWT)));
	  cy  = c1o4*(((vx3_NEB - vx3_SWT) + (vx3_NET - vx3_SWB)) + ((vx3_NWB - vx3_SET) + (vx3_NWT - vx3_SEB)));
	  cz  = c1o4*(((vx3_SWT - vx3_NEB) + (vx3_NET - vx3_SWB)) + ((vx3_SET - vx3_NWB) + (vx3_NWT - vx3_SEB)));
	  cxy = c1o2*(((vx3_NEB - vx3_SET) + (vx3_SWB - vx3_NWT)) + ((vx3_SWT - vx3_NWB) + (vx3_NET - vx3_SEB)));
	  cxz = c1o2*(((vx3_SWB - vx3_NEB) + (vx3_SET - vx3_NWT)) + ((vx3_NWB - vx3_SEB) + (vx3_NET - vx3_SWT)));
	  cyz = c1o2*(((vx3_SWB - vx3_NEB) + (vx3_NWT - vx3_SET)) + ((vx3_SEB - vx3_NWB) + (vx3_NET - vx3_SWT)));
	  //cxyz=		  ((vx3_SWT - vx3_NEB) + (vx3_NET - vx3_SWB)) + ((vx3_NWB - vx3_SET) + (vx3_SEB - vx3_NWT)) ;

	  //bxx = zero;
	  //cxx = zero;
	  //ayy = zero;
	  //cyy = zero;
	  //azz = zero;
	  //bzz = zero;
	  //axx = zero;
	  //byy = zero;
	  //czz = zero;

	  bxx = c1o8*(((kxyFromfcNEQ_NET - kxyFromfcNEQ_SWB) + (kxyFromfcNEQ_SEB - kxyFromfcNEQ_NWT)) + ((kxyFromfcNEQ_SET - kxyFromfcNEQ_NWB) + (kxyFromfcNEQ_NEB - kxyFromfcNEQ_SWT))) - c1o2*axy;
	  cxx = c1o8*(((kxzFromfcNEQ_NET - kxzFromfcNEQ_SWB) + (kxzFromfcNEQ_SEB - kxzFromfcNEQ_NWT)) + ((kxzFromfcNEQ_SET - kxzFromfcNEQ_NWB) + (kxzFromfcNEQ_NEB - kxzFromfcNEQ_SWT))) - c1o2*axz;

	  ayy = c1o8*(((kxyFromfcNEQ_NET - kxyFromfcNEQ_SWB) + (kxyFromfcNEQ_NEB - kxyFromfcNEQ_SWT)) - ((kxyFromfcNEQ_SEB - kxyFromfcNEQ_NWT) + (kxyFromfcNEQ_SET - kxyFromfcNEQ_NWB))) - c1o2*bxy;
	  cyy = c1o8*(((kyzFromfcNEQ_NET - kyzFromfcNEQ_SWB) + (kyzFromfcNEQ_NEB - kyzFromfcNEQ_SWT)) - ((kyzFromfcNEQ_SEB - kyzFromfcNEQ_NWT) + (kyzFromfcNEQ_SET - kyzFromfcNEQ_NWB))) - c1o2*byz;

	  azz = c1o8*(((kxzFromfcNEQ_NET - kxzFromfcNEQ_SWB) - (kxzFromfcNEQ_SEB - kxzFromfcNEQ_NWT)) + ((kxzFromfcNEQ_SET - kxzFromfcNEQ_NWB) - (kxzFromfcNEQ_NEB - kxzFromfcNEQ_SWT))) - c1o2*cxz;
	  bzz = c1o8*(((kyzFromfcNEQ_NET - kyzFromfcNEQ_SWB) - (kyzFromfcNEQ_SEB - kyzFromfcNEQ_NWT)) + ((kyzFromfcNEQ_SET - kyzFromfcNEQ_NWB) - (kyzFromfcNEQ_NEB - kyzFromfcNEQ_SWT))) - c1o2*cyz;

	  axx = ( c1o16*(((kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_SWB) + (kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NWT)) + ((kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NWB) + (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_SWT))) - c1o4*bxy)
		  + ( c1o16*(((kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_SWB) + (kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NWT)) + ((kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NWB) + (kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWT))) - c1o4*cxz);

	  byy = (-c1o16*(((kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_SWB) - (kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NWT)) + ((kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_SWT) - (kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NWB))) - c1o4*axy)
		  + ( c1o16*(((kyyMzzFromfcNEQ_NET - kyyMzzFromfcNEQ_SWB) - (kyyMzzFromfcNEQ_SEB - kyyMzzFromfcNEQ_NWT)) + ((kyyMzzFromfcNEQ_NEB - kyyMzzFromfcNEQ_SWT) - (kyyMzzFromfcNEQ_SET - kyyMzzFromfcNEQ_NWB))) - c1o4*cyz);

	  czz = (-c1o16*(((kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_SWB) - (kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NWT)) - ((kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWT) - (kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NWB))) - c1o4*axz)
		  + ( c1o16*(((kyyMzzFromfcNEQ_NET - kyyMzzFromfcNEQ_SWB) - (kyyMzzFromfcNEQ_SEB - kyyMzzFromfcNEQ_NWT)) - ((kyyMzzFromfcNEQ_NEB - kyyMzzFromfcNEQ_SWT) - (kyyMzzFromfcNEQ_SET - kyyMzzFromfcNEQ_NWB))) - c1o4*byz);

	  a0 -= c1o4*(axx + ayy + azz);
	  b0 -= c1o4*(bxx + byy + bzz);
	  c0 -= c1o4*(cxx + cyy + czz);




	  //////////
    //  a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 //kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
			 //kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 //kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 //two*kxyFromfcNEQ_NEB - two*kxyFromfcNEQ_NET - two*kxyFromfcNEQ_NWB - two*kxyFromfcNEQ_NWT + 
			 //two*kxyFromfcNEQ_SEB + two*kxyFromfcNEQ_SET + two*kxyFromfcNEQ_SWB + two*kxyFromfcNEQ_SWT + 
			 //two*kxzFromfcNEQ_NEB - two*kxzFromfcNEQ_NET + two*kxzFromfcNEQ_NWB - two*kxzFromfcNEQ_NWT + 
			 //two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_SET + two*kxzFromfcNEQ_SWB - two*kxzFromfcNEQ_SWT + 
			 //eight*vx1_NEB + eight*vx1_NET + eight*vx1_NWB + eight*vx1_NWT + eight*vx1_SEB + 
			 //eight*vx1_SET + eight*vx1_SWB + eight*vx1_SWT + two*vx2_NEB + two*vx2_NET - 
			 //two*vx2_NWB - two*vx2_NWT - two*vx2_SEB - two*vx2_SET + two*vx2_SWB + 
			 //two*vx2_SWT - two*vx3_NEB + two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
			 //two*vx3_SEB + two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixtyfour;
    //  b0 = (two*kxxMyyFromfcNEQ_NEB + two*kxxMyyFromfcNEQ_NET + two*kxxMyyFromfcNEQ_NWB + two*kxxMyyFromfcNEQ_NWT - 
			 //two*kxxMyyFromfcNEQ_SEB - two*kxxMyyFromfcNEQ_SET - two*kxxMyyFromfcNEQ_SWB - two*kxxMyyFromfcNEQ_SWT - 
			 //kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 //kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 //two*kxyFromfcNEQ_NEB - two*kxyFromfcNEQ_NET + two*kxyFromfcNEQ_NWB + two*kxyFromfcNEQ_NWT - 
			 //two*kxyFromfcNEQ_SEB - two*kxyFromfcNEQ_SET + two*kxyFromfcNEQ_SWB + two*kxyFromfcNEQ_SWT + 
			 //two*kyzFromfcNEQ_NEB - two*kyzFromfcNEQ_NET + two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_NWT + 
			 //two*kyzFromfcNEQ_SEB - two*kyzFromfcNEQ_SET + two*kyzFromfcNEQ_SWB - two*kyzFromfcNEQ_SWT + 
			 //two*vx1_NEB + two*vx1_NET - two*vx1_NWB - two*vx1_NWT - 
			 //two*vx1_SEB - two*vx1_SET + two*vx1_SWB + two*vx1_SWT + 
			 //eight*vx2_NEB + eight*vx2_NET + eight*vx2_NWB + eight*vx2_NWT + 
			 //eight*vx2_SEB + eight*vx2_SET + eight*vx2_SWB + eight*vx2_SWT - 
			 //two*vx3_NEB + two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
			 //two*vx3_SEB - two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixtyfour;
    //  c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 //kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
			 //two*kxxMzzFromfcNEQ_NEB + two*kxxMzzFromfcNEQ_NET - two*kxxMzzFromfcNEQ_NWB + two*kxxMzzFromfcNEQ_NWT - 
			 //two*kxxMzzFromfcNEQ_SEB + two*kxxMzzFromfcNEQ_SET - two*kxxMzzFromfcNEQ_SWB + two*kxxMzzFromfcNEQ_SWT - 
			 //two*kxzFromfcNEQ_NEB - two*kxzFromfcNEQ_NET + two*kxzFromfcNEQ_NWB + two*kxzFromfcNEQ_NWT - 
			 //two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_SET + two*kxzFromfcNEQ_SWB + two*kxzFromfcNEQ_SWT - 
			 //two*kyzFromfcNEQ_NEB - two*kyzFromfcNEQ_NET - two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_NWT + 
			 //two*kyzFromfcNEQ_SEB + two*kyzFromfcNEQ_SET + two*kyzFromfcNEQ_SWB + two*kyzFromfcNEQ_SWT - 
			 //two*vx1_NEB + two*vx1_NET + two*vx1_NWB - two*vx1_NWT - 
			 //two*vx1_SEB + two*vx1_SET + two*vx1_SWB - two*vx1_SWT - 
			 //two*vx2_NEB + two*vx2_NET - two*vx2_NWB + two*vx2_NWT + 
			 //two*vx2_SEB - two*vx2_SET + two*vx2_SWB - two*vx2_SWT + 
			 //eight*vx3_NEB + eight*vx3_NET + eight*vx3_NWB + eight*vx3_NWT + 
			 //eight*vx3_SEB + eight*vx3_SET + eight*vx3_SWB + eight*vx3_SWT)/sixtyfour;
    //  ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/four;
    //  bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/four;
    //  cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/four;
    //  axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 //kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
			 //kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 //kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 //two*vx2_NEB + two*vx2_NET - two*vx2_NWB - two*vx2_NWT - 
			 //two*vx2_SEB - two*vx2_SET + two*vx2_SWB + two*vx2_SWT - 
			 //two*vx3_NEB + two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
			 //two*vx3_SEB + two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixteen;
    //  bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
			 //kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 //two*vx1_NEB - two*vx1_NET + two*vx1_NWB + two*vx1_NWT + 
			 //two*vx1_SEB + two*vx1_SET - two*vx1_SWB - two*vx1_SWT)/eight;
    //  cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
			 //kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
			 //two*vx1_NEB - two*vx1_NET - two*vx1_NWB + two*vx1_NWT + 
			 //two*vx1_SEB - two*vx1_SET - two*vx1_SWB + two*vx1_SWT)/eight;
    //  ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/four;
    //  by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/four;
    //  cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/four;
    //  ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
			 //kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 //two*vx2_NEB - two*vx2_NET + two*vx2_NWB + two*vx2_NWT + 
			 //two*vx2_SEB + two*vx2_SET - two*vx2_SWB - two*vx2_SWT)/eight;
    //  byy= (-two*kxxMyyFromfcNEQ_NEB - two*kxxMyyFromfcNEQ_NET - two*kxxMyyFromfcNEQ_NWB - two*kxxMyyFromfcNEQ_NWT + 
			 //two*kxxMyyFromfcNEQ_SEB + two*kxxMyyFromfcNEQ_SET + two*kxxMyyFromfcNEQ_SWB + two*kxxMyyFromfcNEQ_SWT + 
			 //kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 //kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 //two*vx1_NEB + two*vx1_NET - two*vx1_NWB - two*vx1_NWT - 
			 //two*vx1_SEB - two*vx1_SET + two*vx1_SWB + two*vx1_SWT - 
			 //two*vx3_NEB + two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
			 //two*vx3_SEB - two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixteen;
    //  cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 //kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
			 //two*vx2_NEB - two*vx2_NET + two*vx2_NWB - two*vx2_NWT - 
			 //two*vx2_SEB + two*vx2_SET - two*vx2_SWB + two*vx2_SWT)/eight;
    //  az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/four;
    //  bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/four;
    //  cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/four;
    //  azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
			 //kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
			 //two*vx3_NEB - two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
			 //two*vx3_SEB - two*vx3_SET - two*vx3_SWB + two*vx3_SWT)/eight;
    //  bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 //kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
			 //two*vx3_NEB - two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
			 //two*vx3_SEB + two*vx3_SET - two*vx3_SWB + two*vx3_SWT)/eight;
    //  czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 //kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
			 //two*kxxMzzFromfcNEQ_NEB - two*kxxMzzFromfcNEQ_NET + two*kxxMzzFromfcNEQ_NWB - two*kxxMzzFromfcNEQ_NWT + 
			 //two*kxxMzzFromfcNEQ_SEB - two*kxxMzzFromfcNEQ_SET + two*kxxMzzFromfcNEQ_SWB - two*kxxMzzFromfcNEQ_SWT - 
			 //two*vx1_NEB + two*vx1_NET + two*vx1_NWB - two*vx1_NWT - 
			 //two*vx1_SEB + two*vx1_SET + two*vx1_SWB - two*vx1_SWT - 
			 //two*vx2_NEB + two*vx2_NET - two*vx2_NWB + two*vx2_NWT + 
			 //two*vx2_SEB - two*vx2_SET + two*vx2_SWB - two*vx2_SWT)/sixteen;
    //  axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/two;
    //  bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/two;
    //  cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/two;
    //  axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/two;
    //  bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/two;
    //  cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/two;
    //  ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/two;
    //  byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/two;
    //  cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/two;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real kxyAverage    = c0o1;
	  real kyzAverage    = c0o1;
	  real kxzAverage    = c0o1;
	  real kxxMyyAverage = c0o1;
	  real kxxMzzAverage = c0o1;


	  //real kxyAverage	 =(kxyFromfcNEQ_SWB+
			//				   kxyFromfcNEQ_SWT+
			//				   kxyFromfcNEQ_SET+
			//				   kxyFromfcNEQ_SEB+
			//				   kxyFromfcNEQ_NWB+
			//				   kxyFromfcNEQ_NWT+
			//				   kxyFromfcNEQ_NET+
			//				   kxyFromfcNEQ_NEB)*c1o8-(ay+bx);
	  //real kyzAverage	 =(kyzFromfcNEQ_SWB+
			//				   kyzFromfcNEQ_SWT+
			//				   kyzFromfcNEQ_SET+
			//				   kyzFromfcNEQ_SEB+
			//				   kyzFromfcNEQ_NWB+
			//				   kyzFromfcNEQ_NWT+
			//				   kyzFromfcNEQ_NET+
			//				   kyzFromfcNEQ_NEB)*c1o8-(bz+cy);
	  //real kxzAverage	 =(kxzFromfcNEQ_SWB+
			//				   kxzFromfcNEQ_SWT+
			//				   kxzFromfcNEQ_SET+
			//				   kxzFromfcNEQ_SEB+
			//				   kxzFromfcNEQ_NWB+
			//				   kxzFromfcNEQ_NWT+
			//				   kxzFromfcNEQ_NET+
			//				   kxzFromfcNEQ_NEB)*c1o8-(az+cx);
	  //real kxxMyyAverage	 =(kxxMyyFromfcNEQ_SWB+
			//				   kxxMyyFromfcNEQ_SWT+
			//				   kxxMyyFromfcNEQ_SET+
			//				   kxxMyyFromfcNEQ_SEB+
			//				   kxxMyyFromfcNEQ_NWB+
			//				   kxxMyyFromfcNEQ_NWT+
			//				   kxxMyyFromfcNEQ_NET+
			//				   kxxMyyFromfcNEQ_NEB)*c1o8-(ax-by);
	  //real kxxMzzAverage	 =(kxxMzzFromfcNEQ_SWB+
			//				   kxxMzzFromfcNEQ_SWT+
			//				   kxxMzzFromfcNEQ_SET+
			//				   kxxMzzFromfcNEQ_SEB+
			//				   kxxMzzFromfcNEQ_NWB+
			//				   kxxMzzFromfcNEQ_NWT+
			//				   kxxMzzFromfcNEQ_NET+
			//				   kxxMzzFromfcNEQ_NEB)*c1o8-(ax-cz);



	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////Press
	  //d0   = ( press_NEB + press_NET + press_NWB + press_NWT + press_SEB + press_SET + press_SWB + press_SWT) * c1o8;
	  //dx   = ( press_NEB + press_NET - press_NWB - press_NWT + press_SEB + press_SET - press_SWB - press_SWT) * c1o4;
	  //dy   = ( press_NEB + press_NET + press_NWB + press_NWT - press_SEB - press_SET - press_SWB - press_SWT) * c1o4;
	  //dz   = (-press_NEB + press_NET - press_NWB + press_NWT - press_SEB + press_SET - press_SWB + press_SWT) * c1o4;
	  //dxy  = ( press_NEB + press_NET - press_NWB - press_NWT - press_SEB - press_SET + press_SWB + press_SWT) * c1o2;
	  //dxz  = (-press_NEB + press_NET + press_NWB - press_NWT - press_SEB + press_SET + press_SWB - press_SWT) * c1o2;
	  //dyz  = (-press_NEB + press_NET - press_NWB + press_NWT + press_SEB - press_SET + press_SWB - press_SWT) * c1o2;
	  //dxyz =  -press_NEB + press_NET + press_NWB - press_NWT + press_SEB - press_SET - press_SWB + press_SWT;
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //drho
	  d0   = ( ((drho_NEB + drho_SWT) + (drho_NWB + drho_SET)) + ((drho_SEB + drho_NWT) + (drho_SWB + drho_NET))) * c1o8;
	  dx   = ( ((drho_NEB - drho_SWT) + (drho_SEB - drho_NWT)) + ((drho_SET - drho_NWB) + (drho_NET - drho_SWB))) * c1o4;
	  dy   = ( ((drho_NEB - drho_SWT) + (drho_NWT - drho_SEB)) + ((drho_NWB - drho_SET) + (drho_NET - drho_SWB))) * c1o4;
	  dz   = ( ((drho_SWT - drho_NEB) + (drho_NET - drho_SWB)) + ((drho_SET - drho_NWB) + (drho_NWT - drho_SEB))) * c1o4;
	  dxy  = ( ((drho_NEB - drho_SET) + (drho_NET - drho_SEB)) + ((drho_SWT - drho_NWB) + (drho_SWB - drho_NWT))) * c1o2;
	  dxz  = ( ((drho_SWB - drho_NEB) + (drho_NET - drho_SWT)) + ((drho_NWB - drho_SEB) + (drho_SET - drho_NWT))) * c1o2;
	  dyz  = ( ((drho_NWT - drho_NEB) + (drho_NET - drho_NWB)) + ((drho_SEB - drho_SWT) + (drho_SWB - drho_SET))) * c1o2;
	  //d0   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT + drho_SEB + drho_SET + drho_SWB + drho_SWT) * c1o8;
	  //dx   = ( drho_NEB + drho_NET - drho_NWB - drho_NWT + drho_SEB + drho_SET - drho_SWB - drho_SWT) * c1o4;
	  //dy   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT - drho_SEB - drho_SET - drho_SWB - drho_SWT) * c1o4;
	  //dz   = (-drho_NEB + drho_NET - drho_NWB + drho_NWT - drho_SEB + drho_SET - drho_SWB + drho_SWT) * c1o4;
	  //dxy  = ( drho_NEB + drho_NET - drho_NWB - drho_NWT - drho_SEB - drho_SET + drho_SWB + drho_SWT) * c1o2;
	  //dxz  = (-drho_NEB + drho_NET + drho_NWB - drho_NWT - drho_SEB + drho_SET + drho_SWB - drho_SWT) * c1o2;
	  //dyz  = (-drho_NEB + drho_NET - drho_NWB + drho_NWT + drho_SEB - drho_SET + drho_SWB - drho_SWT) * c1o2;
	  //dxyz =  -drho_NEB + drho_NET + drho_NWB - drho_NWT + drho_SEB - drho_SET - drho_SWB + drho_SWT;
	  //d0   = zero;
	  //dx   = zero;
	  //dy   = zero;
	  //dz   = zero;
	  //dxy  = zero;
	  //dxz  = zero;
	  //dyz  = zero;
	  //dxyz = zero;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot 
	  //
      //
	  // x------x
	  // |      |
	  // |	 ---+--->X
	  // |		|  \
	  // x------x   \
	  //			off-vector
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
	  d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff*yoff*dxy + xoff*zoff*dxz + yoff*zoff*dyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //  FIX  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //AAAAAAAAAAAAHHHHHHHHHHHH!!!!! Mieser Test!!!
	  //b0= bx= by= bz= bxx= byy= bzz= bxy= bxz= byz= c0= cx= cy= cz= cxx= cyy= czz= cxy= cxz= cyz= axyz= bxyz= cxyz=zero;
	  //b0=zero;
	  //bx=zero;
	  //by=zero;
	  //bz=zero;
	  //bxx=zero;
	  //byy=zero;
	  //bzz=zero;
	  //bxy=zero;
	  //bxz=zero;
	  //byz=zero;
	  //c0=zero;
	  //cx=zero;
	  //cy=zero;
	  //cz=zero;
	  //cxx=zero;
	  //cyy=zero;
	  //czz=zero;
	  //cxy=zero;
	  //cxz=zero;
	  //cyz=zero;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	  
	  real mfcbb = c0o1;
	  real mfabb = c0o1;
	  real mfbcb = c0o1;
	  real mfbab = c0o1;
	  real mfbbc = c0o1;
	  real mfbba = c0o1;
	  real mfccb = c0o1;
	  real mfaab = c0o1;
	  real mfcab = c0o1;
	  real mfacb = c0o1;
	  real mfcbc = c0o1;
	  real mfaba = c0o1;
	  real mfcba = c0o1;
	  real mfabc = c0o1;
	  real mfbcc = c0o1;
	  real mfbaa = c0o1;
	  real mfbca = c0o1;
	  real mfbac = c0o1;
	  real mfbbb = c0o1;
	  real mfccc = c0o1;
	  real mfaac = c0o1;
	  real mfcac = c0o1;
	  real mfacc = c0o1;
	  real mfcca = c0o1;
	  real mfaaa = c0o1;
	  real mfcaa = c0o1;
	  real mfaca = c0o1;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real m0, m1, m2, oMdrho;
	  real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	  //real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
	  //real O3 = c2o1 - o;
	  //real residu, residutmp;
	  //residutmp = c0o1;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
	  real NeqOn = c1o1;//zero;//one;   //.... one = on ..... zero = off 
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //
	  //Position C 0., 0., 0.
	  //
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //x = 0.;
	  //y = 0.;
	  //z = 0.;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real mxoff = -xoff;
	  //real myoff = -yoff;
	  //real mzoff = -zoff;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //press = press_NET * (c1o8 - c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NWT * (c1o8 + c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SET * (c1o8 - c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SWT * (c1o8 + c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NEB * (c1o8 - c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_NWB * (c1o8 + c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SEB * (c1o8 - c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SWB * (c1o8 + c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff);
	  //drho  = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
	  press = d0;
	  vvx   = a0;
	  vvy   = b0;
	  vvz   = c0;

	  //mfaaa = drho;
	  //mfaaa = press + (ax+by+cz)/three;  //  1/3 = 2/3*(1/op-1/2)
	  mfaaa = press; // if drho is interpolated directly

	  vx2 = vvx*vvx;
	  vy2 = vvy*vvy;
	  vz2 = vvz*vvz;
	  oMdrho = c1o1;
	  //oMdrho = one - mfaaa;

	  //two
	  // linear combinations
	  real oP = o;// :(
	  mxxPyyPzz = mfaaa    -c2o3*(ax+by+cz)*eps_new/oP*(c1o1+press); 
	  //mxxMyy    = -c2o3*(ax - by)*eps_new/o;
	  //mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

	  //mfabb     = -c1o3 * (bz + cy)*eps_new/o;
	  //mfbab     = -c1o3 * (az + cx)*eps_new/o;
	  //mfbba     = -c1o3 * (ay + bx)*eps_new/o;
	  mxxMyy    = -c2o3*((ax - by)+kxxMyyAverage)*eps_new/o * (c1o1 + press);
	  mxxMzz    = -c2o3*((ax - cz)+kxxMzzAverage)*eps_new/o * (c1o1 + press);

	  mfabb     = -c1o3 * ((bz + cy)+kyzAverage)*eps_new/o * (c1o1 + press);
	  mfbab     = -c1o3 * ((az + cx)+kxzAverage)*eps_new/o * (c1o1 + press);
	  mfbba     = -c1o3 * ((ay + bx)+kxyAverage)*eps_new/o * (c1o1 + press);

	  
	  // linear combinations back
	  mfcaa = c1o3 * (       mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaca = c1o3 * (-c2o1 * mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaac = c1o3 * (       mxxMyy - c2o1 * mxxMzz + mxxPyyPzz) * NeqOn;

	  //3.
	  // linear combinations
	  //residu = residutmp * (ayz + bxz + cxy );
	  //mfbbb = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mfbbb = c0o1;

	  //residu = residutmp * (axy + two*bxx + two*bzz + cyz );
	  //residu = -(c1o9*(axy - 2*bxx - 2*bzz + cyz ));
	  //mxxyPyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxyPyzz = c0o1;

	  //residu = residutmp * (axy + two*bxx - two*bzz - cyz );
	  //residu = c1o9*(axy - 2*bxx + 2*bzz - cyz );
	  //mxxyMyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxyMyzz = c0o1;

	  //residu = residutmp * (axz + byz + two*cxx + two*cyy );
	  //residu = -(c1o9*(axz + byz - 2*cxx - 2*cyy ));
	  //mxxzPyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxzPyyz = c0o1;

	  //residu = residutmp * (axz - byz + two*cxx - two*cyy );
	  //residu = c1o9*(axz - byz - 2*cxx + 2*cyy );
	  //mxxzMyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxxzMyyz = c0o1;

	  //residu = residutmp * (two*ayy + two*azz + bxy + cxz );
	  //residu = c1o9*(2*ayy + 2*azz - bxy - cxz );
	  //mxyyPxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxyyPxzz = c0o1;

	  //residu = residutmp * (two*ayy - two*azz + bxy - cxz );
	  //residu = c1o9*(-2*ayy + 2*azz + bxy - cxz );
	  //mxyyMxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));
	  mxyyMxzz = c0o1;

	  // linear combinations back
	  mfcba = ( mxxyMyzz + mxxyPyzz) * c1o2;
	  mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
	  mfcab = ( mxxzMyyz + mxxzPyyz) * c1o2;
	  mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
	  mfbca = ( mxyyMxzz + mxyyPxzz) * c1o2;
	  mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

	  //4.
	  mfacc = mfaaa*c1o9; 
	  mfcac = mfacc; 
	  mfcca = mfacc; 
	  //5.

	  //6.
	  mfccc = mfaaa*c1o27;
	  ////////////////////////////////////////////////////////////////////////////////////
	  //back
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Z - Dir
	  m0 =  mfaac * c1o2 +      mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfaac        - c2o1 * mfaab *  vvz         +  mfaaa                * (c1o1 - vz2)              - c1o1 * oMdrho * vz2; 
	  m2 =  mfaac * c1o2 +      mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaaa = m0;
	  mfaab = m1;
	  mfaac = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfabc * c1o2 +      mfabb * (vvz - c1o2) + mfaba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfabc        - c2o1 * mfabb *  vvz         + mfaba * (c1o1 - vz2); 
	  m2 =  mfabc * c1o2 +      mfabb * (vvz + c1o2) + mfaba * (     vz2 + vvz) * c1o2;
	  mfaba = m0;
	  mfabb = m1;
	  mfabc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfacb *  vvz         +  mfaca                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfacc * c1o2 +      mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaca = m0;
	  mfacb = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbac * c1o2 +      mfbab * (vvz - c1o2) + mfbaa * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbac        - c2o1 * mfbab *  vvz         + mfbaa * (c1o1 - vz2); 
	  m2 =  mfbac * c1o2 +      mfbab * (vvz + c1o2) + mfbaa * (     vz2 + vvz) * c1o2;
	  mfbaa = m0;
	  mfbab = m1;
	  mfbac = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbbc * c1o2 +      mfbbb * (vvz - c1o2) + mfbba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbbc        - c2o1 * mfbbb *  vvz         + mfbba * (c1o1 - vz2); 
	  m2 =  mfbbc * c1o2 +      mfbbb * (vvz + c1o2) + mfbba * (     vz2 + vvz) * c1o2;
	  mfbba = m0;
	  mfbbb = m1;
	  mfbbc = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbcb * (vvz - c1o2) + mfbca * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbcb *  vvz         + mfbca * (c1o1 - vz2); 
	  m2 =  mfbcc * c1o2 +      mfbcb * (vvz + c1o2) + mfbca * (     vz2 + vvz) * c1o2;
	  mfbca = m0;
	  mfbcb = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfcab *  vvz         +  mfcaa                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfcac * c1o2 +      mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcaa = m0;
	  mfcab = m1;
	  mfcac = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfcbb * (vvz - c1o2) + mfcba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfcbb *  vvz         + mfcba * (c1o1 - vz2); 
	  m2 =  mfcbc * c1o2 +      mfcbb * (vvz + c1o2) + mfcba * (     vz2 + vvz) * c1o2;
	  mfcba = m0;
	  mfcbb = m1;
	  mfcbc = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfccb *  vvz         +  mfcca                  * (c1o1 - vz2)              - c1o9 * oMdrho * vz2; 
	  m2 =  mfccc * c1o2 +      mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcca = m0;
	  mfccb = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Y - Dir
	  m0 =  mfaca * c1o2 +      mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfaca        - c2o1 * mfaba *  vvy         +  mfaaa                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfaca * c1o2 +      mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaaa = m0;
	  mfaba = m1;
	  mfaca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacb * c1o2 +      mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacb        - c2o1 * mfabb *  vvy         +  mfaab                  * (c1o1 - vy2)              - c2o3 * oMdrho * vy2; 
	  m2 =  mfacb * c1o2 +      mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaab = m0;
	  mfabb = m1;
	  mfacb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfabc *  vvy         +  mfaac                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfacc * c1o2 +      mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaac = m0;
	  mfabc = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbca * c1o2 +      mfbba * (vvy - c1o2) + mfbaa * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbca        - c2o1 * mfbba *  vvy         + mfbaa * (c1o1 - vy2); 
	  m2 =  mfbca * c1o2 +      mfbba * (vvy + c1o2) + mfbaa * (     vy2 + vvy) * c1o2;
	  mfbaa = m0;
	  mfbba = m1;
	  mfbca = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcb * c1o2 +      mfbbb * (vvy - c1o2) + mfbab * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcb        - c2o1 * mfbbb *  vvy         + mfbab * (c1o1 - vy2); 
	  m2 =  mfbcb * c1o2 +      mfbbb * (vvy + c1o2) + mfbab * (     vy2 + vvy) * c1o2;
	  mfbab = m0;
	  mfbbb = m1;
	  mfbcb = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbbc * (vvy - c1o2) + mfbac * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbbc *  vvy         + mfbac * (c1o1 - vy2); 
	  m2 =  mfbcc * c1o2 +      mfbbc * (vvy + c1o2) + mfbac * (     vy2 + vvy) * c1o2;
	  mfbac = m0;
	  mfbbc = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfcba *  vvy         +  mfcaa                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfcca * c1o2 +      mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcaa = m0;
	  mfcba = m1;
	  mfcca = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfcbb *  vvy         +  mfcab                  * (c1o1 - vy2)              - c2o9 * oMdrho * vy2; 
	  m2 =  mfccb * c1o2 +      mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcab = m0;
	  mfcbb = m1;
	  mfccb = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfcbc *  vvy         +  mfcac                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfccc * c1o2 +      mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcac = m0;
	  mfcbc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // X - Dir
	  m0 =  mfcaa * c1o2 +      mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcaa        - c2o1 * mfbaa *  vvx         +  mfaaa                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcaa * c1o2 +      mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaaa = m0;
	  mfbaa = m1;
	  mfcaa = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcba * c1o2 +      mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcba        - c2o1 * mfbba *  vvx         +  mfaba                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcba * c1o2 +      mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaba = m0;
	  mfbba = m1;
	  mfcba = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfbca *  vvx         +  mfaca                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcca * c1o2 +      mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaca = m0;
	  mfbca = m1;
	  mfcca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcab * c1o2 +      mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcab        - c2o1 * mfbab *  vvx         +  mfaab                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcab * c1o2 +      mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaab = m0;
	  mfbab = m1;
	  mfcab = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbb * c1o2 +      mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbb        - c2o1 * mfbbb *  vvx         +  mfabb                  * (c1o1 - vx2)              - c4o9 * oMdrho * vx2; 
	  m2 =  mfcbb * c1o2 +      mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabb = m0;
	  mfbbb = m1;
	  mfcbb = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfbcb *  vvx         +  mfacb                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfccb * c1o2 +      mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacb = m0;
	  mfbcb = m1;
	  mfccb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfbac *  vvx         +  mfaac                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcac * c1o2 +      mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaac = m0;
	  mfbac = m1;
	  mfcac = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfbbc *  vvx         +  mfabc                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcbc * c1o2 +      mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabc = m0;
	  mfbbc = m1;
	  mfcbc = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfbcc *  vvx         +  mfacc                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfccc * c1o2 +      mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacc = m0;
	  mfbcc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////
	  //index 0
	  kzero= posC[k];
	  kw   = neighborCX[kzero];
	  ks   = neighborCY[kzero];
	  kb   = neighborCZ[kzero];
	  ksw  = neighborCY[kw];
	  kbw  = neighborCZ[kw];
	  kbs  = neighborCZ[ks];
	  kbsw = neighborCZ[ksw];
	  ////////////////////////////////////////////////////////////////////////////////////


	  ////////////////////////////////////////////////////////////////////////////////////
	  feC[kzero]    = mfcbb;                                                                 
	  fwC[kw]       = mfabb;                                                               
	  fnC[kzero]    = mfbcb;
	  fsC[ks]       = mfbab;
	  ftC[kzero]    = mfbbc;
	  fbC[kb]       = mfbba;
	  fneC[kzero]   = mfccb;
	  fswC[ksw]     = mfaab;
	  fseC[ks]      = mfcab;
	  fnwC[kw]      = mfacb;
	  fteC[kzero]   = mfcbc;
	  fbwC[kbw]     = mfaba;
	  fbeC[kb]      = mfcba;
	  ftwC[kw]      = mfabc;
	  ftnC[kzero]   = mfbcc;
	  fbsC[kbs]     = mfbaa;
	  fbnC[kb]      = mfbca;
	  ftsC[ks]      = mfbac;
	  fzeroC[kzero] = mfbbb;
	  ftneC[kzero]  = mfccc;
	  ftseC[ks]     = mfcac;
	  fbneC[kb]     = mfcca;
	  fbseC[kbs]    = mfcaa;
	  ftnwC[kw]     = mfacc;
	  ftswC[ksw]    = mfaac;
	  fbnwC[kbw]    = mfaca;
	  fbswC[kbsw]   = mfaaa;
	  ////////////////////////////////////////////////////////////////////////////////////
   }
}
//////////////////////////////////////////////////////////////////////////






















































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC_NSPress_27(   real* DC, 
												 real* DF, 
												 unsigned int* neighborCX,
												 unsigned int* neighborCY,
												 unsigned int* neighborCZ,
												 unsigned int* neighborFX,
												 unsigned int* neighborFY,
												 unsigned int* neighborFZ,
												 unsigned int size_MatC, 
												 unsigned int size_MatF, 
												 bool isEvenTimestep,
												 unsigned int* posC, 
												 unsigned int* posFSWB, 
												 unsigned int kFC, 
												 real omCoarse, 
												 real omFine, 
												 real nu, 
												 unsigned int nxC, 
												 unsigned int nyC, 
												 unsigned int nxF, 
												 unsigned int nyF,
												 OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   //real op = one;
   //real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   real        press;//,drho,vx1,vx2,vx3;
   real        press_SWT,drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        press_NWT,drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        press_NET,drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        press_SET,drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        press_SWB,drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        press_NWB,drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        press_NEB,drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        press_SEB,drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   //real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  press_SWB = (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
					drho_SWB-(vx1_SWB*vx1_SWB+vx2_SWB*vx2_SWB+vx3_SWB*vx3_SWB)* (c1o1+drho_SWB)) * c1o2+drho_SWB;

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWB*vx2_SWB));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWB*vx3_SWB));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWB*vx3_SWB));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB));

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_SWT= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_SWT-(vx1_SWT*vx1_SWT+vx2_SWT*vx2_SWT+vx3_SWT*vx3_SWT)* (c1o1+drho_SWT)) * c1o2+drho_SWT;

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWT*vx2_SWT));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWT*vx3_SWT));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWT*vx3_SWT));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT));

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_SET= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_SET-(vx1_SET*vx1_SET+vx2_SET*vx2_SET+vx3_SET*vx3_SET)* (c1o1+drho_SET)) * c1o2+drho_SET;

      kxyFromfcNEQ_SET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SET*vx2_SET));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SET*vx3_SET));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SET*vx3_SET));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SET*vx1_SET-vx2_SET*vx2_SET));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SET*vx1_SET-vx3_SET*vx3_SET));

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_SEB= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_SEB-(vx1_SEB*vx1_SEB+vx2_SEB*vx2_SEB+vx3_SEB*vx3_SEB)* (c1o1+drho_SEB)) * c1o2+drho_SEB;

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SEB*vx2_SEB));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SEB*vx3_SEB));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SEB*vx3_SEB));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB));

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NWB= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NWB-(vx1_NWB*vx1_NWB+vx2_NWB*vx2_NWB+vx3_NWB*vx3_NWB)* (c1o1+drho_NWB)) * c1o2+drho_NWB;

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWB*vx2_NWB));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWB*vx3_NWB));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWB*vx3_NWB));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB));

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NWT= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NWT-(vx1_NWT*vx1_NWT+vx2_NWT*vx2_NWT+vx3_NWT*vx3_NWT)* (c1o1+drho_NWT)) * c1o2+drho_NWT;

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWT*vx2_NWT));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWT*vx3_NWT));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWT*vx3_NWT));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT));

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NET= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NET-(vx1_NET*vx1_NET+vx2_NET*vx2_NET+vx3_NET*vx3_NET)* (c1o1+drho_NET)) * c1o2+drho_NET;

      kxyFromfcNEQ_NET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NET*vx2_NET));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NET*vx3_NET));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NET*vx3_NET));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NET*vx1_NET-vx2_NET*vx2_NET));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NET*vx1_NET-vx3_NET*vx3_NET));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NEB= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NEB-(vx1_NEB*vx1_NEB+vx2_NEB*vx2_NEB+vx3_NEB*vx3_NEB)* (c1o1+drho_NEB)) * c1o2+drho_NEB;

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NEB*vx2_NEB));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NEB*vx3_NEB));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NEB*vx3_NEB));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB));

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
      a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_NWT + 
			 c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_NWT + 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_SWT + 
			 c8o1*vx1_NEB + c8o1*vx1_NET + c8o1*vx1_NWB + c8o1*vx1_NWT + c8o1*vx1_SEB + 
			 c8o1*vx1_SET + c8o1*vx1_SWB + c8o1*vx1_SWT + c2o1*vx2_NEB + c2o1*vx2_NET - 
			 c2o1*vx2_NWB - c2o1*vx2_NWT - c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + 
			 c2o1*vx2_SWT - c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      b0 = (c2o1*kxxMyyFromfcNEQ_NEB + c2o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_NWT - 
			 c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET + c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_NWT - 
			 c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT + 
			 c8o1*vx2_NEB + c8o1*vx2_NET + c8o1*vx2_NWB + c8o1*vx2_NWT + 
			 c8o1*vx2_SEB + c8o1*vx2_SET + c8o1*vx2_SWB + c8o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
			 c2o1*kxxMzzFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_NWT - 
			 c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_NWT - 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_SWT - 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT + 
			 c8o1*vx3_NEB + c8o1*vx3_NET + c8o1*vx3_NWB + c8o1*vx3_NWT + 
			 c8o1*vx3_SEB + c8o1*vx3_SET + c8o1*vx3_SWB + c8o1*vx3_SWT)/c64o1;
      ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + c2o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
			 kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx1_NEB - c2o1*vx1_NET + c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB + c2o1*vx1_SET - c2o1*vx1_SWB - c2o1*vx1_SWT)/c8o1;
      cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB - c2o1*vx1_NET - c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB - c2o1*vx1_SET - c2o1*vx1_SWB + c2o1*vx1_SWT)/c8o1;
      ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
			 kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB - c2o1*vx2_SWT)/c8o1;
      byy= (-c2o1*kxxMyyFromfcNEQ_NEB - c2o1*kxxMyyFromfcNEQ_NET - c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_NWT + 
			 c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB + c2o1*vx2_SWT)/c8o1;
      az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/c4o1;
      bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/c4o1;
      cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/c4o1;
      azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
			 c2o1*kxxMzzFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_NWT + 
			 c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT)/c16o1;
      axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/c2o1;
      bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/c2o1;
      cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/c2o1;
      axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;



      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot
      //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //  FIX  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real mfcbb = c0o1;
	  real mfabb = c0o1;
	  real mfbcb = c0o1;
	  real mfbab = c0o1;
	  real mfbbc = c0o1;
	  real mfbba = c0o1;
	  real mfccb = c0o1;
	  real mfaab = c0o1;
	  real mfcab = c0o1;
	  real mfacb = c0o1;
	  real mfcbc = c0o1;
	  real mfaba = c0o1;
	  real mfcba = c0o1;
	  real mfabc = c0o1;
	  real mfbcc = c0o1;
	  real mfbaa = c0o1;
	  real mfbca = c0o1;
	  real mfbac = c0o1;
	  real mfbbb = c0o1;
	  real mfccc = c0o1;
	  real mfaac = c0o1;
	  real mfcac = c0o1;
	  real mfacc = c0o1;
	  real mfcca = c0o1;
	  real mfaaa = c0o1;
	  real mfcaa = c0o1;
	  real mfaca = c0o1;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
	  real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	  real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
	  real O3 = c2o1 - o;
	  real residu, residutmp;
	  residutmp = c0o1;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //
	  //Position C 0., 0., 0.
	  //
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //x = 0.;
	  //y = 0.;
	  //z = 0.;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  press = (press_NET + press_NWT + press_SET + press_SWT + press_NEB + press_NWB + press_SEB + press_SWB) * c1o8;
	  
	  if(xoff!=c0o1 || yoff!=c0o1 || zoff!=c0o1){
		  real dx, dy, dz;
		  dx=c2o1*nu*(axx+ayy+azz);
		  dy=c2o1*nu*(bxx+byy+bzz);
		  dz=c2o1*nu*(cxx+cyy+czz);
		  press = press + xoff * dx + yoff * dy + zoff * dz;
	  }
	  //drho  = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
	  vvx = a0;
	  vvy = b0;
	  vvz = c0;

	  //mfaaa = drho;
	  mfaaa = press + (ax+by+cz)/c3o1;  //  1/3 = 2/3*(1/op-1/2)

	  vx2 = vvx*vvx;
	  vy2 = vvy*vvy;
	  vz2 = vvz*vvz;
	  oMdrho = c1o1 - mfaaa;

	  //two
	  // linear combinations
	  mxxPyyPzz = mfaaa;
	  mxxMyy    = -c2o3*(ax - by)*eps_new/o;
	  mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

	  mfabb     = -c1o3 * (bz + cy)*eps_new/o;
	  mfbab     = -c1o3 * (az + cx)*eps_new/o;
	  mfbba     = -c1o3 * (ay + bx)*eps_new/o;

	  // linear combinations back
	  mfcaa = c1o3 * (       mxxMyy +      mxxMzz + mxxPyyPzz);
	  mfaca = c1o3 * (-c2o1 *  mxxMyy +      mxxMzz + mxxPyyPzz);
	  mfaac = c1o3 * (       mxxMyy - c2o1 * mxxMzz + mxxPyyPzz);

	  //3.
	  // linear combinations
	  residu = residutmp * (ayz + bxz + cxy );
	  mfbbb = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axy + c2o1*bxx + c2o1*bzz + cyz );
	  //residu = -(c1o9*(axy - 2*bxx - 2*bzz + cyz ));
	  mxxyPyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axy + c2o1*bxx - c2o1*bzz - cyz );
	  //residu = c1o9*(axy - 2*bxx + 2*bzz - cyz );
	  mxxyMyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axz + byz + c2o1*cxx + c2o1*cyy );
	  //residu = -(c1o9*(axz + byz - 2*cxx - 2*cyy ));
	  mxxzPyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axz - byz + c2o1*cxx - c2o1*cyy );
	  //residu = c1o9*(axz - byz - 2*cxx + 2*cyy );
	  mxxzMyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (c2o1*ayy + c2o1*azz + bxy + cxz );
	  //residu = c1o9*(2*ayy + 2*azz - bxy - cxz );
	  mxyyPxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (c2o1*ayy - c2o1*azz + bxy - cxz );
	  //residu = c1o9*(-2*ayy + 2*azz + bxy - cxz );
	  mxyyMxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  // linear combinations back
	  mfcba = ( mxxyMyzz + mxxyPyzz) * c1o2;
	  mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
	  mfcab = ( mxxzMyyz + mxxzPyyz) * c1o2;
	  mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
	  mfbca = ( mxyyMxzz + mxyyPxzz) * c1o2;
	  mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

	  //4.
	  mfacc = mfaaa*c1o9; 
	  mfcac = mfacc; 
	  mfcca = mfacc; 
	  //5.

	  //6.
	  mfccc = mfaaa*c1o27;
	  ////////////////////////////////////////////////////////////////////////////////////
	  //back
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Z - Dir
	  m0 =  mfaac * c1o2 +      mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfaac        - c2o1 * mfaab *  vvz         +  mfaaa                * (c1o1 - vz2)              - c1o1 * oMdrho * vz2; 
	  m2 =  mfaac * c1o2 +      mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaaa = m0;
	  mfaab = m1;
	  mfaac = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfabc * c1o2 +      mfabb * (vvz - c1o2) + mfaba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfabc        - c2o1 * mfabb *  vvz         + mfaba * (c1o1 - vz2); 
	  m2 =  mfabc * c1o2 +      mfabb * (vvz + c1o2) + mfaba * (     vz2 + vvz) * c1o2;
	  mfaba = m0;
	  mfabb = m1;
	  mfabc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfacb *  vvz         +  mfaca                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfacc * c1o2 +      mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaca = m0;
	  mfacb = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbac * c1o2 +      mfbab * (vvz - c1o2) + mfbaa * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbac        - c2o1 * mfbab *  vvz         + mfbaa * (c1o1 - vz2); 
	  m2 =  mfbac * c1o2 +      mfbab * (vvz + c1o2) + mfbaa * (     vz2 + vvz) * c1o2;
	  mfbaa = m0;
	  mfbab = m1;
	  mfbac = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbbc * c1o2 +      mfbbb * (vvz - c1o2) + mfbba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbbc        - c2o1 * mfbbb *  vvz         + mfbba * (c1o1 - vz2); 
	  m2 =  mfbbc * c1o2 +      mfbbb * (vvz + c1o2) + mfbba * (     vz2 + vvz) * c1o2;
	  mfbba = m0;
	  mfbbb = m1;
	  mfbbc = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbcb * (vvz - c1o2) + mfbca * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbcb *  vvz         + mfbca * (c1o1 - vz2); 
	  m2 =  mfbcc * c1o2 +      mfbcb * (vvz + c1o2) + mfbca * (     vz2 + vvz) * c1o2;
	  mfbca = m0;
	  mfbcb = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfcab *  vvz         +  mfcaa                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfcac * c1o2 +      mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcaa = m0;
	  mfcab = m1;
	  mfcac = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfcbb * (vvz - c1o2) + mfcba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfcbb *  vvz         + mfcba * (c1o1 - vz2); 
	  m2 =  mfcbc * c1o2 +      mfcbb * (vvz + c1o2) + mfcba * (     vz2 + vvz) * c1o2;
	  mfcba = m0;
	  mfcbb = m1;
	  mfcbc = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfccb *  vvz         +  mfcca                  * (c1o1 - vz2)              - c1o9 * oMdrho * vz2; 
	  m2 =  mfccc * c1o2 +      mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcca = m0;
	  mfccb = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Y - Dir
	  m0 =  mfaca * c1o2 +      mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfaca        - c2o1 * mfaba *  vvy         +  mfaaa                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfaca * c1o2 +      mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaaa = m0;
	  mfaba = m1;
	  mfaca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacb * c1o2 +      mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacb        - c2o1 * mfabb *  vvy         +  mfaab                  * (c1o1 - vy2)              - c2o3 * oMdrho * vy2; 
	  m2 =  mfacb * c1o2 +      mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaab = m0;
	  mfabb = m1;
	  mfacb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfabc *  vvy         +  mfaac                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfacc * c1o2 +      mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaac = m0;
	  mfabc = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbca * c1o2 +      mfbba * (vvy - c1o2) + mfbaa * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbca        - c2o1 * mfbba *  vvy         + mfbaa * (c1o1 - vy2); 
	  m2 =  mfbca * c1o2 +      mfbba * (vvy + c1o2) + mfbaa * (     vy2 + vvy) * c1o2;
	  mfbaa = m0;
	  mfbba = m1;
	  mfbca = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcb * c1o2 +      mfbbb * (vvy - c1o2) + mfbab * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcb        - c2o1 * mfbbb *  vvy         + mfbab * (c1o1 - vy2); 
	  m2 =  mfbcb * c1o2 +      mfbbb * (vvy + c1o2) + mfbab * (     vy2 + vvy) * c1o2;
	  mfbab = m0;
	  mfbbb = m1;
	  mfbcb = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbbc * (vvy - c1o2) + mfbac * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbbc *  vvy         + mfbac * (c1o1 - vy2); 
	  m2 =  mfbcc * c1o2 +      mfbbc * (vvy + c1o2) + mfbac * (     vy2 + vvy) * c1o2;
	  mfbac = m0;
	  mfbbc = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfcba *  vvy         +  mfcaa                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfcca * c1o2 +      mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcaa = m0;
	  mfcba = m1;
	  mfcca = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfcbb *  vvy         +  mfcab                  * (c1o1 - vy2)              - c2o9 * oMdrho * vy2; 
	  m2 =  mfccb * c1o2 +      mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcab = m0;
	  mfcbb = m1;
	  mfccb = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfcbc *  vvy         +  mfcac                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfccc * c1o2 +      mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcac = m0;
	  mfcbc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // X - Dir
	  m0 =  mfcaa * c1o2 +      mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcaa        - c2o1 * mfbaa *  vvx         +  mfaaa                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcaa * c1o2 +      mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaaa = m0;
	  mfbaa = m1;
	  mfcaa = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcba * c1o2 +      mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcba        - c2o1 * mfbba *  vvx         +  mfaba                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcba * c1o2 +      mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaba = m0;
	  mfbba = m1;
	  mfcba = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfbca *  vvx         +  mfaca                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcca * c1o2 +      mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaca = m0;
	  mfbca = m1;
	  mfcca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcab * c1o2 +      mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcab        - c2o1 * mfbab *  vvx         +  mfaab                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcab * c1o2 +      mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaab = m0;
	  mfbab = m1;
	  mfcab = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbb * c1o2 +      mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbb        - c2o1 * mfbbb *  vvx         +  mfabb                  * (c1o1 - vx2)              - c4o9 * oMdrho * vx2; 
	  m2 =  mfcbb * c1o2 +      mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabb = m0;
	  mfbbb = m1;
	  mfcbb = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfbcb *  vvx         +  mfacb                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfccb * c1o2 +      mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacb = m0;
	  mfbcb = m1;
	  mfccb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfbac *  vvx         +  mfaac                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcac * c1o2 +      mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaac = m0;
	  mfbac = m1;
	  mfcac = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfbbc *  vvx         +  mfabc                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcbc * c1o2 +      mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabc = m0;
	  mfbbc = m1;
	  mfcbc = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfbcc *  vvx         +  mfacc                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfccc * c1o2 +      mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacc = m0;
	  mfbcc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////
	  //index 0
	  kzero= posC[k];
	  kw   = neighborCX[kzero];
	  ks   = neighborCY[kzero];
	  kb   = neighborCZ[kzero];
	  ksw  = neighborCY[kw];
	  kbw  = neighborCZ[kw];
	  kbs  = neighborCZ[ks];
	  kbsw = neighborCZ[ksw];
	  ////////////////////////////////////////////////////////////////////////////////////


	  ////////////////////////////////////////////////////////////////////////////////////
	  feC[kzero]    = mfcbb;                                                                 
	  fwC[kw]       = mfabb;                                                               
	  fnC[kzero]    = mfbcb;
	  fsC[ks]       = mfbab;
	  ftC[kzero]    = mfbbc;
	  fbC[kb]       = mfbba;
	  fneC[kzero]   = mfccb;
	  fswC[ksw]     = mfaab;
	  fseC[ks]      = mfcab;
	  fnwC[kw]      = mfacb;
	  fteC[kzero]   = mfcbc;
	  fbwC[kbw]     = mfaba;
	  fbeC[kb]      = mfcba;
	  ftwC[kw]      = mfabc;
	  ftnC[kzero]   = mfbcc;
	  fbsC[kbs]     = mfbaa;
	  fbnC[kb]      = mfbca;
	  ftsC[ks]      = mfbac;
	  fzeroC[kzero] = mfbbb;
	  ftneC[kzero]  = mfccc;
	  ftseC[ks]     = mfcac;
	  fbneC[kb]     = mfcca;
	  fbseC[kbs]    = mfcaa;
	  ftnwC[kw]     = mfacc;
	  ftswC[ksw]    = mfaac;
	  fbnwC[kbw]    = mfaca;
	  fbswC[kbsw]   = mfaaa;
	  ////////////////////////////////////////////////////////////////////////////////////
   }
}
//////////////////////////////////////////////////////////////////////////



































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC_Fix_27(   real* DC, 
                                             real* DF, 
                                             unsigned int* neighborCX,
                                             unsigned int* neighborCY,
                                             unsigned int* neighborCZ,
                                             unsigned int* neighborFX,
                                             unsigned int* neighborFY,
                                             unsigned int* neighborFZ,
                                             unsigned int size_MatC, 
                                             unsigned int size_MatF, 
                                             bool isEvenTimestep,
                                             unsigned int* posC, 
                                             unsigned int* posFSWB, 
                                             unsigned int kFC, 
                                             real omCoarse, 
                                             real omFine, 
                                             real nu, 
                                             unsigned int nxC, 
                                             unsigned int nyC, 
                                             unsigned int nxF, 
                                             unsigned int nyF,
                                             OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   //real op = one;
   //real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   real        press;//,drho,vx1,vx2,vx3;
   real        /*press_SWT,*/drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        /*press_NWT,*/drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        /*press_NET,*/drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        /*press_SET,*/drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        /*press_SWB,*/drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        /*press_NWB,*/drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        /*press_NEB,*/drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        /*press_SEB,*/drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   //real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;
   real        d0, dx, dy, dz, dxy, dxz, dyz/*, dxyz*/;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  //press_SWB = (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
			//		drho_SWB-(vx1_SWB*vx1_SWB+vx2_SWB*vx2_SWB+vx3_SWB*vx3_SWB)* (one+drho_SWB)) * c1o2+drho_SWB;

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWB*vx2_SWB));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWB*vx3_SWB));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWB*vx3_SWB));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB));

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      //press_SWT= (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
      //   drho_SWT-(vx1_SWT*vx1_SWT+vx2_SWT*vx2_SWT+vx3_SWT*vx3_SWT)* (one+drho_SWT)) * c1o2+drho_SWT;

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWT*vx2_SWT));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWT*vx3_SWT));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWT*vx3_SWT));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT));

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      //press_SET= (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
      //   drho_SET-(vx1_SET*vx1_SET+vx2_SET*vx2_SET+vx3_SET*vx3_SET)* (one+drho_SET)) * c1o2+drho_SET;

      kxyFromfcNEQ_SET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SET*vx2_SET));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SET*vx3_SET));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SET*vx3_SET));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SET*vx1_SET-vx2_SET*vx2_SET));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SET*vx1_SET-vx3_SET*vx3_SET));

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      //press_SEB= (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
      //   drho_SEB-(vx1_SEB*vx1_SEB+vx2_SEB*vx2_SEB+vx3_SEB*vx3_SEB)* (one+drho_SEB)) * c1o2+drho_SEB;

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SEB*vx2_SEB));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SEB*vx3_SEB));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SEB*vx3_SEB));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB));

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      //press_NWB= (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
      //   drho_NWB-(vx1_NWB*vx1_NWB+vx2_NWB*vx2_NWB+vx3_NWB*vx3_NWB)* (one+drho_NWB)) * c1o2+drho_NWB;

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWB*vx2_NWB));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWB*vx3_NWB));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWB*vx3_NWB));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB));

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      //press_NWT= (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
      //   drho_NWT-(vx1_NWT*vx1_NWT+vx2_NWT*vx2_NWT+vx3_NWT*vx3_NWT)* (one+drho_NWT)) * c1o2+drho_NWT;

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWT*vx2_NWT));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWT*vx3_NWT));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWT*vx3_NWT));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT));

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      //press_NET= (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
      //   drho_NET-(vx1_NET*vx1_NET+vx2_NET*vx2_NET+vx3_NET*vx3_NET)* (one+drho_NET)) * c1o2+drho_NET;

      kxyFromfcNEQ_NET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NET*vx2_NET));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NET*vx3_NET));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NET*vx3_NET));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NET*vx1_NET-vx2_NET*vx2_NET));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NET*vx1_NET-vx3_NET*vx3_NET));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      //press_NEB= (f_E+f_W+f_N+f_S+f_T+f_B+two*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+three*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
      //   drho_NEB-(vx1_NEB*vx1_NEB+vx2_NEB*vx2_NEB+vx3_NEB*vx3_NEB)* (one+drho_NEB)) * c1o2+drho_NEB;

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NEB*vx2_NEB));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NEB*vx3_NEB));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NEB*vx3_NEB));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB));

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //kxyFromfcNEQ_SWB    = zero;
	  //kyzFromfcNEQ_SWB    = zero;
	  //kxzFromfcNEQ_SWB    = zero;
	  //kxxMyyFromfcNEQ_SWB = zero;
	  //kxxMzzFromfcNEQ_SWB = zero;
	  //kxyFromfcNEQ_SWT    = zero;
	  //kyzFromfcNEQ_SWT    = zero;
	  //kxzFromfcNEQ_SWT    = zero;
	  //kxxMyyFromfcNEQ_SWT = zero;
	  //kxxMzzFromfcNEQ_SWT = zero;
	  //kxyFromfcNEQ_SET    = zero;
	  //kyzFromfcNEQ_SET    = zero;
	  //kxzFromfcNEQ_SET    = zero;
	  //kxxMyyFromfcNEQ_SET = zero;
	  //kxxMzzFromfcNEQ_SET = zero;
	  //kxyFromfcNEQ_SEB    = zero;
	  //kyzFromfcNEQ_SEB    = zero;
	  //kxzFromfcNEQ_SEB    = zero;
	  //kxxMyyFromfcNEQ_SEB = zero;
	  //kxxMzzFromfcNEQ_SEB = zero;
	  //kxyFromfcNEQ_NWB    = zero;
	  //kyzFromfcNEQ_NWB    = zero;
	  //kxzFromfcNEQ_NWB    = zero;
	  //kxxMyyFromfcNEQ_NWB = zero;
	  //kxxMzzFromfcNEQ_NWB = zero;
	  //kxyFromfcNEQ_NWT    = zero;
	  //kyzFromfcNEQ_NWT    = zero;
	  //kxzFromfcNEQ_NWT    = zero;
	  //kxxMyyFromfcNEQ_NWT = zero;
	  //kxxMzzFromfcNEQ_NWT = zero;
	  //kxyFromfcNEQ_NET    = zero;
	  //kyzFromfcNEQ_NET    = zero;
	  //kxzFromfcNEQ_NET    = zero;
	  //kxxMyyFromfcNEQ_NET = zero;
	  //kxxMzzFromfcNEQ_NET = zero;
	  //kxyFromfcNEQ_NEB    = zero;
	  //kyzFromfcNEQ_NEB    = zero;
	  //kxzFromfcNEQ_NEB    = zero;
	  //kxxMyyFromfcNEQ_NEB = zero;
	  //kxxMzzFromfcNEQ_NEB = zero;
      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
      a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_NWT + 
			 c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_NWT + 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_SWT + 
			 c8o1*vx1_NEB + c8o1*vx1_NET + c8o1*vx1_NWB + c8o1*vx1_NWT + c8o1*vx1_SEB + 
			 c8o1*vx1_SET + c8o1*vx1_SWB + c8o1*vx1_SWT + c2o1*vx2_NEB + c2o1*vx2_NET - 
			 c2o1*vx2_NWB - c2o1*vx2_NWT - c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + 
			 c2o1*vx2_SWT - c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      b0 = (c2o1*kxxMyyFromfcNEQ_NEB + c2o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_NWT - 
			 c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_SWT - 
			 kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET + c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_NWT - 
			 c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT + 
			 c8o1*vx2_NEB + c8o1*vx2_NET + c8o1*vx2_NWB + c8o1*vx2_NWT + 
			 c8o1*vx2_SEB + c8o1*vx2_SET + c8o1*vx2_SWB + c8o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
			 c2o1*kxxMzzFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_NWT - 
			 c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_NWT - 
			 c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_SWT - 
			 c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
			 c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT + 
			 c8o1*vx3_NEB + c8o1*vx3_NET + c8o1*vx3_NWB + c8o1*vx3_NWT + 
			 c8o1*vx3_SEB + c8o1*vx3_SET + c8o1*vx3_SWB + c8o1*vx3_SWT)/c64o1;
      ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
			 kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + c2o1*vx2_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
			 kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx1_NEB - c2o1*vx1_NET + c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB + c2o1*vx1_SET - c2o1*vx1_SWB - c2o1*vx1_SWT)/c8o1;
      cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB - c2o1*vx1_NET - c2o1*vx1_NWB + c2o1*vx1_NWT + 
			 c2o1*vx1_SEB - c2o1*vx1_SET - c2o1*vx1_SWB + c2o1*vx1_SWT)/c8o1;
      ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
			 kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB - c2o1*vx2_SWT)/c8o1;
      byy= (-c2o1*kxxMyyFromfcNEQ_NEB - c2o1*kxxMyyFromfcNEQ_NET - c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_NWT + 
			 c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_SWT + 
			 kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
			 kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
			 c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT - 
			 c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
			 c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB - c2o1*vx2_NWT - 
			 c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB + c2o1*vx2_SWT)/c8o1;
      az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/c4o1;
      bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/c4o1;
      cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/c4o1;
      azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
			 kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
			 c2o1*vx3_SEB - c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
			 kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
			 c2o1*vx3_NEB - c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
			 c2o1*vx3_SEB + c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
			 kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
			 c2o1*kxxMzzFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_NWT + 
			 c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_SWT - 
			 c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
			 c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
			 c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
			 c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT)/c16o1;
      axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/c2o1;
      bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/c2o1;
      cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/c2o1;
      axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real kxyAverage	 =(kxyFromfcNEQ_SWB+
							   kxyFromfcNEQ_SWT+
							   kxyFromfcNEQ_SET+
							   kxyFromfcNEQ_SEB+
							   kxyFromfcNEQ_NWB+
							   kxyFromfcNEQ_NWT+
							   kxyFromfcNEQ_NET+
							   kxyFromfcNEQ_NEB)*c1o8-(ay+bx);
	  real kyzAverage	 =(kyzFromfcNEQ_SWB+
							   kyzFromfcNEQ_SWT+
							   kyzFromfcNEQ_SET+
							   kyzFromfcNEQ_SEB+
							   kyzFromfcNEQ_NWB+
							   kyzFromfcNEQ_NWT+
							   kyzFromfcNEQ_NET+
							   kyzFromfcNEQ_NEB)*c1o8-(bz+cy);
	  real kxzAverage	 =(kxzFromfcNEQ_SWB+
							   kxzFromfcNEQ_SWT+
							   kxzFromfcNEQ_SET+
							   kxzFromfcNEQ_SEB+
							   kxzFromfcNEQ_NWB+
							   kxzFromfcNEQ_NWT+
							   kxzFromfcNEQ_NET+
							   kxzFromfcNEQ_NEB)*c1o8-(az+cx);
	  real kxxMyyAverage	 =(kxxMyyFromfcNEQ_SWB+
							   kxxMyyFromfcNEQ_SWT+
							   kxxMyyFromfcNEQ_SET+
							   kxxMyyFromfcNEQ_SEB+
							   kxxMyyFromfcNEQ_NWB+
							   kxxMyyFromfcNEQ_NWT+
							   kxxMyyFromfcNEQ_NET+
							   kxxMyyFromfcNEQ_NEB)*c1o8-(ax-by);
	  real kxxMzzAverage	 =(kxxMzzFromfcNEQ_SWB+
							   kxxMzzFromfcNEQ_SWT+
							   kxxMzzFromfcNEQ_SET+
							   kxxMzzFromfcNEQ_SEB+
							   kxxMzzFromfcNEQ_NWB+
							   kxxMzzFromfcNEQ_NWT+
							   kxxMzzFromfcNEQ_NET+
							   kxxMzzFromfcNEQ_NEB)*c1o8-(ax-cz);



	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////Press
	  //d0   = ( press_NEB + press_NET + press_NWB + press_NWT + press_SEB + press_SET + press_SWB + press_SWT) * c1o8;
	  //dx   = ( press_NEB + press_NET - press_NWB - press_NWT + press_SEB + press_SET - press_SWB - press_SWT) * c1o4;
	  //dy   = ( press_NEB + press_NET + press_NWB + press_NWT - press_SEB - press_SET - press_SWB - press_SWT) * c1o4;
	  //dz   = (-press_NEB + press_NET - press_NWB + press_NWT - press_SEB + press_SET - press_SWB + press_SWT) * c1o4;
	  //dxy  = ( press_NEB + press_NET - press_NWB - press_NWT - press_SEB - press_SET + press_SWB + press_SWT) * c1o2;
	  //dxz  = (-press_NEB + press_NET + press_NWB - press_NWT - press_SEB + press_SET + press_SWB - press_SWT) * c1o2;
	  //dyz  = (-press_NEB + press_NET - press_NWB + press_NWT + press_SEB - press_SET + press_SWB - press_SWT) * c1o2;
	  //dxyz =  -press_NEB + press_NET + press_NWB - press_NWT + press_SEB - press_SET - press_SWB + press_SWT;
	  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //drho
	  d0   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT + drho_SEB + drho_SET + drho_SWB + drho_SWT) * c1o8;
	  dx   = ( drho_NEB + drho_NET - drho_NWB - drho_NWT + drho_SEB + drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dy   = ( drho_NEB + drho_NET + drho_NWB + drho_NWT - drho_SEB - drho_SET - drho_SWB - drho_SWT) * c1o4;
	  dz   = (-drho_NEB + drho_NET - drho_NWB + drho_NWT - drho_SEB + drho_SET - drho_SWB + drho_SWT) * c1o4;
	  dxy  = ( drho_NEB + drho_NET - drho_NWB - drho_NWT - drho_SEB - drho_SET + drho_SWB + drho_SWT) * c1o2;
	  dxz  = (-drho_NEB + drho_NET + drho_NWB - drho_NWT - drho_SEB + drho_SET + drho_SWB - drho_SWT) * c1o2;
	  dyz  = (-drho_NEB + drho_NET - drho_NWB + drho_NWT + drho_SEB - drho_SET + drho_SWB - drho_SWT) * c1o2;
	  //dxyz =  -drho_NEB + drho_NET + drho_NWB - drho_NWT + drho_SEB - drho_SET - drho_SWB + drho_SWT;
	  //d0   = zero;
	  //dx   = zero;
	  //dy   = zero;
	  //dz   = zero;
	  //dxy  = zero;
	  //dxz  = zero;
	  //dyz  = zero;
	  //dxyz = zero;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot 
	  //
      //
	  // x------x
	  // |      |
	  // |	 ---+--->X
	  // |		|  \
	  // x------x   \
	  //			off-vector
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
	  d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff*yoff*dxy + xoff*zoff*dxz + yoff*zoff*dyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //  FIX  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //AAAAAAAAAAAAHHHHHHHHHHHH!!!!! Mieser Test!!!
	  //b0= bx= by= bz= bxx= byy= bzz= bxy= bxz= byz= c0= cx= cy= cz= cxx= cyy= czz= cxy= cxz= cyz= axyz= bxyz= cxyz=zero;
	  //b0=zero;
	  //bx=zero;
	  //by=zero;
	  //bz=zero;
	  //bxx=zero;
	  //byy=zero;
	  //bzz=zero;
	  //bxy=zero;
	  //bxz=zero;
	  //byz=zero;
	  //c0=zero;
	  //cx=zero;
	  //cy=zero;
	  //cz=zero;
	  //cxx=zero;
	  //cyy=zero;
	  //czz=zero;
	  //cxy=zero;
	  //cxz=zero;
	  //cyz=zero;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	  
	  real mfcbb = c0o1;
	  real mfabb = c0o1;
	  real mfbcb = c0o1;
	  real mfbab = c0o1;
	  real mfbbc = c0o1;
	  real mfbba = c0o1;
	  real mfccb = c0o1;
	  real mfaab = c0o1;
	  real mfcab = c0o1;
	  real mfacb = c0o1;
	  real mfcbc = c0o1;
	  real mfaba = c0o1;
	  real mfcba = c0o1;
	  real mfabc = c0o1;
	  real mfbcc = c0o1;
	  real mfbaa = c0o1;
	  real mfbca = c0o1;
	  real mfbac = c0o1;
	  real mfbbb = c0o1;
	  real mfccc = c0o1;
	  real mfaac = c0o1;
	  real mfcac = c0o1;
	  real mfacc = c0o1;
	  real mfcca = c0o1;
	  real mfaaa = c0o1;
	  real mfcaa = c0o1;
	  real mfaca = c0o1;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  real m0, m1, m2, vvx, vvy, vvz, vx2, vy2, vz2, oMdrho;
	  real mxxPyyPzz, mxxMyy, mxxMzz, mxxyPyzz, mxxyMyzz, mxxzPyyz, mxxzMyyz, mxyyPxzz, mxyyMxzz;
	  real qudricLimit = c1o100;//ganz schlechte Idee -> muss global sein
	  real O3 = c2o1 - o;
	  real residu, residutmp;
	  residutmp = c0o1;///*-*/ c2o9 * (1./o - c1o2) * eps_new * eps_new;
	  real NeqOn = c1o1;//zero;//one;   //.... one = on ..... zero = off 
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //
	  //Position C 0., 0., 0.
	  //
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //x = 0.;
	  //y = 0.;
	  //z = 0.;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //real mxoff = -xoff;
	  //real myoff = -yoff;
	  //real mzoff = -zoff;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  //press = press_NET * (c1o8 - c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NWT * (c1o8 + c1o4 * mxoff - c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SET * (c1o8 - c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_SWT * (c1o8 + c1o4 * mxoff + c1o4 * myoff - c1o4 * mzoff) + 
			//  press_NEB * (c1o8 - c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_NWB * (c1o8 + c1o4 * mxoff - c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SEB * (c1o8 - c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff) + 
			//  press_SWB * (c1o8 + c1o4 * mxoff + c1o4 * myoff + c1o4 * mzoff);
	  //drho  = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
			//  drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
			//  drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
	  press = d0;
	  vvx = a0;
	  vvy = b0;
	  vvz = c0;

	  //mfaaa = drho;
	  //mfaaa = press + (ax+by+cz)/three;  //  1/3 = 2/3*(1/op-1/2)
	  mfaaa = press; // if drho is interpolated directly

	  vx2 = vvx*vvx;
	  vy2 = vvy*vvy;
	  vz2 = vvz*vvz;
	  oMdrho = c1o1 - mfaaa;

	  //two
	  // linear combinations
	  mxxPyyPzz = mfaaa;
	  //mxxMyy    = -c2o3*(ax - by)*eps_new/o;
	  //mxxMzz    = -c2o3*(ax - cz)*eps_new/o;

	  //mfabb     = -c1o3 * (bz + cy)*eps_new/o;
	  //mfbab     = -c1o3 * (az + cx)*eps_new/o;
	  //mfbba     = -c1o3 * (ay + bx)*eps_new/o;
	  mxxMyy    = -c2o3*((ax - by)+kxxMyyAverage)*eps_new/o;
	  mxxMzz    = -c2o3*((ax - cz)+kxxMzzAverage)*eps_new/o;

	  mfabb     = -c1o3 * ((bz + cy)+kyzAverage)*eps_new/o;
	  mfbab     = -c1o3 * ((az + cx)+kxzAverage)*eps_new/o;
	  mfbba     = -c1o3 * ((ay + bx)+kxyAverage)*eps_new/o;

	  
	  // linear combinations back
	  mfcaa = c1o3 * (       mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaca = c1o3 * (-c2o1 * mxxMyy +       mxxMzz + mxxPyyPzz) * NeqOn;
	  mfaac = c1o3 * (       mxxMyy - c2o1 * mxxMzz + mxxPyyPzz) * NeqOn;

	  //3.
	  // linear combinations
	  residu = residutmp * (ayz + bxz + cxy );
	  mfbbb = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axy + c2o1*bxx + c2o1*bzz + cyz );
	  //residu = -(c1o9*(axy - 2*bxx - 2*bzz + cyz ));
	  mxxyPyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axy + c2o1*bxx - c2o1*bzz - cyz );
	  //residu = c1o9*(axy - 2*bxx + 2*bzz - cyz );
	  mxxyMyzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axz + byz + c2o1*cxx + c2o1*cyy );
	  //residu = -(c1o9*(axz + byz - 2*cxx - 2*cyy ));
	  mxxzPyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (axz - byz + c2o1*cxx - c2o1*cyy );
	  //residu = c1o9*(axz - byz - 2*cxx + 2*cyy );
	  mxxzMyyz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (c2o1*ayy + c2o1*azz + bxy + cxz );
	  //residu = c1o9*(2*ayy + 2*azz - bxy - cxz );
	  mxyyPxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  residu = residutmp * (c2o1*ayy - c2o1*azz + bxy - cxz );
	  //residu = c1o9*(-2*ayy + 2*azz + bxy - cxz );
	  mxyyMxzz = (abs(residu)+qudricLimit) * residu / (qudricLimit * O3 + abs(residu));

	  // linear combinations back
	  mfcba = ( mxxyMyzz + mxxyPyzz) * c1o2;
	  mfabc = (-mxxyMyzz + mxxyPyzz) * c1o2;
	  mfcab = ( mxxzMyyz + mxxzPyyz) * c1o2;
	  mfacb = (-mxxzMyyz + mxxzPyyz) * c1o2;
	  mfbca = ( mxyyMxzz + mxyyPxzz) * c1o2;
	  mfbac = (-mxyyMxzz + mxyyPxzz) * c1o2;

	  //4.
	  mfacc = mfaaa*c1o9; 
	  mfcac = mfacc; 
	  mfcca = mfacc; 
	  //5.

	  //6.
	  mfccc = mfaaa*c1o27;
	  ////////////////////////////////////////////////////////////////////////////////////
	  //back
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1, 0, 1/3, 0, 0, 0, 1/3, 0, 1/9   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Z - Dir
	  m0 =  mfaac * c1o2 +      mfaab * (vvz - c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfaac        - c2o1 * mfaab *  vvz         +  mfaaa                * (c1o1 - vz2)              - c1o1 * oMdrho * vz2; 
	  m2 =  mfaac * c1o2 +      mfaab * (vvz + c1o2) + (mfaaa + c1o1 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaaa = m0;
	  mfaab = m1;
	  mfaac = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfabc * c1o2 +      mfabb * (vvz - c1o2) + mfaba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfabc        - c2o1 * mfabb *  vvz         + mfaba * (c1o1 - vz2); 
	  m2 =  mfabc * c1o2 +      mfabb * (vvz + c1o2) + mfaba * (     vz2 + vvz) * c1o2;
	  mfaba = m0;
	  mfabb = m1;
	  mfabc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfacb * (vvz - c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfacb *  vvz         +  mfaca                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfacc * c1o2 +      mfacb * (vvz + c1o2) + (mfaca + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfaca = m0;
	  mfacb = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbac * c1o2 +      mfbab * (vvz - c1o2) + mfbaa * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbac        - c2o1 * mfbab *  vvz         + mfbaa * (c1o1 - vz2); 
	  m2 =  mfbac * c1o2 +      mfbab * (vvz + c1o2) + mfbaa * (     vz2 + vvz) * c1o2;
	  mfbaa = m0;
	  mfbab = m1;
	  mfbac = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbbc * c1o2 +      mfbbb * (vvz - c1o2) + mfbba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbbc        - c2o1 * mfbbb *  vvz         + mfbba * (c1o1 - vz2); 
	  m2 =  mfbbc * c1o2 +      mfbbb * (vvz + c1o2) + mfbba * (     vz2 + vvz) * c1o2;
	  mfbba = m0;
	  mfbbb = m1;
	  mfbbc = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbcb * (vvz - c1o2) + mfbca * (     vz2 - vvz) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbcb *  vvz         + mfbca * (c1o1 - vz2); 
	  m2 =  mfbcc * c1o2 +      mfbcb * (vvz + c1o2) + mfbca * (     vz2 + vvz) * c1o2;
	  mfbca = m0;
	  mfbcb = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfcab * (vvz - c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfcab *  vvz         +  mfcaa                  * (c1o1 - vz2)              - c1o3 * oMdrho * vz2; 
	  m2 =  mfcac * c1o2 +      mfcab * (vvz + c1o2) + (mfcaa + c1o3 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcaa = m0;
	  mfcab = m1;
	  mfcac = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfcbb * (vvz - c1o2) + mfcba * (     vz2 - vvz) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfcbb *  vvz         + mfcba * (c1o1 - vz2); 
	  m2 =  mfcbc * c1o2 +      mfcbb * (vvz + c1o2) + mfcba * (     vz2 + vvz) * c1o2;
	  mfcba = m0;
	  mfcbb = m1;
	  mfcbc = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfccb * (vvz - c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 - vvz) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfccb *  vvz         +  mfcca                  * (c1o1 - vz2)              - c1o9 * oMdrho * vz2; 
	  m2 =  mfccc * c1o2 +      mfccb * (vvz + c1o2) + (mfcca + c1o9 * oMdrho) * (     vz2 + vvz) * c1o2;
	  mfcca = m0;
	  mfccb = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/6, 2/3, 1/6, 0, 0, 0, 1/18, 2/9, 1/18   Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // Y - Dir
	  m0 =  mfaca * c1o2 +      mfaba * (vvy - c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfaca        - c2o1 * mfaba *  vvy         +  mfaaa                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfaca * c1o2 +      mfaba * (vvy + c1o2) + (mfaaa + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaaa = m0;
	  mfaba = m1;
	  mfaca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacb * c1o2 +      mfabb * (vvy - c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacb        - c2o1 * mfabb *  vvy         +  mfaab                  * (c1o1 - vy2)              - c2o3 * oMdrho * vy2; 
	  m2 =  mfacb * c1o2 +      mfabb * (vvy + c1o2) + (mfaab + c2o3 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaab = m0;
	  mfabb = m1;
	  mfacb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfacc * c1o2 +      mfabc * (vvy - c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfacc        - c2o1 * mfabc *  vvy         +  mfaac                  * (c1o1 - vy2)              - c1o6 * oMdrho * vy2; 
	  m2 =  mfacc * c1o2 +      mfabc * (vvy + c1o2) + (mfaac + c1o6 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfaac = m0;
	  mfabc = m1;
	  mfacc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfbca * c1o2 +      mfbba * (vvy - c1o2) + mfbaa * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbca        - c2o1 * mfbba *  vvy         + mfbaa * (c1o1 - vy2); 
	  m2 =  mfbca * c1o2 +      mfbba * (vvy + c1o2) + mfbaa * (     vy2 + vvy) * c1o2;
	  mfbaa = m0;
	  mfbba = m1;
	  mfbca = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcb * c1o2 +      mfbbb * (vvy - c1o2) + mfbab * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcb        - c2o1 * mfbbb *  vvy         + mfbab * (c1o1 - vy2); 
	  m2 =  mfbcb * c1o2 +      mfbbb * (vvy + c1o2) + mfbab * (     vy2 + vvy) * c1o2;
	  mfbab = m0;
	  mfbbb = m1;
	  mfbcb = m2;
	  /////////b//////////////////////////////////////////////////////////////////////////
	  m0 =  mfbcc * c1o2 +      mfbbc * (vvy - c1o2) + mfbac * (     vy2 - vvy) * c1o2; 
	  m1 = -mfbcc        - c2o1 * mfbbc *  vvy         + mfbac * (c1o1 - vy2); 
	  m2 =  mfbcc * c1o2 +      mfbbc * (vvy + c1o2) + mfbac * (     vy2 + vvy) * c1o2;
	  mfbac = m0;
	  mfbbc = m1;
	  mfbcc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfcba * (vvy - c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfcba *  vvy         +  mfcaa                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfcca * c1o2 +      mfcba * (vvy + c1o2) + (mfcaa + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcaa = m0;
	  mfcba = m1;
	  mfcca = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfcbb * (vvy - c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfcbb *  vvy         +  mfcab                  * (c1o1 - vy2)              - c2o9 * oMdrho * vy2; 
	  m2 =  mfccb * c1o2 +      mfcbb * (vvy + c1o2) + (mfcab + c2o9 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcab = m0;
	  mfcbb = m1;
	  mfccb = m2;
	  /////////c//////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfcbc * (vvy - c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 - vvy) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfcbc *  vvy         +  mfcac                   * (c1o1 - vy2)              - c1o18 * oMdrho * vy2; 
	  m2 =  mfccc * c1o2 +      mfcbc * (vvy + c1o2) + (mfcac + c1o18 * oMdrho) * (     vy2 + vvy) * c1o2;
	  mfcac = m0;
	  mfcbc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  //mit 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36 Konditionieren
	  ////////////////////////////////////////////////////////////////////////////////////
	  // X - Dir
	  m0 =  mfcaa * c1o2 +      mfbaa * (vvx - c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcaa        - c2o1 * mfbaa *  vvx         +  mfaaa                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcaa * c1o2 +      mfbaa * (vvx + c1o2) + (mfaaa + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaaa = m0;
	  mfbaa = m1;
	  mfcaa = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcba * c1o2 +      mfbba * (vvx - c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcba        - c2o1 * mfbba *  vvx         +  mfaba                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcba * c1o2 +      mfbba * (vvx + c1o2) + (mfaba + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaba = m0;
	  mfbba = m1;
	  mfcba = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcca * c1o2 +      mfbca * (vvx - c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcca        - c2o1 * mfbca *  vvx         +  mfaca                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcca * c1o2 +      mfbca * (vvx + c1o2) + (mfaca + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaca = m0;
	  mfbca = m1;
	  mfcca = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcab * c1o2 +      mfbab * (vvx - c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcab        - c2o1 * mfbab *  vvx         +  mfaab                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcab * c1o2 +      mfbab * (vvx + c1o2) + (mfaab + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaab = m0;
	  mfbab = m1;
	  mfcab = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbb * c1o2 +      mfbbb * (vvx - c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbb        - c2o1 * mfbbb *  vvx         +  mfabb                  * (c1o1 - vx2)              - c4o9 * oMdrho * vx2; 
	  m2 =  mfcbb * c1o2 +      mfbbb * (vvx + c1o2) + (mfabb + c4o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabb = m0;
	  mfbbb = m1;
	  mfcbb = m2;
	  ///////////b////////////////////////////////////////////////////////////////////////
	  m0 =  mfccb * c1o2 +      mfbcb * (vvx - c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccb        - c2o1 * mfbcb *  vvx         +  mfacb                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfccb * c1o2 +      mfbcb * (vvx + c1o2) + (mfacb + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacb = m0;
	  mfbcb = m1;
	  mfccb = m2;
	  ////////////////////////////////////////////////////////////////////////////////////
	  ////////////////////////////////////////////////////////////////////////////////////
	  m0 =  mfcac * c1o2 +      mfbac * (vvx - c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcac        - c2o1 * mfbac *  vvx         +  mfaac                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfcac * c1o2 +      mfbac * (vvx + c1o2) + (mfaac + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfaac = m0;
	  mfbac = m1;
	  mfcac = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfcbc * c1o2 +      mfbbc * (vvx - c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfcbc        - c2o1 * mfbbc *  vvx         +  mfabc                  * (c1o1 - vx2)              - c1o9 * oMdrho * vx2; 
	  m2 =  mfcbc * c1o2 +      mfbbc * (vvx + c1o2) + (mfabc + c1o9 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfabc = m0;
	  mfbbc = m1;
	  mfcbc = m2;
	  ///////////c////////////////////////////////////////////////////////////////////////
	  m0 =  mfccc * c1o2 +      mfbcc * (vvx - c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 - vvx) * c1o2; 
	  m1 = -mfccc        - c2o1 * mfbcc *  vvx         +  mfacc                   * (c1o1 - vx2)              - c1o36 * oMdrho * vx2; 
	  m2 =  mfccc * c1o2 +      mfbcc * (vvx + c1o2) + (mfacc + c1o36 * oMdrho) * (     vx2 + vvx) * c1o2;
	  mfacc = m0;
	  mfbcc = m1;
	  mfccc = m2;
	  ////////////////////////////////////////////////////////////////////////////////////

	  ////////////////////////////////////////////////////////////////////////////////////
	  //index 0
	  kzero= posC[k];
	  kw   = neighborCX[kzero];
	  ks   = neighborCY[kzero];
	  kb   = neighborCZ[kzero];
	  ksw  = neighborCY[kw];
	  kbw  = neighborCZ[kw];
	  kbs  = neighborCZ[ks];
	  kbsw = neighborCZ[ksw];
	  ////////////////////////////////////////////////////////////////////////////////////


	  ////////////////////////////////////////////////////////////////////////////////////
	  feC[kzero]    = mfcbb;                                                                 
	  fwC[kw]       = mfabb;                                                               
	  fnC[kzero]    = mfbcb;
	  fsC[ks]       = mfbab;
	  ftC[kzero]    = mfbbc;
	  fbC[kb]       = mfbba;
	  fneC[kzero]   = mfccb;
	  fswC[ksw]     = mfaab;
	  fseC[ks]      = mfcab;
	  fnwC[kw]      = mfacb;
	  fteC[kzero]   = mfcbc;
	  fbwC[kbw]     = mfaba;
	  fbeC[kb]      = mfcba;
	  ftwC[kw]      = mfabc;
	  ftnC[kzero]   = mfbcc;
	  fbsC[kbs]     = mfbaa;
	  fbnC[kb]      = mfbca;
	  ftsC[ks]      = mfbac;
	  fzeroC[kzero] = mfbbb;
	  ftneC[kzero]  = mfccc;
	  ftseC[ks]     = mfcac;
	  fbneC[kb]     = mfcca;
	  fbseC[kbs]    = mfcaa;
	  ftnwC[kw]     = mfacc;
	  ftswC[ksw]    = mfaac;
	  fbnwC[kbw]    = mfaca;
	  fbswC[kbsw]   = mfaaa;
	  ////////////////////////////////////////////////////////////////////////////////////
   }
}
//////////////////////////////////////////////////////////////////////////



































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFCpress27(real* DC, 
                                          real* DF, 
                                          unsigned int* neighborCX,
                                          unsigned int* neighborCY,
                                          unsigned int* neighborCZ,
                                          unsigned int* neighborFX,
                                          unsigned int* neighborFY,
                                          unsigned int* neighborFZ,
                                          unsigned int size_MatC, 
                                          unsigned int size_MatF, 
                                          bool isEvenTimestep,
                                          unsigned int* posC, 
                                          unsigned int* posFSWB, 
                                          unsigned int kFC, 
                                          real omCoarse, 
                                          real omFine, 
                                          real nu, 
                                          unsigned int nxC, 
                                          unsigned int nyC, 
                                          unsigned int nxF, 
                                          unsigned int nyF,
                                          OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   //real epsylon = one;
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   real op = c1o1;
   real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   real        press,drho,vx1,vx2,vx3;
   real        press_SWT,drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        press_NWT,drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        press_NET,drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        press_SET,drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        press_SWB,drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        press_NWB,drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        press_NEB,drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        press_SEB,drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;

   //real x,y,z;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
	  press_SWB = (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
					drho_SWB-(vx1_SWB*vx1_SWB+vx2_SWB*vx2_SWB+vx3_SWB*vx3_SWB)* (c1o1+drho_SWB)) * c1o2+drho_SWB;

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWB*vx2_SWB));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWB*vx3_SWB));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWB*vx3_SWB));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB));

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_SWT= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_SWT-(vx1_SWT*vx1_SWT+vx2_SWT*vx2_SWT+vx3_SWT*vx3_SWT)* (c1o1+drho_SWT)) * c1o2+drho_SWT;

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWT*vx2_SWT));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWT*vx3_SWT));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWT*vx3_SWT));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT));

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_SET= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_SET-(vx1_SET*vx1_SET+vx2_SET*vx2_SET+vx3_SET*vx3_SET)* (c1o1+drho_SET)) * c1o2+drho_SET;

      kxyFromfcNEQ_SET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SET*vx2_SET));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SET*vx3_SET));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SET*vx3_SET));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SET*vx1_SET-vx2_SET*vx2_SET));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SET*vx1_SET-vx3_SET*vx3_SET));

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_SEB= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_SEB-(vx1_SEB*vx1_SEB+vx2_SEB*vx2_SEB+vx3_SEB*vx3_SEB)* (c1o1+drho_SEB)) * c1o2+drho_SEB;

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SEB*vx2_SEB));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SEB*vx3_SEB));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SEB*vx3_SEB));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB));

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NWB= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NWB-(vx1_NWB*vx1_NWB+vx2_NWB*vx2_NWB+vx3_NWB*vx3_NWB)* (c1o1+drho_NWB)) * c1o2+drho_NWB;

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWB*vx2_NWB));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWB*vx3_NWB));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWB*vx3_NWB));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB));

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NWT= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NWT-(vx1_NWT*vx1_NWT+vx2_NWT*vx2_NWT+vx3_NWT*vx3_NWT)* (c1o1+drho_NWT)) * c1o2+drho_NWT;

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWT*vx2_NWT));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWT*vx3_NWT));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWT*vx3_NWT));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT));

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NET= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NET-(vx1_NET*vx1_NET+vx2_NET*vx2_NET+vx3_NET*vx3_NET)* (c1o1+drho_NET)) * c1o2+drho_NET;

      kxyFromfcNEQ_NET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NET*vx2_NET));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NET*vx3_NET));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NET*vx3_NET));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NET*vx1_NET-vx2_NET*vx2_NET));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NET*vx1_NET-vx3_NET*vx3_NET));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      press_NEB= (f_E+f_W+f_N+f_S+f_T+f_B+c2o1*(f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS)+c3o1*(f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW)-
         drho_NEB-(vx1_NEB*vx1_NEB+vx2_NEB*vx2_NEB+vx3_NEB*vx3_NEB)* (c1o1+drho_NEB)) * c1o2+drho_NEB;

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NEB*vx2_NEB));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NEB*vx3_NEB));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NEB*vx3_NEB));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB));

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
      a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
         kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
         kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
         kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
         c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_NWT + 
         c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
         c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_NWT + 
         c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_SWT + 
         c8o1*vx1_NEB + c8o1*vx1_NET + c8o1*vx1_NWB + c8o1*vx1_NWT + c8o1*vx1_SEB + 
         c8o1*vx1_SET + c8o1*vx1_SWB + c8o1*vx1_SWT + c2o1*vx2_NEB + c2o1*vx2_NET - 
         c2o1*vx2_NWB - c2o1*vx2_NWT - c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + 
         c2o1*vx2_SWT - c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
         c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      b0 = (c2o1*kxxMyyFromfcNEQ_NEB + c2o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_NWT - 
         c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_SWT - 
         kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
         kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
         c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET + c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_NWT - 
         c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
         c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
         c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_SWT + 
         c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
         c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT + 
         c8o1*vx2_NEB + c8o1*vx2_NET + c8o1*vx2_NWB + c8o1*vx2_NWT + 
         c8o1*vx2_SEB + c8o1*vx2_SET + c8o1*vx2_SWB + c8o1*vx2_SWT - 
         c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
         c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
         kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
         c2o1*kxxMzzFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_NWT - 
         c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_SWT - 
         c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_NWT - 
         c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_SWT - 
         c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
         c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_SWT - 
         c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
         c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
         c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
         c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT + 
         c8o1*vx3_NEB + c8o1*vx3_NET + c8o1*vx3_NWB + c8o1*vx3_NWT + 
         c8o1*vx3_SEB + c8o1*vx3_SET + c8o1*vx3_SWB + c8o1*vx3_SWT)/c64o1;
      ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
         kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
         kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
         kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
         c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB - c2o1*vx2_NWT - 
         c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + c2o1*vx2_SWT - 
         c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
         c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
         kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
         c2o1*vx1_NEB - c2o1*vx1_NET + c2o1*vx1_NWB + c2o1*vx1_NWT + 
         c2o1*vx1_SEB + c2o1*vx1_SET - c2o1*vx1_SWB - c2o1*vx1_SWT)/c8o1;
      cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
         kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
         c2o1*vx1_NEB - c2o1*vx1_NET - c2o1*vx1_NWB + c2o1*vx1_NWT + 
         c2o1*vx1_SEB - c2o1*vx1_SET - c2o1*vx1_SWB + c2o1*vx1_SWT)/c8o1;
      ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
         kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
         c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB + c2o1*vx2_NWT + 
         c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB - c2o1*vx2_SWT)/c8o1;
      byy= (-c2o1*kxxMyyFromfcNEQ_NEB - c2o1*kxxMyyFromfcNEQ_NET - c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_NWT + 
         c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_SWT + 
         kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
         kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
         c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
         c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT - 
         c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
         c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
         kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
         c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB - c2o1*vx2_NWT - 
         c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB + c2o1*vx2_SWT)/c8o1;
      az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/c4o1;
      bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/c4o1;
      cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/c4o1;
      azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
         kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
         c2o1*vx3_NEB - c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
         c2o1*vx3_SEB - c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
         kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
         c2o1*vx3_NEB - c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
         c2o1*vx3_SEB + c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
         kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
         c2o1*kxxMzzFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_NWT + 
         c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_SWT - 
         c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
         c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
         c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
         c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT)/c16o1;
      axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/c2o1;
      bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/c2o1;
      cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/c2o1;
      axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;



      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot
      //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz + xoff*yoff*axy + xoff*zoff*axz + yoff*zoff*ayz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz + xoff*yoff*bxy + xoff*zoff*bxz + yoff*zoff*byz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz + xoff*yoff*cxy + xoff*zoff*cxz + yoff*zoff*cyz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Position C 0.5, 0.5, 0.5
      //x = zero;
      //y = zero;
      //z = zero;

      //drho = c1o8*(drho_SWB + drho_NWB + drho_NEB + drho_SEB + drho_SWT + drho_NWT + drho_NET + drho_SET);
      press  = press_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
               press_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
               press_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
               press_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
               press_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
               press_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
               press_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
               press_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
      vx1  = a0;
      vx2  = b0;
      vx3  = c0;

      drho = press + (ax+by+cz)/c3o1;  //  1/3 = 2/3*(1/op-1/2)

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_W    =   feq_E   + c2o27* (c6o1*(-vx1        ));
      feq_S    =   feq_N   + c2o27* (c6o1*(    -vx2    ));
      feq_B    =   feq_T   + c2o27* (c6o1*(        -vx3));
      feq_SW   =   feq_NE  + c1o54* (c6o1*(-vx1-vx2    ));
      feq_NW   =   feq_SE  + c1o54* (c6o1*(-vx1+vx2    ));
      feq_BW   =   feq_TE  + c1o54* (c6o1*(-vx1    -vx3));
      feq_TW   =   feq_BE  + c1o54* (c6o1*(-vx1    +vx3));
      feq_BS   =   feq_TN  + c1o54* (c6o1*(    -vx2-vx3));
      feq_TS   =   feq_BN  + c1o54* (c6o1*(    -vx2+vx3));
      feq_BSW  =   feq_TNE + c1o216*(c6o1*(-vx1-vx2-vx3));
      feq_TSW  =   feq_BNE + c1o216*(c6o1*(-vx1-vx2+vx3));
      feq_BNW  =   feq_TSE + c1o216*(c6o1*(-vx1+vx2-vx3));
      feq_TNW  =   feq_BSE + c1o216*(c6o1*(-vx1+vx2+vx3));

      f_E    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c8o1*ax*op + c4o1*by*op + c4o1*cz*op)/(c54o1*o*op));
      f_N    = f_E + eps_new *((c2o1*(ax - by))/(c9o1*o));
      f_T    = f_E + eps_new *((c2o1*(ax - cz))/(c9o1*o));
      f_NE   = eps_new *(-(c5o1*cz*o + c3o1*(ay + bx)*op - c2o1*cz*op + ax*(c5o1*o + op) + by*(c5o1*o + op))/(c54o1*o*op));
      f_SE   = f_NE + eps_new *((  ay + bx )/(c9o1*o)); 
      f_TE   = eps_new *(-(c5o1*cz*o + by*(c5o1*o - c2o1*op) + c3o1*(az + cx)*op + cz*op + ax*(c5o1*o + op))/(c54o1*o*op));
      f_BE   = f_TE + eps_new *((  az + cx )/(c9o1*o));
      f_TN   = eps_new *(-(c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c2o1*ax*op + by*op + c3o1*bz*op + c3o1*cy*op + cz*op)/(c54o1*o*op));
      f_BN   = f_TN + eps_new *((  bz + cy )/(c9o1*o));
      f_ZERO = eps_new *((c5o1*(ax + by + cz))/(c9o1*op));
      f_TNE  = eps_new *(-(ay + az + bx + bz + cx + cy)/(c72o1*o));
      f_TSW  = - eps_new *((ay + bx)/(c36o1*o)) - f_TNE;
      f_TSE  = - eps_new *((az + cx)/(c36o1*o)) - f_TNE;
      f_TNW  = - eps_new *((bz + cy)/(c36o1*o)) - f_TNE;

      //////////////////////////////////////////////////////////////////////////
      //index 0
      kzero= posC[k];
      kw   = neighborCX[kzero];
      ks   = neighborCY[kzero];
      kb   = neighborCZ[kzero];
      ksw  = neighborCY[kw];
      kbw  = neighborCZ[kw];
      kbs  = neighborCZ[ks];
      kbsw = neighborCZ[ksw];
      ////////////////////////////////////////////////////////////////////////////////
      feC[kzero]   = f_E    + feq_E;
      fwC[kw]      = f_E    + feq_W;
      fnC[kzero]   = f_N    + feq_N;
      fsC[ks]      = f_N    + feq_S;
      ftC[kzero]   = f_T    + feq_T;
      fbC[kb]      = f_T    + feq_B;
      fneC[kzero]  = f_NE   + feq_NE;
      fswC[ksw]    = f_NE   + feq_SW;
      fseC[ks]     = f_SE   + feq_SE;
      fnwC[kw]     = f_SE   + feq_NW;
      fteC[kzero]  = f_TE   + feq_TE;
      fbwC[kbw]    = f_TE   + feq_BW;
      fbeC[kb]     = f_BE   + feq_BE;
      ftwC[kw]     = f_BE   + feq_TW;
      ftnC[kzero]  = f_TN   + feq_TN;
      fbsC[kbs]    = f_TN   + feq_BS;
      fbnC[kb]     = f_BN   + feq_BN;
      ftsC[ks]     = f_BN   + feq_TS;
      fzeroC[kzero]= f_ZERO + feq_ZERO;
      ftneC[kzero] = f_TNE  + feq_TNE;
      ftswC[ksw]   = f_TSW  + feq_TSW;
      ftseC[ks]    = f_TSE  + feq_TSE;
      ftnwC[kw]    = f_TNW  + feq_TNW;
      fbneC[kb]    = f_TSW  + feq_BNE;
      fbswC[kbsw]  = f_TNE  + feq_BSW;
      fbseC[kbs]   = f_TNW  + feq_BSE;
      fbnwC[kbw]   = f_TSE  + feq_BNW;
   }
}
//////////////////////////////////////////////////////////////////////////



































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFCLast27( real* DC, 
                                          real* DF, 
                                          unsigned int* neighborCX,
                                          unsigned int* neighborCY,
                                          unsigned int* neighborCZ,
                                          unsigned int* neighborFX,
                                          unsigned int* neighborFY,
                                          unsigned int* neighborFZ,
                                          unsigned int size_MatC, 
                                          unsigned int size_MatF, 
                                          bool isEvenTimestep,
                                          unsigned int* posC, 
                                          unsigned int* posFSWB, 
                                          unsigned int kFC, 
                                          real omCoarse, 
                                          real omFine, 
                                          real nu, 
                                          unsigned int nxC, 
                                          unsigned int nyC, 
                                          unsigned int nxF, 
                                          unsigned int nyF,
                                          OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   //real epsylon = one;
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   real op = c1o1;
   real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   real        drho,vx1,vx2,vx3;
   real        drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz/*, axyz, bxyz, cxyz*/;

   //real x,y,z;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWB*vx2_SWB));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWB*vx3_SWB));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWB*vx3_SWB));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB));

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWT*vx2_SWT));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWT*vx3_SWT));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWT*vx3_SWT));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT));

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SET*vx2_SET));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SET*vx3_SET));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SET*vx3_SET));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SET*vx1_SET-vx2_SET*vx2_SET));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SET*vx1_SET-vx3_SET*vx3_SET));

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SEB*vx2_SEB));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SEB*vx3_SEB));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SEB*vx3_SEB));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB));

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWB*vx2_NWB));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWB*vx3_NWB));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWB*vx3_NWB));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB));

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWT*vx2_NWT));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWT*vx3_NWT));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWT*vx3_NWT));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT));

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NET*vx2_NET));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NET*vx3_NET));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NET*vx3_NET));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NET*vx1_NET-vx2_NET*vx2_NET));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NET*vx1_NET-vx3_NET*vx3_NET));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NEB*vx2_NEB));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NEB*vx3_NEB));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NEB*vx3_NEB));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB));

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////for all  _SWB _SET _NWT _NEB
      ////Version 1  fixed
      //ayz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      //bxz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //cxy= kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //ax = ayz + four*( - vx1_SWB + vx1_SET - vx1_NWT + vx1_NEB);
      //by = bxz + four*( - vx2_SWB - vx2_SET + vx2_NWT + vx2_NEB);
      //cz = cxy + four*( - vx3_SWB + vx3_SET + vx3_NWT - vx3_NEB);
      //axy= two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      //axz= two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      //bxy= two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //ay = axz + four*( - vx1_SWB - vx1_SET + vx1_NWT + vx1_NEB);
      //az = axy + four*( - vx1_SWB + vx1_SET + vx1_NWT - vx1_NEB);
      //bz = bxy + four*( - vx2_SWB + vx2_SET + vx2_NWT - vx2_NEB);
      //bx = two*(kxyFromfcNEQ_SWB + kxyFromfcNEQ_SET + kxyFromfcNEQ_NWT + kxyFromfcNEQ_NEB) - ay;
      //cy = two*(kyzFromfcNEQ_SWB + kyzFromfcNEQ_SET + kyzFromfcNEQ_NWT + kyzFromfcNEQ_NEB) - bz;
      //cx = two*(kxzFromfcNEQ_SWB + kxzFromfcNEQ_SET + kxzFromfcNEQ_NWT + kxzFromfcNEQ_NEB) - az;
      //byz= bx + four*(    vx2_SWB - vx2_SET + vx2_NWT - vx2_NEB);
      //cyz= cx + four*(    vx3_SWB - vx3_SET + vx3_NWT - vx3_NEB);
      //cxz= cy + four*(    vx3_SWB + vx3_SET - vx3_NWT - vx3_NEB);
      //axx= bz + four*(    vx2_SWB - vx2_SET - vx2_NWT + vx2_NEB) + two*(-kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_NEB);
      //ayy= four*( -vx2_SWB + vx2_SET + vx2_NWT - vx2_NEB) + two*(-kxyFromfcNEQ_SWB - kxyFromfcNEQ_SET + kxyFromfcNEQ_NWT + kxyFromfcNEQ_NEB) - bz;
      //azz= four*( -vx3_SWB - vx3_SET + vx3_NWT + vx3_NEB) + two*(-kxzFromfcNEQ_SWB + kxzFromfcNEQ_SET + kxzFromfcNEQ_NWT - kxzFromfcNEQ_NEB) - cy;
      //bxx= four*( -vx1_SWB + vx1_SET + vx1_NWT - vx1_NEB) + two*(-kxyFromfcNEQ_SWB + kxyFromfcNEQ_SET - kxyFromfcNEQ_NWT + kxyFromfcNEQ_NEB) - az;
      //byy= az + four*(    vx1_SWB - vx1_SET - vx1_NWT + vx1_NEB) + two*(kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_NEB);
      //bzz= four*( -vx3_SWB + vx3_SET - vx3_NWT + vx3_NEB) + two*(-kyzFromfcNEQ_SWB + kyzFromfcNEQ_SET + kyzFromfcNEQ_NWT - kyzFromfcNEQ_NEB) - cx;
      //cxx= four*( -vx1_SWB - vx1_SET + vx1_NWT + vx1_NEB) + two*(-kxzFromfcNEQ_SWB + kxzFromfcNEQ_SET - kxzFromfcNEQ_NWT + kxzFromfcNEQ_NEB) - ay;
      //cyy= four*( -vx2_SWB + vx2_SET - vx2_NWT + vx2_NEB) + two*(-kyzFromfcNEQ_SWB - kyzFromfcNEQ_SET + kyzFromfcNEQ_NWT + kyzFromfcNEQ_NEB) - bx;
      //czz= ay + four*(vx1_SWB + vx1_SET - vx1_NWT - vx1_NEB) + two*(kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_NEB);
      //a0 = eight*( vx1_SWB + vx1_NWT + vx1_SET + vx1_NEB) + two*( kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_NEB) + two*(kxzFromfcNEQ_SWB - kxzFromfcNEQ_SET - kxzFromfcNEQ_NWT + kxzFromfcNEQ_NEB) - ayy;
      //b0 = eight*( vx2_SWB + vx2_NWT + vx2_SET + vx2_NEB) + two*(-kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_NEB) + two*( kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_NEB) + two*(kyzFromfcNEQ_SWB - kyzFromfcNEQ_SET - kyzFromfcNEQ_NWT + kyzFromfcNEQ_NEB) - bxx;
      //c0 = eight*( vx3_SWB + vx3_NWT + vx3_SET + vx3_NEB) + two*(-kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_NEB) + two*(kxzFromfcNEQ_SWB - kxzFromfcNEQ_SET + kxzFromfcNEQ_NWT - kxzFromfcNEQ_NEB) - cyy;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////ayz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      ////bxz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////cxy= kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////axy= two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      ////axz= two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      ////bxy= two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////a0 = eight*( vx1_SWB + vx1_NWT + vx1_SET + vx1_NEB) + two*(vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + 2.*(kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB) + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////ax = four*(-vx1_SWB - vx1_NWT + vx1_SET + vx1_NEB) - kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      ////ay = two*(-vx1_SWB + vx1_NWT - vx1_SET + vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      ////az = two*(-vx1_SWB + vx1_NWT + vx1_SET - vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      ////axx= two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////ayy= two*(-vx2_SWB + vx2_NWT + vx2_SET - vx2_NEB - vx3_SWB + vx3_NWT - vx3_SET + vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + two*(-kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB) - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      ////azz= two*(-vx2_SWB + vx2_NWT + vx2_SET - vx2_NEB - vx3_SWB + vx3_NWT - vx3_SET + vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + two*(-kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB) - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      ////b0 = two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + four*(vx2_SWB + vx2_NWT + vx2_SET + vx2_NEB) + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + two*(kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB) + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + two*(kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB);
      ////bx = two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB - vx2_SWB - vx2_NWT + vx2_SET + vx2_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      ////by = four*(-vx2_SWB + vx2_NWT - vx2_SET + vx2_NEB) - kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////bz = two*(-vx2_SWB + vx2_NWT + vx2_SET - vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////bxx= two*(-vx1_SWB + vx1_NWT + vx1_SET - vx1_NEB - vx3_SWB - vx3_NWT + vx3_SET + vx3_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + two*(-kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB) - kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB;
      ////byy= two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB  + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      ////bzz= two*(-vx1_SWB + vx1_NWT + vx1_SET - vx1_NEB - vx3_SWB - vx3_NWT + vx3_SET + vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB - kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB + two*(-kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB);
      ////byz= two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      ////c0 = two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) + eight*(vx3_SWB + vx3_NWT + vx3_SET + vx3_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + two*(-kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB) + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB + two*(kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB);
      ////cx = two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB - vx3_SWB - vx3_NWT + vx3_SET + vx3_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      ////cy = two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB - vx3_SWB + vx3_NWT - vx3_SET + vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////cz = four*(-vx3_SWB + vx3_NWT + vx3_SET - vx3_NEB) + kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////cxx= two*(-vx1_SWB + vx1_NWT - vx1_SET + vx1_NEB - vx2_SWB - vx2_NWT + vx2_SET + vx2_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB - kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + two*(-kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB);
      ////cyy= two*(-vx1_SWB + vx1_NWT - vx1_SET + vx1_NEB - vx2_SWB - vx2_NWT + vx2_SET + vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + two*(-kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB);
      ////czz= two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + two*(kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB) + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      ////cxz= two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ////cyz= two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //// (_SWT _SEB _NWB _NET)
      ////merged
      //real tayz = kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //real tbxz = kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //real tcxy =-kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET; 
      //real tax  = four*(-vx1_SWT + vx1_SEB - vx1_NWB + vx1_NET) - tayz;
      //real tby  = four*(-vx2_SWT - vx2_SEB + vx2_NWB + vx2_NET) - tbxz;
      //real tcz  = four*( vx3_SWT - vx3_SEB - vx3_NWB + vx3_NET) - tcxy;
      //real taxy = two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      //real taxz = two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      //real tbxy = two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //real tay  = four*(-vx1_SWT - vx1_SEB + vx1_NWB + vx1_NET) - taxz;
      //real taz  = four*( vx1_SWT - vx1_SEB - vx1_NWB + vx1_NET) - taxy;
      //real tbz  = four*( vx2_SWT - vx2_SEB - vx2_NWB + vx2_NET) - tbxy;
      //real tbx  = two*(kxyFromfcNEQ_SWT + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NET) - tay;
      //real tcy  = two*(kyzFromfcNEQ_SWT + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NET) - tbz;
      //real tcx  = two*(kxzFromfcNEQ_SWT + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NWB + kxzFromfcNEQ_NET) - taz;
      //real tbyz = four*(-vx2_SWT + vx2_SEB - vx2_NWB + vx2_NET) - tbx;
      //real tcyz = four*(-vx3_SWT + vx3_SEB - vx3_NWB + vx3_NET) - tcx;
      //real tcxz = four*(-vx3_SWT - vx3_SEB + vx3_NWB + vx3_NET) - tcy;
      //real taxx = four*( vx2_SWT - vx2_SEB - vx2_NWB + vx2_NET) + two*(-kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NET) - tbz;
      //real tayy = four*(-vx2_SWT + vx2_SEB + vx2_NWB - vx2_NET) + two*(-kxyFromfcNEQ_SWT    - kxyFromfcNEQ_SEB    + kxyFromfcNEQ_NWB    + kxyFromfcNEQ_NET   ) + tbz;
      //real tazz = four*( vx3_SWT + vx3_SEB - vx3_NWB - vx3_NET) + two*( kxzFromfcNEQ_SWT    - kxzFromfcNEQ_SEB    - kxzFromfcNEQ_NWB    + kxzFromfcNEQ_NET   ) + tcy;
      //real tbxx = four*(-vx1_SWT + vx1_SEB + vx1_NWB - vx1_NET) + two*(-kxyFromfcNEQ_SWT    + kxyFromfcNEQ_SEB    - kxyFromfcNEQ_NWB    + kxyFromfcNEQ_NET   ) + taz;
      //real tbyy = four*( vx1_SWT - vx1_SEB - vx1_NWB + vx1_NET) + two*( kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NET) - taz;
      //real tbzz = four*( vx3_SWT - vx3_SEB + vx3_NWB - vx3_NET) + two*( kyzFromfcNEQ_SWT    - kyzFromfcNEQ_SEB    - kyzFromfcNEQ_NWB    + kyzFromfcNEQ_NET   ) + tcx;
      //real tcxx = four*( vx1_SWT + vx1_SEB - vx1_NWB - vx1_NET) + two*(-kxzFromfcNEQ_SWT    + kxzFromfcNEQ_SEB    - kxzFromfcNEQ_NWB    + kxzFromfcNEQ_NET   ) + tay;
      //real tcyy = four*( vx2_SWT - vx2_SEB + vx2_NWB - vx2_NET) + two*(-kyzFromfcNEQ_SWT    - kyzFromfcNEQ_SEB    + kyzFromfcNEQ_NWB    + kyzFromfcNEQ_NET   ) + tbx;
      //real tczz = four*(-vx1_SWT - vx1_SEB + vx1_NWB + vx1_NET) + two*(-kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NET) - tay;
      //real ta0  = eight*( vx1_SWT + vx1_NWB + vx1_SEB + vx1_NET) + two*( kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NET) + two*(-kxzFromfcNEQ_SWT + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NWB - kxzFromfcNEQ_NET   ) - tayy;
      //real tb0  = eight*( vx2_SWT + vx2_NWB + vx2_SEB + vx2_NET) + two*(-kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NET) + two*( kxyFromfcNEQ_SWT - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NWB - kxyFromfcNEQ_NET   ) - tbzz;
      //real tc0  = eight*( vx3_SWT + vx3_NWB + vx3_SEB + vx3_NET) + two*(-kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NET) + two*( kxzFromfcNEQ_SWT - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NWB - kxzFromfcNEQ_NET   ) - tcyy;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //a0  +=  ta0   ;
      //ax  +=  tax   ;
      //ay  +=  tay   ;
      //az  +=  taz   ;
      //axx +=  taxx  ;
      //ayy +=  tayy  ;
      //azz +=  tazz  ;
      //axy +=  taxy  ;
      //axz +=  taxz  ;
      //ayz +=  tayz  ;
      //b0  +=  tb0   ;
      //bx  +=  tbx   ;
      //by  +=  tby   ;
      //bz  +=  tbz   ;
      //bxx +=  tbxx  ;
      //byy +=  tbyy  ;
      //bzz +=  tbzz  ;
      //bxy +=  tbxy  ;
      //bxz +=  tbxz  ;
      //byz +=  tbyz  ;
      //c0  +=  tc0   ;
      //cx  +=  tcx   ;
      //cy  +=  tcy   ;
      //cz  +=  tcz   ;
      //cxx +=  tcxx  ;
      //cyy +=  tcyy  ;
      //czz +=  tczz  ;
      //cxy +=  tcxy  ;
      //cxz +=  tcxz  ;
      //cyz +=  tcyz  ;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////a0  += eight*( vx1_SWT + vx1_NWB + vx1_SEB + vx1_NET) + two*(vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET) - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      ////ax  += four*(-vx1_SWT - vx1_NWB + vx1_SEB + vx1_NET) - kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      ////ay  += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET + vx2_SWT + vx2_NWB - vx2_SEB - vx2_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET;
      ////az  += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET + vx3_SWT + vx3_NWB - vx3_SEB - vx3_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET;
      ////axx += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      ////ayy += two*(-vx2_SWT + vx2_NWB + vx2_SEB - vx2_NET + vx3_SWT - vx3_NWB + vx3_SEB - vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(-kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET) + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      ////azz += two*(-vx2_SWT + vx2_NWB + vx2_SEB - vx2_NET + vx3_SWT - vx3_NWB + vx3_SEB - vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + two*( kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET) + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      ////axy += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      ////axz += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      ////ayz += kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      ////b0  += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET + four*(vx2_SWT + vx2_NWB + vx2_SEB + vx2_NET) - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET) - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET + two*(-kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET);
      ////bx  += two*( vx1_SWT - vx1_NWB + vx1_SEB - vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET;
      ////by  += four*(-vx2_SWT + vx2_NWB - vx2_SEB + vx2_NET) - kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      ////bz  += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET + vx3_SWT - vx3_NWB + vx3_SEB - vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      ////bxx += two*(-vx1_SWT + vx1_NWB + vx1_SEB - vx1_NET + vx3_SWT + vx3_NWB - vx3_SEB - vx3_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(-kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET) + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET;
      ////byy += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      ////bzz += two*(-vx1_SWT + vx1_NWB + vx1_SEB - vx1_NET + vx3_SWT + vx3_NWB - vx3_SEB - vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + two*(kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET);
      ////bxy += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      ////bxz += kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      ////byz += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      ////c0  += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + eight*(vx3_SWT + vx3_NWB + vx3_SEB + vx3_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + two*(kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET) - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET + two*(kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET);
      ////cx  += two*(-vx1_SWT + vx1_NWB + vx1_SEB - vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET;
      ////cy  += two*(-vx2_SWT + vx2_NWB + vx2_SEB - vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      ////cz  += four*( vx3_SWT - vx3_NWB - vx3_SEB + vx3_NET) + kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      ////cxx += two*( vx1_SWT - vx1_NWB + vx1_SEB - vx1_NET + vx2_SWT + vx2_NWB - vx2_SEB - vx2_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + two*(-kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET);
      ////cyy += two*( vx1_SWT - vx1_NWB + vx1_SEB - vx1_NET + vx2_SWT + vx2_NWB - vx2_SEB - vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + two*(-kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET);
      ////czz += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + two*(-kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET) - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      ////cxy += -kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      ////cxz += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      ////cyz += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //a0  *= 0.015625f;// /=two; && /= thirtytwo;
      //ax  *= 0.0625f;  // /=two; && /= eight;
      //ay  *= 0.0625f;  // /=two; && /= eight;
      //az  *= 0.0625f;  // /=two; && /= eight;
      //axx *= 0.0625f;  // /=two; && /= eight;
      //ayy *= 0.0625f;  // /=two; && /= eight;
      //azz *= 0.0625f;  // /=two; && /= eight;
      //axy *= 0.125f;   // /=two; && /= four;
      //axz *= 0.125f;   // /=two; && /= four;
      //ayz *= 0.125f;   // /=two; && /= four;
      //b0  *= 0.015625f;// /=two; && /= thirtytwo;
      //bx  *= 0.0625f;  // /=two; && /= eight;
      //by  *= 0.0625f;  // /=two; && /= eight;
      //bz  *= 0.0625f;  // /=two; && /= eight;
      //bxx *= 0.0625f;  // /=two; && /= eight;
      //byy *= 0.0625f;  // /=two; && /= eight;
      //bzz *= 0.0625f;  // /=two; && /= eight;
      //bxy *= 0.125f;   // /=two; && /= four;
      //bxz *= 0.125f;   // /=two; && /= four;
      //byz *= 0.125f;   // /=two; && /= four;
      //c0  *= 0.015625f;// /=two; && /= thirtytwo;
      //cx  *= 0.0625f;  // /=two; && /= eight;
      //cy  *= 0.0625f;  // /=two; && /= eight;
      //cz  *= 0.0625f;  // /=two; && /= eight;
      //cxx *= 0.0625f;  // /=two; && /= eight;
      //cyy *= 0.0625f;  // /=two; && /= eight;
      //czz *= 0.0625f;  // /=two; && /= eight;
      //cxy *= 0.125f;   // /=two; && /= four;
      //cxz *= 0.125f;   // /=two; && /= four;
      //cyz *= 0.125f;   // /=two; && /= four;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //1
      //////////////////////////////////////////////////////////////////////////
      //a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
      //      kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
      //      kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
      //      kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
      //      two*kxyFromfcNEQ_NEB - two*kxyFromfcNEQ_NET - two*kxyFromfcNEQ_NWB - two*kxyFromfcNEQ_NWT - 
      //      two*kxyFromfcNEQ_SEB - two*kxyFromfcNEQ_SET - two*kxyFromfcNEQ_SWB - two*kxyFromfcNEQ_SWT - 
      //      two*kxzFromfcNEQ_NEB - two*kxzFromfcNEQ_NET - two*kxzFromfcNEQ_NWB - two*kxzFromfcNEQ_NWT - 
      //      two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_SET - two*kxzFromfcNEQ_SWB - two*kxzFromfcNEQ_SWT + 
      //      eight*vx1_NEB + eight*vx1_NET + eight*vx1_NWB + eight*vx1_NWT + 
      //      eight*vx1_SEB + eight*vx1_SET + eight*vx1_SWB + eight*vx1_SWT + 
      //      two*vx2_NEB + two*vx2_NET - two*vx2_NWB - two*vx2_NWT - 
      //      two*vx2_SEB - two*vx2_SET + two*vx2_SWB + two*vx2_SWT - 
      //      two*vx3_NEB + two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
      //      two*vx3_SEB + two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixtyfour;
      //b0 = (two*kxxMyyFromfcNEQ_NEB + two*kxxMyyFromfcNEQ_NET + two*kxxMyyFromfcNEQ_NWB + two*kxxMyyFromfcNEQ_NWT - 
      //      two*kxxMyyFromfcNEQ_SEB - two*kxxMyyFromfcNEQ_SET - two*kxxMyyFromfcNEQ_SWB - two*kxxMyyFromfcNEQ_SWT - 
      //      kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
      //      kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
      //      two*kxyFromfcNEQ_NEB - two*kxyFromfcNEQ_NET - two*kxyFromfcNEQ_NWB - two*kxyFromfcNEQ_NWT - 
      //      two*kxyFromfcNEQ_SEB - two*kxyFromfcNEQ_SET - two*kxyFromfcNEQ_SWB - two*kxyFromfcNEQ_SWT - 
      //      two*kyzFromfcNEQ_NEB - two*kyzFromfcNEQ_NET - two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_NWT - 
      //      two*kyzFromfcNEQ_SEB - two*kyzFromfcNEQ_SET - two*kyzFromfcNEQ_SWB - two*kyzFromfcNEQ_SWT + 
      //      two*vx1_NEB + two*vx1_NET - two*vx1_NWB - two*vx1_NWT - 
      //      two*vx1_SEB - two*vx1_SET + two*vx1_SWB + two*vx1_SWT + 
      //      eight*vx2_NEB + eight*vx2_NET + eight*vx2_NWB + eight*vx2_NWT + 
      //      eight*vx2_SEB + eight*vx2_SET + eight*vx2_SWB + eight*vx2_SWT - 
      //      two*vx3_NEB + two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
      //      two*vx3_SEB - two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixtyfour;
      //c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
      //      kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
      //      two*kxxMzzFromfcNEQ_NEB + two*kxxMzzFromfcNEQ_NET - two*kxxMzzFromfcNEQ_NWB + two*kxxMzzFromfcNEQ_NWT - 
      //      two*kxxMzzFromfcNEQ_SEB + two*kxxMzzFromfcNEQ_SET - two*kxxMzzFromfcNEQ_SWB + two*kxxMzzFromfcNEQ_SWT - 
      //      two*kxzFromfcNEQ_NEB - two*kxzFromfcNEQ_NET - two*kxzFromfcNEQ_NWB - two*kxzFromfcNEQ_NWT - 
      //      two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_SET - two*kxzFromfcNEQ_SWB - two*kxzFromfcNEQ_SWT - 
      //      two*kyzFromfcNEQ_NEB - two*kyzFromfcNEQ_NET - two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_NWT - 
      //      two*kyzFromfcNEQ_SEB - two*kyzFromfcNEQ_SET - two*kyzFromfcNEQ_SWB - two*kyzFromfcNEQ_SWT - 
      //      two*vx1_NEB + two*vx1_NET + two*vx1_NWB - two*vx1_NWT - 
      //      two*vx1_SEB + two*vx1_SET + two*vx1_SWB - two*vx1_SWT - 
      //      two*vx2_NEB + two*vx2_NET - two*vx2_NWB + two*vx2_NWT + 
      //      two*vx2_SEB - two*vx2_SET + two*vx2_SWB - two*vx2_SWT + 
      //      eight*vx3_NEB + eight*vx3_NET + eight*vx3_NWB + eight*vx3_NWT + 
      //      eight*vx3_SEB + eight*vx3_SET + eight*vx3_SWB + eight*vx3_SWT)/sixtyfour;
      //ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/four;
      //bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/four;
      //cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/four;
      //axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
      //      kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
      //      kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
      //      kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
      //      two*vx2_NEB + two*vx2_NET - two*vx2_NWB - two*vx2_NWT - 
      //      two*vx2_SEB - two*vx2_SET + two*vx2_SWB + two*vx2_SWT - 
      //      two*vx3_NEB + two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
      //      two*vx3_SEB + two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixteen;
      //bxx= (-sixteen*kxxMzzFromfcNEQ_NEB - sixteen*kxxMzzFromfcNEQ_NET - sixteen*kxxMzzFromfcNEQ_NWB - sixteen*kxxMzzFromfcNEQ_NWT + 
      //      sixteen*kxxMzzFromfcNEQ_SEB + sixteen*kxxMzzFromfcNEQ_SET + sixteen*kxxMzzFromfcNEQ_SWB + sixteen*kxxMzzFromfcNEQ_SWT + 
      //      thirtythree*kxyFromfcNEQ_NEB + thirtythree*kxyFromfcNEQ_NET + thirtythree*kxyFromfcNEQ_NWB + thirtythree*kxyFromfcNEQ_NWT + 
      //      thirtythree*kxyFromfcNEQ_SEB + thirtythree*kxyFromfcNEQ_SET + thirtythree*kxyFromfcNEQ_SWB + thirtythree*kxyFromfcNEQ_SWT - 
      //      thirtyfour*vx1_NEB - thirtyfour*vx1_NET + thirtyfour*vx1_NWB + thirtyfour*vx1_NWT + 
      //      thirtyfour*vx1_SEB + thirtyfour*vx1_SET - thirtyfour*vx1_SWB - thirtyfour*vx1_SWT + 
      //      thirtytwo*vx3_NEB - thirtytwo*vx3_NET + thirtytwo*vx3_NWB - thirtytwo*vx3_NWT - 
      //      thirtytwo*vx3_SEB + thirtytwo*vx3_SET - thirtytwo*vx3_SWB + thirtytwo*vx3_SWT)/264.f;
      //cxx= (sixteen*kxxMyyFromfcNEQ_NEB - sixteen*kxxMyyFromfcNEQ_NET + sixteen*kxxMyyFromfcNEQ_NWB - sixteen*kxxMyyFromfcNEQ_NWT +
      //      sixteen*kxxMyyFromfcNEQ_SEB - sixteen*kxxMyyFromfcNEQ_SET + sixteen*kxxMyyFromfcNEQ_SWB - sixteen*kxxMyyFromfcNEQ_SWT + 
      //      thirtythree*kxzFromfcNEQ_NEB + thirtythree*kxzFromfcNEQ_NET + thirtythree*kxzFromfcNEQ_NWB + thirtythree*kxzFromfcNEQ_NWT + 
      //      thirtythree*kxzFromfcNEQ_SEB + thirtythree*kxzFromfcNEQ_SET + thirtythree*kxzFromfcNEQ_SWB + thirtythree*kxzFromfcNEQ_SWT + 
      //      thirtyfour*vx1_NEB - thirtyfour*vx1_NET - thirtyfour*vx1_NWB + thirtyfour*vx1_NWT + 
      //      thirtyfour*vx1_SEB - thirtyfour*vx1_SET - thirtyfour*vx1_SWB + thirtyfour*vx1_SWT + 
      //      thirtytwo*vx2_NEB - thirtytwo*vx2_NET + thirtytwo*vx2_NWB - thirtytwo*vx2_NWT - 
      //      thirtytwo*vx2_SEB + thirtytwo*vx2_SET - thirtytwo*vx2_SWB + thirtytwo*vx2_SWT)/264.f;
      //ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/four;
      //by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/four;
      //cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/four;
      //ayy= (sixteen*kxxMyyFromfcNEQ_NEB + sixteen*kxxMyyFromfcNEQ_NET - sixteen*kxxMyyFromfcNEQ_NWB - sixteen*kxxMyyFromfcNEQ_NWT + 
      //      sixteen*kxxMyyFromfcNEQ_SEB + sixteen*kxxMyyFromfcNEQ_SET - sixteen*kxxMyyFromfcNEQ_SWB - sixteen*kxxMyyFromfcNEQ_SWT - 
      //      sixteen*kxxMzzFromfcNEQ_NEB - sixteen*kxxMzzFromfcNEQ_NET + sixteen*kxxMzzFromfcNEQ_NWB + sixteen*kxxMzzFromfcNEQ_NWT - 
      //      sixteen*kxxMzzFromfcNEQ_SEB - sixteen*kxxMzzFromfcNEQ_SET + sixteen*kxxMzzFromfcNEQ_SWB + sixteen*kxxMzzFromfcNEQ_SWT + 
      //      thirtythree*kxyFromfcNEQ_NEB + thirtythree*kxyFromfcNEQ_NET + thirtythree*kxyFromfcNEQ_NWB + thirtythree*kxyFromfcNEQ_NWT + 
      //      thirtythree*kxyFromfcNEQ_SEB + thirtythree*kxyFromfcNEQ_SET + thirtythree*kxyFromfcNEQ_SWB + thirtythree*kxyFromfcNEQ_SWT - 
      //      thirtyfour*vx2_NEB - thirtyfour*vx2_NET + thirtyfour*vx2_NWB + thirtyfour*vx2_NWT + 
      //      thirtyfour*vx2_SEB + thirtyfour*vx2_SET - thirtyfour*vx2_SWB - thirtyfour*vx2_SWT + 
      //      thirtytwo*vx3_NEB - thirtytwo*vx3_NET - thirtytwo*vx3_NWB + thirtytwo*vx3_NWT + 
      //      thirtytwo*vx3_SEB - thirtytwo*vx3_SET - thirtytwo*vx3_SWB + thirtytwo*vx3_SWT)/264.f;
      //byy= (-two*kxxMyyFromfcNEQ_NEB - two*kxxMyyFromfcNEQ_NET - two*kxxMyyFromfcNEQ_NWB - two*kxxMyyFromfcNEQ_NWT + 
      //      two*kxxMyyFromfcNEQ_SEB + two*kxxMyyFromfcNEQ_SET + two*kxxMyyFromfcNEQ_SWB + two*kxxMyyFromfcNEQ_SWT + 
      //      kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
      //      kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
      //      two*vx1_NEB + two*vx1_NET - two*vx1_NWB - two*vx1_NWT - 
      //      two*vx1_SEB - two*vx1_SET + two*vx1_SWB + two*vx1_SWT - 
      //      two*vx3_NEB + two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
      //      two*vx3_SEB - two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixteen;
      //cyy= (-sixteen*kxxMyyFromfcNEQ_NEB + sixteen*kxxMyyFromfcNEQ_NET - sixteen*kxxMyyFromfcNEQ_NWB + sixteen*kxxMyyFromfcNEQ_NWT - 
      //      sixteen*kxxMyyFromfcNEQ_SEB + sixteen*kxxMyyFromfcNEQ_SET - sixteen*kxxMyyFromfcNEQ_SWB + sixteen*kxxMyyFromfcNEQ_SWT + 
      //      thirtythree*kyzFromfcNEQ_NEB + thirtythree*kyzFromfcNEQ_NET + thirtythree*kyzFromfcNEQ_NWB + thirtythree*kyzFromfcNEQ_NWT + 
      //      thirtythree*kyzFromfcNEQ_SEB + thirtythree*kyzFromfcNEQ_SET + thirtythree*kyzFromfcNEQ_SWB + thirtythree*kyzFromfcNEQ_SWT + 
      //      thirtytwo*vx1_NEB - thirtytwo*vx1_NET - thirtytwo*vx1_NWB + thirtytwo*vx1_NWT + 
      //      thirtytwo*vx1_SEB - thirtytwo*vx1_SET - thirtytwo*vx1_SWB + thirtytwo*vx1_SWT + 
      //      thirtyfour*vx2_NEB - thirtyfour*vx2_NET + thirtyfour*vx2_NWB - thirtyfour*vx2_NWT - 
      //      thirtyfour*vx2_SEB + thirtyfour*vx2_SET - thirtyfour*vx2_SWB + thirtyfour*vx2_SWT)/264.f;
      //az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/four;
      //bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/four;
      //cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/four;
      //azz= (-sixteen*kxxMyyFromfcNEQ_NEB - sixteen*kxxMyyFromfcNEQ_NET + sixteen*kxxMyyFromfcNEQ_NWB + sixteen*kxxMyyFromfcNEQ_NWT - 
      //      sixteen*kxxMyyFromfcNEQ_SEB - sixteen*kxxMyyFromfcNEQ_SET + sixteen*kxxMyyFromfcNEQ_SWB + sixteen*kxxMyyFromfcNEQ_SWT + 
      //      sixteen*kxxMzzFromfcNEQ_NEB + sixteen*kxxMzzFromfcNEQ_NET - sixteen*kxxMzzFromfcNEQ_NWB - sixteen*kxxMzzFromfcNEQ_NWT + 
      //      sixteen*kxxMzzFromfcNEQ_SEB + sixteen*kxxMzzFromfcNEQ_SET - sixteen*kxxMzzFromfcNEQ_SWB - sixteen*kxxMzzFromfcNEQ_SWT + 
      //      thirtythree*kxzFromfcNEQ_NEB + thirtythree*kxzFromfcNEQ_NET + thirtythree*kxzFromfcNEQ_NWB + thirtythree*kxzFromfcNEQ_NWT + 
      //      thirtythree*kxzFromfcNEQ_SEB + thirtythree*kxzFromfcNEQ_SET + thirtythree*kxzFromfcNEQ_SWB + thirtythree*kxzFromfcNEQ_SWT - 
      //      thirtytwo*vx2_NEB - thirtytwo*vx2_NET + thirtytwo*vx2_NWB + thirtytwo*vx2_NWT + 
      //      thirtytwo*vx2_SEB + thirtytwo*vx2_SET - thirtytwo*vx2_SWB - thirtytwo*vx2_SWT + 
      //      thirtyfour*vx3_NEB - thirtyfour*vx3_NET - thirtyfour*vx3_NWB + thirtyfour*vx3_NWT + 
      //      thirtyfour*vx3_SEB - thirtyfour*vx3_SET - thirtyfour*vx3_SWB + thirtyfour*vx3_SWT)/264.f;
      //bzz= (sixteen*kxxMzzFromfcNEQ_NEB + sixteen*kxxMzzFromfcNEQ_NET + sixteen*kxxMzzFromfcNEQ_NWB + sixteen*kxxMzzFromfcNEQ_NWT - 
      //      sixteen*kxxMzzFromfcNEQ_SEB - sixteen*kxxMzzFromfcNEQ_SET - sixteen*kxxMzzFromfcNEQ_SWB - sixteen*kxxMzzFromfcNEQ_SWT + 
      //      thirtythree*kyzFromfcNEQ_NEB + thirtythree*kyzFromfcNEQ_NET + thirtythree*kyzFromfcNEQ_NWB + thirtythree*kyzFromfcNEQ_NWT + 
      //      thirtythree*kyzFromfcNEQ_SEB + thirtythree*kyzFromfcNEQ_SET + thirtythree*kyzFromfcNEQ_SWB + thirtythree*kyzFromfcNEQ_SWT - 
      //      thirtytwo*vx1_NEB - thirtytwo*vx1_NET + thirtytwo*vx1_NWB + thirtytwo*vx1_NWT + 
      //      thirtytwo*vx1_SEB + thirtytwo*vx1_SET - thirtytwo*vx1_SWB - thirtytwo*vx1_SWT + 
      //      thirtyfour*vx3_NEB - thirtyfour*vx3_NET + thirtyfour*vx3_NWB - thirtyfour*vx3_NWT - 
      //      thirtyfour*vx3_SEB + thirtyfour*vx3_SET - thirtyfour*vx3_SWB + thirtyfour*vx3_SWT)/264.f;
      //czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
      //      kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
      //      two*kxxMzzFromfcNEQ_NEB - two*kxxMzzFromfcNEQ_NET + two*kxxMzzFromfcNEQ_NWB - two*kxxMzzFromfcNEQ_NWT + 
      //      two*kxxMzzFromfcNEQ_SEB - two*kxxMzzFromfcNEQ_SET + two*kxxMzzFromfcNEQ_SWB - two*kxxMzzFromfcNEQ_SWT - 
      //      two*vx1_NEB + two*vx1_NET + two*vx1_NWB - two*vx1_NWT - 
      //      two*vx1_SEB + two*vx1_SET + two*vx1_SWB - two*vx1_SWT - 
      //      two*vx2_NEB + two*vx2_NET - two*vx2_NWB + two*vx2_NWT + 
      //      two*vx2_SEB - two*vx2_SET + two*vx2_SWB - two*vx2_SWT)/sixteen;
      //axy= (eight*kxxMzzFromfcNEQ_NEB + eight*kxxMzzFromfcNEQ_NET + eight*kxxMzzFromfcNEQ_NWB + eight*kxxMzzFromfcNEQ_NWT - 
      //      eight*kxxMzzFromfcNEQ_SEB - eight*kxxMzzFromfcNEQ_SET - eight*kxxMzzFromfcNEQ_SWB - eight*kxxMzzFromfcNEQ_SWT + 
      //      seventeen*vx1_NEB + seventeen*vx1_NET - seventeen*vx1_NWB - seventeen*vx1_NWT - 
      //      seventeen*vx1_SEB - seventeen*vx1_SET + seventeen*vx1_SWB + seventeen*vx1_SWT - 
      //      sixteen*vx3_NEB + sixteen*vx3_NET - sixteen*vx3_NWB + sixteen*vx3_NWT + 
      //      sixteen*vx3_SEB - sixteen*vx3_SET + sixteen*vx3_SWB - sixteen*vx3_SWT)/sixtysix;
      //bxy= (-eight*kxxMyyFromfcNEQ_NEB - eight*kxxMyyFromfcNEQ_NET + eight*kxxMyyFromfcNEQ_NWB + eight*kxxMyyFromfcNEQ_NWT - 
      //      eight*kxxMyyFromfcNEQ_SEB - eight*kxxMyyFromfcNEQ_SET + eight*kxxMyyFromfcNEQ_SWB + eight*kxxMyyFromfcNEQ_SWT + 
      //      eight*kxxMzzFromfcNEQ_NEB + eight*kxxMzzFromfcNEQ_NET - eight*kxxMzzFromfcNEQ_NWB - eight*kxxMzzFromfcNEQ_NWT + 
      //      eight*kxxMzzFromfcNEQ_SEB + eight*kxxMzzFromfcNEQ_SET - eight*kxxMzzFromfcNEQ_SWB - eight*kxxMzzFromfcNEQ_SWT + 
      //      seventeen*vx2_NEB + seventeen*vx2_NET - seventeen*vx2_NWB - seventeen*vx2_NWT - 
      //      seventeen*vx2_SEB - seventeen*vx2_SET + seventeen*vx2_SWB + seventeen*vx2_SWT - 
      //      sixteen*vx3_NEB + sixteen*vx3_NET + sixteen*vx3_NWB - sixteen*vx3_NWT - 
      //      sixteen*vx3_SEB + sixteen*vx3_SET + sixteen*vx3_SWB - sixteen*vx3_SWT)/sixtysix;
      //cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/two;
      //axz= (-eight*kxxMyyFromfcNEQ_NEB + eight*kxxMyyFromfcNEQ_NET - eight*kxxMyyFromfcNEQ_NWB + eight*kxxMyyFromfcNEQ_NWT - 
      //      eight*kxxMyyFromfcNEQ_SEB + eight*kxxMyyFromfcNEQ_SET - eight*kxxMyyFromfcNEQ_SWB + eight*kxxMyyFromfcNEQ_SWT - 
      //      seventeen*vx1_NEB + seventeen*vx1_NET + seventeen*vx1_NWB - seventeen*vx1_NWT - 
      //      seventeen*vx1_SEB + seventeen*vx1_SET + seventeen*vx1_SWB - seventeen*vx1_SWT - 
      //      sixteen*vx2_NEB + sixteen*vx2_NET - sixteen*vx2_NWB + sixteen*vx2_NWT + 
      //      sixteen*vx2_SEB - sixteen*vx2_SET + sixteen*vx2_SWB - sixteen*vx2_SWT)/sixtysix;
      //bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/two;
      //cxz= (eight*kxxMyyFromfcNEQ_NEB + eight*kxxMyyFromfcNEQ_NET - eight*kxxMyyFromfcNEQ_NWB - eight*kxxMyyFromfcNEQ_NWT + 
      //      eight*kxxMyyFromfcNEQ_SEB + eight*kxxMyyFromfcNEQ_SET - eight*kxxMyyFromfcNEQ_SWB - eight*kxxMyyFromfcNEQ_SWT - 
      //      eight*kxxMzzFromfcNEQ_NEB - eight*kxxMzzFromfcNEQ_NET + eight*kxxMzzFromfcNEQ_NWB + eight*kxxMzzFromfcNEQ_NWT - 
      //      eight*kxxMzzFromfcNEQ_SEB - eight*kxxMzzFromfcNEQ_SET + eight*kxxMzzFromfcNEQ_SWB + eight*kxxMzzFromfcNEQ_SWT + 
      //      sixteen*vx2_NEB + sixteen*vx2_NET - sixteen*vx2_NWB - sixteen*vx2_NWT - 
      //      sixteen*vx2_SEB - sixteen*vx2_SET + sixteen*vx2_SWB + sixteen*vx2_SWT - 
      //      seventeen*vx3_NEB + seventeen*vx3_NET + seventeen*vx3_NWB - seventeen*vx3_NWT - 
      //      seventeen*vx3_SEB + seventeen*vx3_SET + seventeen*vx3_SWB - seventeen*vx3_SWT)/sixtysix;
      //ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/two;
      //byz= (eight*kxxMyyFromfcNEQ_NEB - eight*kxxMyyFromfcNEQ_NET + eight*kxxMyyFromfcNEQ_NWB - eight*kxxMyyFromfcNEQ_NWT + 
      //      eight*kxxMyyFromfcNEQ_SEB - eight*kxxMyyFromfcNEQ_SET + eight*kxxMyyFromfcNEQ_SWB - eight*kxxMyyFromfcNEQ_SWT - 
      //      sixteen*vx1_NEB + sixteen*vx1_NET + sixteen*vx1_NWB - sixteen*vx1_NWT - 
      //      sixteen*vx1_SEB + sixteen*vx1_SET + sixteen*vx1_SWB - sixteen*vx1_SWT - 
      //      seventeen*vx2_NEB + seventeen*vx2_NET - seventeen*vx2_NWB + seventeen*vx2_NWT + 
      //      seventeen*vx2_SEB - seventeen*vx2_SET + seventeen*vx2_SWB - seventeen*vx2_SWT)/sixtysix;
      //cyz= (-eight*kxxMzzFromfcNEQ_NEB - eight*kxxMzzFromfcNEQ_NET - eight*kxxMzzFromfcNEQ_NWB - eight*kxxMzzFromfcNEQ_NWT + 
      //      eight*kxxMzzFromfcNEQ_SEB + eight*kxxMzzFromfcNEQ_SET + eight*kxxMzzFromfcNEQ_SWB + eight*kxxMzzFromfcNEQ_SWT + 
      //      sixteen*vx1_NEB + sixteen*vx1_NET - sixteen*vx1_NWB - sixteen*vx1_NWT - 
      //      sixteen*vx1_SEB - sixteen*vx1_SET + sixteen*vx1_SWB + sixteen*vx1_SWT - 
      //      seventeen*vx3_NEB + seventeen*vx3_NET - seventeen*vx3_NWB + seventeen*vx3_NWT + 
      //      seventeen*vx3_SEB - seventeen*vx3_SET + seventeen*vx3_SWB - seventeen*vx3_SWT)/sixtysix;

      //////////////////////////////////////////////////////////////////////////
      //2
      //////////////////////////////////////////////////////////////////////////
      //a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
      //       kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
      //       kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
      //       kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
      //       two*kxyFromfcNEQ_NEB - two*kxyFromfcNEQ_NET - two*kxyFromfcNEQ_NWB - two*kxyFromfcNEQ_NWT - 
      //       two*kxyFromfcNEQ_SEB - two*kxyFromfcNEQ_SET - two*kxyFromfcNEQ_SWB - two*kxyFromfcNEQ_SWT - 
      //       two*kxzFromfcNEQ_NEB - two*kxzFromfcNEQ_NET - two*kxzFromfcNEQ_NWB - two*kxzFromfcNEQ_NWT - 
      //       two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_SET - two*kxzFromfcNEQ_SWB - two*kxzFromfcNEQ_SWT + 
      //       eight*vx1_NEB + eight*vx1_NET + eight*vx1_NWB + eight*vx1_NWT + 
      //       eight*vx1_SEB + eight*vx1_SET + eight*vx1_SWB + eight*vx1_SWT + 
      //       two*vx2_NEB + two*vx2_NET - two*vx2_NWB - two*vx2_NWT - 
      //       two*vx2_SEB - two*vx2_SET + two*vx2_SWB + two*vx2_SWT - 
      //       two*vx3_NEB + two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
      //       two*vx3_SEB + two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixtyfour;
      //b0 = (two*kxxMyyFromfcNEQ_NEB + two*kxxMyyFromfcNEQ_NET + two*kxxMyyFromfcNEQ_NWB + two*kxxMyyFromfcNEQ_NWT - 
      //      two*kxxMyyFromfcNEQ_SEB - two*kxxMyyFromfcNEQ_SET - two*kxxMyyFromfcNEQ_SWB - two*kxxMyyFromfcNEQ_SWT - 
      //      kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
      //      kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
      //      two*kxyFromfcNEQ_NEB - two*kxyFromfcNEQ_NET - two*kxyFromfcNEQ_NWB - two*kxyFromfcNEQ_NWT - 
      //      two*kxyFromfcNEQ_SEB - two*kxyFromfcNEQ_SET - two*kxyFromfcNEQ_SWB - two*kxyFromfcNEQ_SWT - 
      //      two*kyzFromfcNEQ_NEB - two*kyzFromfcNEQ_NET - two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_NWT - 
      //      two*kyzFromfcNEQ_SEB - two*kyzFromfcNEQ_SET - two*kyzFromfcNEQ_SWB - two*kyzFromfcNEQ_SWT + 
      //      two*vx1_NEB + two*vx1_NET - two*vx1_NWB - two*vx1_NWT - 
      //      two*vx1_SEB - two*vx1_SET + two*vx1_SWB + two*vx1_SWT + 
      //      eight*vx2_NEB + eight*vx2_NET + eight*vx2_NWB + eight*vx2_NWT + 
      //      eight*vx2_SEB + eight*vx2_SET + eight*vx2_SWB + eight*vx2_SWT - 
      //      two*vx3_NEB + two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
      //      two*vx3_SEB - two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixtyfour;
      //c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
      //      kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
      //      two*kxxMzzFromfcNEQ_NEB + two*kxxMzzFromfcNEQ_NET - two*kxxMzzFromfcNEQ_NWB + two*kxxMzzFromfcNEQ_NWT - 
      //      two*kxxMzzFromfcNEQ_SEB + two*kxxMzzFromfcNEQ_SET - two*kxxMzzFromfcNEQ_SWB + two*kxxMzzFromfcNEQ_SWT - 
      //      two*kxzFromfcNEQ_NEB - two*kxzFromfcNEQ_NET - two*kxzFromfcNEQ_NWB - two*kxzFromfcNEQ_NWT - 
      //      two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_SET - two*kxzFromfcNEQ_SWB - two*kxzFromfcNEQ_SWT - 
      //      two*kyzFromfcNEQ_NEB - two*kyzFromfcNEQ_NET - two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_NWT - 
      //      two*kyzFromfcNEQ_SEB - two*kyzFromfcNEQ_SET - two*kyzFromfcNEQ_SWB - two*kyzFromfcNEQ_SWT - 
      //      two*vx1_NEB + two*vx1_NET + two*vx1_NWB - two*vx1_NWT - 
      //      two*vx1_SEB + two*vx1_SET + two*vx1_SWB - two*vx1_SWT - 
      //      two*vx2_NEB + two*vx2_NET - two*vx2_NWB + two*vx2_NWT + 
      //      two*vx2_SEB - two*vx2_SET + two*vx2_SWB - two*vx2_SWT + 
      //      eight*vx3_NEB + eight*vx3_NET + eight*vx3_NWB + eight*vx3_NWT + 
      //      eight*vx3_SEB + eight*vx3_SET + eight*vx3_SWB + eight*vx3_SWT)/sixtyfour;
      //ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/four;
      //bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/four;
      //cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/four;
      //axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
      //      kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
      //      kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
      //      kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
      //      two*vx2_NEB + two*vx2_NET - two*vx2_NWB - two*vx2_NWT - 
      //      two*vx2_SEB - two*vx2_SET + two*vx2_SWB + two*vx2_SWT - 
      //      two*vx3_NEB + two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
      //      two*vx3_SEB + two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixteen;
      //bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT + 
      //      kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET + kxyFromfcNEQ_SWB + kxyFromfcNEQ_SWT - 
      //      two*vx1_NEB - two*vx1_NET + two*vx1_NWB + two*vx1_NWT + 
      //      two*vx1_SEB + two*vx1_SET - two*vx1_SWB - two*vx1_SWT)/eight;
      //cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET + kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT + 
      //      kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET + kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
      //      two*vx1_NEB - two*vx1_NET - two*vx1_NWB + two*vx1_NWT + 
      //      two*vx1_SEB - two*vx1_SET - two*vx1_SWB + two*vx1_SWT)/eight;
      //ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/four;
      //by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/four;
      //cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/four;
      //ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT + 
      //      kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET + kxyFromfcNEQ_SWB + kxyFromfcNEQ_SWT - 
      //      two*vx2_NEB - two*vx2_NET + two*vx2_NWB + two*vx2_NWT + 
      //      two*vx2_SEB + two*vx2_SET - two*vx2_SWB - two*vx2_SWT)/eight;
      //byy= (-two*kxxMyyFromfcNEQ_NEB - two*kxxMyyFromfcNEQ_NET - two*kxxMyyFromfcNEQ_NWB - two*kxxMyyFromfcNEQ_NWT + 
      //       two*kxxMyyFromfcNEQ_SEB + two*kxxMyyFromfcNEQ_SET + two*kxxMyyFromfcNEQ_SWB + two*kxxMyyFromfcNEQ_SWT + 
      //       kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
      //       kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
      //       two*vx1_NEB + two*vx1_NET - two*vx1_NWB - two*vx1_NWT - 
      //       two*vx1_SEB - two*vx1_SET + two*vx1_SWB + two*vx1_SWT - 
      //       two*vx3_NEB + two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
      //       two*vx3_SEB - two*vx3_SET + two*vx3_SWB - two*vx3_SWT)/sixteen;
      //cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT + 
      //      kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET + kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
      //      two*vx2_NEB - two*vx2_NET + two*vx2_NWB - two*vx2_NWT - 
      //      two*vx2_SEB + two*vx2_SET - two*vx2_SWB + two*vx2_SWT)/eight;
      //az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/four;
      //bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/four;
      //cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/four;
      //azz= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET + kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT + 
      //      kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET + kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
      //      two*vx3_NEB - two*vx3_NET - two*vx3_NWB + two*vx3_NWT + 
      //      two*vx3_SEB - two*vx3_SET - two*vx3_SWB + two*vx3_SWT)/eight;
      //bzz= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT + 
      //      kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET + kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
      //      two*vx3_NEB - two*vx3_NET + two*vx3_NWB - two*vx3_NWT - 
      //      two*vx3_SEB + two*vx3_SET - two*vx3_SWB + two*vx3_SWT)/eight;
      //czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
      //       kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
      //       two*kxxMzzFromfcNEQ_NEB - two*kxxMzzFromfcNEQ_NET + two*kxxMzzFromfcNEQ_NWB - two*kxxMzzFromfcNEQ_NWT + 
      //       two*kxxMzzFromfcNEQ_SEB - two*kxxMzzFromfcNEQ_SET + two*kxxMzzFromfcNEQ_SWB - two*kxxMzzFromfcNEQ_SWT - 
      //       two*vx1_NEB + two*vx1_NET + two*vx1_NWB - two*vx1_NWT - 
      //       two*vx1_SEB + two*vx1_SET + two*vx1_SWB - two*vx1_SWT - 
      //       two*vx2_NEB + two*vx2_NET - two*vx2_NWB + two*vx2_NWT + 
      //       two*vx2_SEB - two*vx2_SET + two*vx2_SWB - two*vx2_SWT)/sixteen;
      //axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - 
      //      vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/two;
      //bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - 
      //      vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/two;
      //cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - 
      //      vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/two;
      //axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - 
      //       vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/two;
      //bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - 
      //       vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/two;
      //cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - 
      //       vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/two;
      //ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + 
      //       vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/two;
      //byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + 
      //       vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/two;
      //cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + 
      //       vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/two;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + 
      //      vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + 
      //      vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + 
      //      vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;

      //////////////////////////////////////////////////////////////////////////
      //3
      //////////////////////////////////////////////////////////////////////////
      a0 = (-kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
            kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT - 
            kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
            kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
            c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_NWT + 
            c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
            c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_NWT + 
            c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_SWT + 
            c8o1*vx1_NEB + c8o1*vx1_NET + c8o1*vx1_NWB + c8o1*vx1_NWT + c8o1*vx1_SEB + 
            c8o1*vx1_SET + c8o1*vx1_SWB + c8o1*vx1_SWT + c2o1*vx2_NEB + c2o1*vx2_NET - 
            c2o1*vx2_NWB - c2o1*vx2_NWT - c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + 
            c2o1*vx2_SWT - c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
            c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      b0 = (c2o1*kxxMyyFromfcNEQ_NEB + c2o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_NWT - 
            c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_SWT - 
            kxxMzzFromfcNEQ_NEB - kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
            kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SWT - 
            c2o1*kxyFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_NET + c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_NWT - 
            c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_SWT + 
            c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
            c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_SWT + 
            c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
            c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT + 
            c8o1*vx2_NEB + c8o1*vx2_NET + c8o1*vx2_NWB + c8o1*vx2_NWT + 
            c8o1*vx2_SEB + c8o1*vx2_SET + c8o1*vx2_SWB + c8o1*vx2_SWT - 
            c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
            c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c64o1;
      c0 = (kxxMyyFromfcNEQ_NEB - kxxMyyFromfcNEQ_NET + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
            kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT - 
            c2o1*kxxMzzFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_NWT - 
            c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_SWT - 
            c2o1*kxzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_NWT - 
            c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_SWT - 
            c2o1*kyzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_NWT + 
            c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_SWT - 
            c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
            c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
            c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
            c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT + 
            c8o1*vx3_NEB + c8o1*vx3_NET + c8o1*vx3_NWB + c8o1*vx3_NWT + 
            c8o1*vx3_SEB + c8o1*vx3_SET + c8o1*vx3_SWB + c8o1*vx3_SWT)/c64o1;
      ax = (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT + vx1_SEB + vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      bx = (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT + vx2_SEB + vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cx = (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT + vx3_SEB + vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      axx= (kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NWT + 
            kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SWT + 
            kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NWT + 
            kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
            c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB - c2o1*vx2_NWT - 
            c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB + c2o1*vx2_SWT - 
            c2o1*vx3_NEB + c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
            c2o1*vx3_SEB + c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      bxx= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET - kxyFromfcNEQ_NWB - kxyFromfcNEQ_NWT + 
            kxyFromfcNEQ_SEB + kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
            c2o1*vx1_NEB - c2o1*vx1_NET + c2o1*vx1_NWB + c2o1*vx1_NWT + 
            c2o1*vx1_SEB + c2o1*vx1_SET - c2o1*vx1_SWB - c2o1*vx1_SWT)/c8o1;
      cxx= (kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB - kxzFromfcNEQ_NWT + 
            kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB - kxzFromfcNEQ_SWT + 
            c2o1*vx1_NEB - c2o1*vx1_NET - c2o1*vx1_NWB + c2o1*vx1_NWT + 
            c2o1*vx1_SEB - c2o1*vx1_SET - c2o1*vx1_SWB + c2o1*vx1_SWT)/c8o1;
      ay = (vx1_NEB + vx1_NET + vx1_NWB + vx1_NWT - vx1_SEB - vx1_SET - vx1_SWB - vx1_SWT)/c4o1;
      by = (vx2_NEB + vx2_NET + vx2_NWB + vx2_NWT - vx2_SEB - vx2_SET - vx2_SWB - vx2_SWT)/c4o1;
      cy = (vx3_NEB + vx3_NET + vx3_NWB + vx3_NWT - vx3_SEB - vx3_SET - vx3_SWB - vx3_SWT)/c4o1;
      ayy= (kxyFromfcNEQ_NEB + kxyFromfcNEQ_NET + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NWT - 
            kxyFromfcNEQ_SEB - kxyFromfcNEQ_SET - kxyFromfcNEQ_SWB - kxyFromfcNEQ_SWT - 
            c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB + c2o1*vx2_NWT + 
            c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB - c2o1*vx2_SWT)/c8o1;
      byy= (-c2o1*kxxMyyFromfcNEQ_NEB - c2o1*kxxMyyFromfcNEQ_NET - c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_NWT + 
            c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_SWT + 
            kxxMzzFromfcNEQ_NEB + kxxMzzFromfcNEQ_NET + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NWT - 
            kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SWT + 
            c2o1*vx1_NEB + c2o1*vx1_NET - c2o1*vx1_NWB - c2o1*vx1_NWT - 
            c2o1*vx1_SEB - c2o1*vx1_SET + c2o1*vx1_SWB + c2o1*vx1_SWT - 
            c2o1*vx3_NEB + c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
            c2o1*vx3_SEB - c2o1*vx3_SET + c2o1*vx3_SWB - c2o1*vx3_SWT)/c16o1;
      cyy= (kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
            kyzFromfcNEQ_SEB - kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB - kyzFromfcNEQ_SWT + 
            c2o1*vx2_NEB - c2o1*vx2_NET + c2o1*vx2_NWB - c2o1*vx2_NWT - 
            c2o1*vx2_SEB + c2o1*vx2_SET - c2o1*vx2_SWB + c2o1*vx2_SWT)/c8o1;
      az = (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT - vx1_SEB + vx1_SET - vx1_SWB + vx1_SWT)/c4o1;
      bz = (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT - vx2_SEB + vx2_SET - vx2_SWB + vx2_SWT)/c4o1;
      cz = (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT - vx3_SEB + vx3_SET - vx3_SWB + vx3_SWT)/c4o1;
      azz= (-kxzFromfcNEQ_NEB + kxzFromfcNEQ_NET - kxzFromfcNEQ_NWB + kxzFromfcNEQ_NWT - 
            kxzFromfcNEQ_SEB + kxzFromfcNEQ_SET - kxzFromfcNEQ_SWB + kxzFromfcNEQ_SWT + 
            c2o1*vx3_NEB - c2o1*vx3_NET - c2o1*vx3_NWB + c2o1*vx3_NWT + 
            c2o1*vx3_SEB - c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      bzz= (-kyzFromfcNEQ_NEB + kyzFromfcNEQ_NET - kyzFromfcNEQ_NWB + kyzFromfcNEQ_NWT - 
            kyzFromfcNEQ_SEB + kyzFromfcNEQ_SET - kyzFromfcNEQ_SWB + kyzFromfcNEQ_SWT + 
            c2o1*vx3_NEB - c2o1*vx3_NET + c2o1*vx3_NWB - c2o1*vx3_NWT - 
            c2o1*vx3_SEB + c2o1*vx3_SET - c2o1*vx3_SWB + c2o1*vx3_SWT)/c8o1;
      czz= (-kxxMyyFromfcNEQ_NEB + kxxMyyFromfcNEQ_NET - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NWT - 
            kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SWT + 
            c2o1*kxxMzzFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_NWT + 
            c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_SWT - 
            c2o1*vx1_NEB + c2o1*vx1_NET + c2o1*vx1_NWB - c2o1*vx1_NWT - 
            c2o1*vx1_SEB + c2o1*vx1_SET + c2o1*vx1_SWB - c2o1*vx1_SWT - 
            c2o1*vx2_NEB + c2o1*vx2_NET - c2o1*vx2_NWB + c2o1*vx2_NWT + 
            c2o1*vx2_SEB - c2o1*vx2_SET + c2o1*vx2_SWB - c2o1*vx2_SWT)/c16o1;
      axy= (vx1_NEB + vx1_NET - vx1_NWB - vx1_NWT - vx1_SEB - vx1_SET + vx1_SWB + vx1_SWT)/c2o1;
      bxy= (vx2_NEB + vx2_NET - vx2_NWB - vx2_NWT - vx2_SEB - vx2_SET + vx2_SWB + vx2_SWT)/c2o1;
      cxy= (vx3_NEB + vx3_NET - vx3_NWB - vx3_NWT - vx3_SEB - vx3_SET + vx3_SWB + vx3_SWT)/c2o1;
      axz= (-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT - vx1_SEB + vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      bxz= (-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT - vx2_SEB + vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cxz= (-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT - vx3_SEB + vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      ayz= (-vx1_NEB + vx1_NET - vx1_NWB + vx1_NWT + vx1_SEB - vx1_SET + vx1_SWB - vx1_SWT)/c2o1;
      byz= (-vx2_NEB + vx2_NET - vx2_NWB + vx2_NWT + vx2_SEB - vx2_SET + vx2_SWB - vx2_SWT)/c2o1;
      cyz= (-vx3_NEB + vx3_NET - vx3_NWB + vx3_NWT + vx3_SEB - vx3_SET + vx3_SWB - vx3_SWT)/c2o1;
      //axyz=-vx1_NEB + vx1_NET + vx1_NWB - vx1_NWT + vx1_SEB - vx1_SET - vx1_SWB + vx1_SWT;
      //bxyz=-vx2_NEB + vx2_NET + vx2_NWB - vx2_NWT + vx2_SEB - vx2_SET - vx2_SWB + vx2_SWT;
      //cxyz=-vx3_NEB + vx3_NET + vx3_NWB - vx3_NWT + vx3_SEB - vx3_SET - vx3_SWB + vx3_SWT;



      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot
      //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Position C 0.5, 0.5, 0.5
      //x = zero;
      //y = zero;
      //z = zero;

      //drho = c1o8*(drho_SWB + drho_NWB + drho_NEB + drho_SEB + drho_SWT + drho_NWT + drho_NET + drho_SET);
      drho = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
             drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
             drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
             drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
             drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
             drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
             drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
             drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
      vx1  = a0;
      vx2  = b0;
      vx3  = c0;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_W    =   feq_E   + c2o27* (c6o1*(-vx1        ));
      feq_S    =   feq_N   + c2o27* (c6o1*(    -vx2    ));
      feq_B    =   feq_T   + c2o27* (c6o1*(        -vx3));
      feq_SW   =   feq_NE  + c1o54* (c6o1*(-vx1-vx2    ));
      feq_NW   =   feq_SE  + c1o54* (c6o1*(-vx1+vx2    ));
      feq_BW   =   feq_TE  + c1o54* (c6o1*(-vx1    -vx3));
      feq_TW   =   feq_BE  + c1o54* (c6o1*(-vx1    +vx3));
      feq_BS   =   feq_TN  + c1o54* (c6o1*(    -vx2-vx3));
      feq_TS   =   feq_BN  + c1o54* (c6o1*(    -vx2+vx3));
      feq_BSW  =   feq_TNE + c1o216*(c6o1*(-vx1-vx2-vx3));
      feq_TSW  =   feq_BNE + c1o216*(c6o1*(-vx1-vx2+vx3));
      feq_BNW  =   feq_TSE + c1o216*(c6o1*(-vx1+vx2-vx3));
      feq_TNW  =   feq_BSE + c1o216*(c6o1*(-vx1+vx2+vx3));

      f_E    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c8o1*ax*op + c4o1*by*op + c4o1*cz*op)/(c54o1*o*op));
      f_N    = f_E + eps_new *((c2o1*(ax - by))/(c9o1*o));
      f_T    = f_E + eps_new *((c2o1*(ax - cz))/(c9o1*o));
      f_NE   = eps_new *(-(c5o1*cz*o + c3o1*(ay + bx)*op - c2o1*cz*op + ax*(c5o1*o + op) + by*(c5o1*o + op))/(c54o1*o*op));
      f_SE   = f_NE + eps_new *((  ay + bx )/(c9o1*o)); 
      f_TE   = eps_new *(-(c5o1*cz*o + by*(c5o1*o - c2o1*op) + c3o1*(az + cx)*op + cz*op + ax*(c5o1*o + op))/(c54o1*o*op));
      f_BE   = f_TE + eps_new *((  az + cx )/(c9o1*o));
      f_TN   = eps_new *(-(c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c2o1*ax*op + by*op + c3o1*bz*op + c3o1*cy*op + cz*op)/(c54o1*o*op));
      f_BN   = f_TN + eps_new *((  bz + cy )/(c9o1*o));
      f_ZERO = eps_new *((c5o1*(ax + by + cz))/(c9o1*op));
      f_TNE  = eps_new *(-(ay + az + bx + bz + cx + cy)/(c72o1*o));
      f_TSW  = - eps_new *((ay + bx)/(c36o1*o)) - f_TNE;
      f_TSE  = - eps_new *((az + cx)/(c36o1*o)) - f_TNE;
      f_TNW  = - eps_new *((bz + cy)/(c36o1*o)) - f_TNE;

      //////////////////////////////////////////////////////////////////////////
      //index 0
      kzero= posC[k];
      kw   = neighborCX[kzero];
      ks   = neighborCY[kzero];
      kb   = neighborCZ[kzero];
      ksw  = neighborCY[kw];
      kbw  = neighborCZ[kw];
      kbs  = neighborCZ[ks];
      kbsw = neighborCZ[ksw];
      ////////////////////////////////////////////////////////////////////////////////
      feC[kzero]   = f_E    + feq_E;
      fwC[kw]      = f_E    + feq_W;
      fnC[kzero]   = f_N    + feq_N;
      fsC[ks]      = f_N    + feq_S;
      ftC[kzero]   = f_T    + feq_T;
      fbC[kb]      = f_T    + feq_B;
      fneC[kzero]  = f_NE   + feq_NE;
      fswC[ksw]    = f_NE   + feq_SW;
      fseC[ks]     = f_SE   + feq_SE;
      fnwC[kw]     = f_SE   + feq_NW;
      fteC[kzero]  = f_TE   + feq_TE;
      fbwC[kbw]    = f_TE   + feq_BW;
      fbeC[kb]     = f_BE   + feq_BE;
      ftwC[kw]     = f_BE   + feq_TW;
      ftnC[kzero]  = f_TN   + feq_TN;
      fbsC[kbs]    = f_TN   + feq_BS;
      fbnC[kb]     = f_BN   + feq_BN;
      ftsC[ks]     = f_BN   + feq_TS;
      fzeroC[kzero]= f_ZERO + feq_ZERO;
      ftneC[kzero] = f_TNE  + feq_TNE;
      ftswC[ksw]   = f_TSW  + feq_TSW;
      ftseC[ks]    = f_TSE  + feq_TSE;
      ftnwC[kw]    = f_TNW  + feq_TNW;
      fbneC[kb]    = f_TSW  + feq_BNE;
      fbswC[kbsw]  = f_TNE  + feq_BSW;
      fbseC[kbs]   = f_TNW  + feq_BSE;
      fbnwC[kbw]   = f_TSE  + feq_BNW;
   }
}
//////////////////////////////////////////////////////////////////////////


































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFCThSMG7(    real* DC, 
                                             real* DF, 
                                             real* DD7C, 
                                             real* DD7F, 
                                             unsigned int* neighborCX,
                                             unsigned int* neighborCY,
                                             unsigned int* neighborCZ,
                                             unsigned int* neighborFX,
                                             unsigned int* neighborFY,
                                             unsigned int* neighborFZ,
                                             unsigned int size_MatC, 
                                             unsigned int size_MatF, 
                                             bool isEvenTimestep,
                                             unsigned int* posC, 
                                             unsigned int* posFSWB, 
                                             unsigned int kFC, 
                                             real nu,
                                             real diffusivity_coarse,
                                             OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, //*fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   //fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, //*fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      //fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      //fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }

   Distributions7 D7F;
   D7F.f[0] = &DD7F[0*size_MatF];
   D7F.f[1] = &DD7F[1*size_MatF];
   D7F.f[2] = &DD7F[2*size_MatF];
   D7F.f[3] = &DD7F[3*size_MatF];
   D7F.f[4] = &DD7F[4*size_MatF];
   D7F.f[5] = &DD7F[5*size_MatF];
   D7F.f[6] = &DD7F[6*size_MatF];

   Distributions7 D7C;
   if (isEvenTimestep==true)
   {
      D7C.f[0] = &DD7C[0*size_MatC];
      D7C.f[1] = &DD7C[1*size_MatC];
      D7C.f[2] = &DD7C[2*size_MatC];
      D7C.f[3] = &DD7C[3*size_MatC];
      D7C.f[4] = &DD7C[4*size_MatC];
      D7C.f[5] = &DD7C[5*size_MatC];
      D7C.f[6] = &DD7C[6*size_MatC];
   }
   else
   {
      D7C.f[0] = &DD7C[0*size_MatC];
      D7C.f[2] = &DD7C[1*size_MatC];
      D7C.f[1] = &DD7C[2*size_MatC];
      D7C.f[4] = &DD7C[3*size_MatC];
      D7C.f[3] = &DD7C[4*size_MatC];
      D7C.f[6] = &DD7C[5*size_MatC];
      D7C.f[5] = &DD7C[6*size_MatC];
   }

   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real       /* drho,*/vx1,vx2,vx3;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,/*f_ZERO,*/f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;

   real /*f7_ZERO,*/f7_E,f7_W,f7_N,f7_S,f7_T,f7_B;
   real Conc_C_C;
   real Conc_F_SWB, Conc_F_SWT, Conc_F_SET, Conc_F_SEB, Conc_F_NWB, Conc_F_NWT, Conc_F_NET, Conc_F_NEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz/*, axyz*/;

   //real omegaD_C     = two / (six * diffusivity_coarse + one);
   //real omegaD_F     = two / (six * diffusivity_coarse*two + one);
   real omegaD_C     = c3o1 - sqrt(c3o1);        //Quick and D�rrrty
   real omegaD_F     = c3o1 - sqrt(c3o1);        //Quick and D�rrrty
   real Lam         = -(c1o2-c1o1/omegaD_C);
   real nue_d       = Lam/c3o1;
   //real ae          = zero;
   //real ae_F        = zero;
   real ae          = diffusivity_coarse/nue_d - c1o1;
   real ae_F        = (diffusivity_coarse*c2o1)/nue_d - c1o1;

   real Mx,My,Mz,Mxx,Myy,Mzz,M0; 


   if(k<kFC){
      //////////////////////////////////////////////////////////////////////////
      real xoff = offFC.xOffFC[k];
      real yoff = offFC.yOffFC[k];
      real zoff = offFC.zOffFC[k];      
      real xoff_sq = xoff * xoff;
      real yoff_sq = yoff * yoff;
      real zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SWB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSWB = (Conc_F_SWB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSWB = (Conc_F_SWB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSWB = (Conc_F_SWB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SWT = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSWT = (Conc_F_SWT * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSWT = (Conc_F_SWT * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSWT = (Conc_F_SWT * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SET = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSET = (Conc_F_SET * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSET = (Conc_F_SET * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSET = (Conc_F_SET * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SEB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSEB = (Conc_F_SEB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSEB = (Conc_F_SEB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSEB = (Conc_F_SEB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NWB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNWB = (Conc_F_NWB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNWB = (Conc_F_NWB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNWB = (Conc_F_NWB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NWT = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNWT = (Conc_F_NWT * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNWT = (Conc_F_NWT * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNWT = (Conc_F_NWT * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NET = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNET = (Conc_F_NET * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNET = (Conc_F_NET * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNET = (Conc_F_NET * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NEB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNEB = (Conc_F_NEB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNEB = (Conc_F_NEB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNEB = (Conc_F_NEB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);




      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





      //linear
      //real Diff_Conc_XX = zero;
      //real Diff_Conc_YY = zero;
      //real Diff_Conc_ZZ = zero;





      //quadratic
      axx = ((Diff_Conc_X_FNEB + Diff_Conc_X_FSEB + Diff_Conc_X_FNET + Diff_Conc_X_FSET) - (Diff_Conc_X_FNWB + Diff_Conc_X_FSWB + Diff_Conc_X_FNWT + Diff_Conc_X_FSWT)) * c1o8;
      ayy = ((Diff_Conc_Y_FNEB + Diff_Conc_Y_FNWB + Diff_Conc_Y_FNET + Diff_Conc_Y_FNWT) - (Diff_Conc_Y_FSEB + Diff_Conc_Y_FSWB + Diff_Conc_Y_FSET + Diff_Conc_Y_FSWT)) * c1o8;
      azz = ((Diff_Conc_Z_FSET + Diff_Conc_Z_FSWT + Diff_Conc_Z_FNET + Diff_Conc_Z_FNWT) - (Diff_Conc_Z_FSEB + Diff_Conc_Z_FSWB + Diff_Conc_Z_FNEB + Diff_Conc_Z_FNWB)) * c1o8;




      //falsch
      //a0=(-two*(axx+ayy+azz) + Conc_F_NEB + Conc_F_NET + Conc_F_NWB + Conc_F_NWT + Conc_F_SEB + Conc_F_SET + Conc_F_SWB + Conc_F_SWT)/eight;
      //ax=(Conc_F_NEB + Conc_F_NET + Conc_F_NWB + Conc_F_NWT - Conc_F_SEB - Conc_F_SET - Conc_F_SWB - Conc_F_SWT)/four;
      //ay=(Conc_F_NEB + Conc_F_NET - Conc_F_NWB - Conc_F_NWT + Conc_F_SEB + Conc_F_SET - Conc_F_SWB - Conc_F_SWT)/four;
      //az=(-Conc_F_NEB + Conc_F_NET - Conc_F_NWB + Conc_F_NWT - Conc_F_SEB + Conc_F_SET - Conc_F_SWB + Conc_F_SWT)/four;
      //axy=(Conc_F_NEB + Conc_F_NET - Conc_F_NWB - Conc_F_NWT - Conc_F_SEB - Conc_F_SET + Conc_F_SWB + Conc_F_SWT)/two;
      //axz=(-Conc_F_NEB + Conc_F_NET - Conc_F_NWB + Conc_F_NWT + Conc_F_SEB - Conc_F_SET + Conc_F_SWB - Conc_F_SWT)/two;
      //ayz=(-Conc_F_NEB + Conc_F_NET + Conc_F_NWB - Conc_F_NWT - Conc_F_SEB + Conc_F_SET + Conc_F_SWB - Conc_F_SWT)/two;
      //axyz=-Conc_F_NEB + Conc_F_NET + Conc_F_NWB - Conc_F_NWT + Conc_F_SEB - Conc_F_SET - Conc_F_SWB + Conc_F_SWT;




      //besser
      a0=(-c2o1*axx - c2o1*ayy - c2o1*azz + Conc_F_NEB + Conc_F_NET + Conc_F_NWB + Conc_F_NWT + Conc_F_SEB + Conc_F_SET + Conc_F_SWB + Conc_F_SWT)/c8o1;
      ax=(Conc_F_NEB + Conc_F_NET - Conc_F_NWB - Conc_F_NWT + Conc_F_SEB + Conc_F_SET - Conc_F_SWB - Conc_F_SWT)/c4o1;
      ay=(Conc_F_NEB + Conc_F_NET + Conc_F_NWB + Conc_F_NWT - Conc_F_SEB - Conc_F_SET - Conc_F_SWB - Conc_F_SWT)/c4o1;
      az=(-Conc_F_NEB + Conc_F_NET - Conc_F_NWB + Conc_F_NWT - Conc_F_SEB + Conc_F_SET - Conc_F_SWB + Conc_F_SWT)/c4o1;
      axy=(Conc_F_NEB + Conc_F_NET - Conc_F_NWB - Conc_F_NWT - Conc_F_SEB - Conc_F_SET + Conc_F_SWB + Conc_F_SWT)/c2o1;
      axz=(-Conc_F_NEB + Conc_F_NET + Conc_F_NWB - Conc_F_NWT - Conc_F_SEB + Conc_F_SET + Conc_F_SWB - Conc_F_SWT)/c2o1;
      ayz=(-Conc_F_NEB + Conc_F_NET - Conc_F_NWB + Conc_F_NWT + Conc_F_SEB - Conc_F_SET + Conc_F_SWB - Conc_F_SWT)/c2o1;
      //axyz=-Conc_F_NEB + Conc_F_NET + Conc_F_NWB - Conc_F_NWT + Conc_F_SEB - Conc_F_SET - Conc_F_SWB + Conc_F_SWT;




      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot
      //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Position C 0.5, 0.5, 0.5
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //x = zero;
      //y = zero;
      //z = zero;

      //////////////////////////////////////////////////////////////////////////
      //index 0
      kzero= posC[k];
      kw   = neighborCX[kzero];
      ks   = neighborCY[kzero];
      kb   = neighborCZ[kzero];
      ksw  = neighborCY[kw];
      kbw  = neighborCZ[kw];
      kbs  = neighborCZ[ks];
      kbsw = neighborCZ[ksw];
      ////////////////////////////////////////////////////////////////////////////////
      vx1=feC[kzero]+fneC[kzero]+fseC[ks]+fteC[kzero]+fbeC[kb]-fwC[kw]-fnwC[kw]-fswC[ksw]-ftwC[kw]-fbwC[kbw]+ftneC[kzero]-ftswC[ksw]+ftseC[ks]-ftnwC[kw]+fbneC[kb]-fbswC[kbsw]+fbseC[kbs]-fbnwC[kbw];
      vx2=fnC[kzero]+fneC[kzero]+fnwC[kw]+ftnC[kzero]+fbnC[kb]-fsC[ks]-fseC[ks]-fswC[ksw]-ftsC[ks]-fbsC[kbs]+ftneC[kzero]-ftswC[ksw]-ftseC[ks]+ftnwC[kw]+fbneC[kb]-fbswC[kbsw]-fbseC[kbs]+fbnwC[kbw];
      vx3=ftC[kzero]+fteC[kzero]+ftwC[kw]+ftnC[kzero]+ftsC[ks]-fbC[kb]-fbeC[kb]-fbwC[kbw]-fbnC[kb]-fbsC[kbs]+ftneC[kzero]+ftswC[ksw]+ftseC[ks]+ftnwC[kw]-fbneC[kb]-fbswC[kbsw]-fbseC[kbs]-fbnwC[kbw];

      Conc_C_C = a0; //c1o8 * (Conc_F_SWB+Conc_F_SWT+Conc_F_SEB+Conc_F_SET+Conc_F_NWB+Conc_F_NWT+Conc_F_NEB+Conc_F_NET) - c4o32 * (Diff_Conc_XX + Diff_Conc_YY + Diff_Conc_ZZ);

      real Diff_Conc_X_C = ax; //c1o4 * (Conc_F_NEB - Conc_F_NWB + Conc_F_NET - Conc_F_NWT + Conc_F_SEB - Conc_F_SWB + Conc_F_SET - Conc_F_SWT);
      real Diff_Conc_Y_C = ay; //c1o4 * (Conc_F_NEB - Conc_F_SEB + Conc_F_NET - Conc_F_SET + Conc_F_NWB - Conc_F_SWB + Conc_F_NWT - Conc_F_SWT);
      real Diff_Conc_Z_C = az; //c1o4 * (Conc_F_NET - Conc_F_NEB + Conc_F_NWT - Conc_F_NWB + Conc_F_SET - Conc_F_SEB + Conc_F_SWT - Conc_F_SWB);

      Mx = Conc_C_C*vx1-(c1o1+ae)/(c3o1*omegaD_C)*c2o1/*c1o2*/*Diff_Conc_X_C;
      My = Conc_C_C*vx2-(c1o1+ae)/(c3o1*omegaD_C)*c2o1/*c1o2*/*Diff_Conc_Y_C;
      Mz = Conc_C_C*vx3-(c1o1+ae)/(c3o1*omegaD_C)*c2o1/*c1o2*/*Diff_Conc_Z_C;
      Mxx= Conc_C_C*((c1o1+ae)/c3o1+(vx1*vx1));
      Myy= Conc_C_C*((c1o1+ae)/c3o1+(vx2*vx2));
      Mzz= Conc_C_C*((c1o1+ae)/c3o1+(vx3*vx3));
      M0 = Conc_C_C;

      (D7C.f[0])[kzero] = M0-Mzz-Mxx-Myy;
      (D7C.f[1])[kzero] =  c1o2*Mx +c1o2*Mxx;
      (D7C.f[2])[kw   ] =  c1o2*Mxx-c1o2*Mx;
      (D7C.f[3])[kzero] =  c1o2*My +c1o2*Myy;
      (D7C.f[4])[ks   ] =  c1o2*Myy-c1o2*My;
      (D7C.f[5])[kzero] =  c1o2*Mzz+c1o2*Mz;
      (D7C.f[6])[kb   ] = -c1o2*Mz +c1o2*Mzz;
   }
}
//////////////////////////////////////////////////////////////////////////


































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFCThS7(   real* DC, 
                                          real* DF, 
                                          real* DD7C, 
                                          real* DD7F, 
                                          unsigned int* neighborCX,
                                          unsigned int* neighborCY,
                                          unsigned int* neighborCZ,
                                          unsigned int* neighborFX,
                                          unsigned int* neighborFY,
                                          unsigned int* neighborFZ,
                                          unsigned int size_MatC, 
                                          unsigned int size_MatF, 
                                          bool isEvenTimestep,
                                          unsigned int* posC, 
                                          unsigned int* posFSWB, 
                                          unsigned int kFC, 
                                          real nu,
                                          real diffusivity_coarse)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, //*fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   //fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, //*fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      //fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      //fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }

   Distributions7 D7F;
   D7F.f[0] = &DD7F[0*size_MatF];
   D7F.f[1] = &DD7F[1*size_MatF];
   D7F.f[2] = &DD7F[2*size_MatF];
   D7F.f[3] = &DD7F[3*size_MatF];
   D7F.f[4] = &DD7F[4*size_MatF];
   D7F.f[5] = &DD7F[5*size_MatF];
   D7F.f[6] = &DD7F[6*size_MatF];

   Distributions7 D7C;
   if (isEvenTimestep==true)
   {
      D7C.f[0] = &DD7C[0*size_MatC];
      D7C.f[1] = &DD7C[1*size_MatC];
      D7C.f[2] = &DD7C[2*size_MatC];
      D7C.f[3] = &DD7C[3*size_MatC];
      D7C.f[4] = &DD7C[4*size_MatC];
      D7C.f[5] = &DD7C[5*size_MatC];
      D7C.f[6] = &DD7C[6*size_MatC];
   }
   else
   {
      D7C.f[0] = &DD7C[0*size_MatC];
      D7C.f[2] = &DD7C[1*size_MatC];
      D7C.f[1] = &DD7C[2*size_MatC];
      D7C.f[4] = &DD7C[3*size_MatC];
      D7C.f[3] = &DD7C[4*size_MatC];
      D7C.f[6] = &DD7C[5*size_MatC];
      D7C.f[5] = &DD7C[6*size_MatC];
   }

   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real       /* drho,*/vx1,vx2,vx3;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,/*f_ZERO,*/f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;

   //real x,y,z;
   real /*f7_ZERO,*/f7_E,f7_W,f7_N,f7_S,f7_T,f7_B;
   real Conc_C_C;
   real Conc_F_SWB, Conc_F_SWT, Conc_F_SET, Conc_F_SEB, Conc_F_NWB, Conc_F_NWT, Conc_F_NET, Conc_F_NEB;

   //real omegaD_C     = two / (six * diffusivity_coarse + one);
   //real omegaD_F     = two / (six * diffusivity_coarse*two + one);
   real omegaD_C     = c3o1 - sqrt(c3o1);        //Quick and D�rrrty
   real omegaD_F     = c3o1 - sqrt(c3o1);        //Quick and D�rrrty
   real Lam         = -(c1o2-c1o1/omegaD_C);
   real nue_d       = Lam/c3o1;
   //real ae          = zero;
   //real ae_F        = zero;
   real ae          = diffusivity_coarse/nue_d - c1o1;
   real ae_F        = (diffusivity_coarse*c2o1)/nue_d - c1o1;

   //real ux_sq, uy_sq, uz_sq;
   real Mx,My,Mz,Mxx,Myy,Mzz,M0; 


   if(k<kFC){
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SWB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSWB = (Conc_F_SWB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSWB = (Conc_F_SWB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSWB = (Conc_F_SWB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SWT = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSWT = (Conc_F_SWT * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSWT = (Conc_F_SWT * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSWT = (Conc_F_SWT * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SET = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSET = (Conc_F_SET * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSET = (Conc_F_SET * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSET = (Conc_F_SET * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_SEB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FSEB = (Conc_F_SEB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FSEB = (Conc_F_SEB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FSEB = (Conc_F_SEB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NWB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNWB = (Conc_F_NWB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNWB = (Conc_F_NWB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNWB = (Conc_F_NWB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NWT = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNWT = (Conc_F_NWT * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNWT = (Conc_F_NWT * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNWT = (Conc_F_NWT * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NET = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNET = (Conc_F_NET * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNET = (Conc_F_NET * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNET = (Conc_F_NET * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      //f7_ZERO = (D7F.f[0])[kzero];
      f7_E    = (D7F.f[1])[kzero];
      f7_W    = (D7F.f[2])[kw];
      f7_N    = (D7F.f[3])[kzero];
      f7_S    = (D7F.f[4])[ks];
      f7_T    = (D7F.f[5])[kzero];
      f7_B    = (D7F.f[6])[kb];

      Conc_F_NEB = (D7F.f[0])[kzero]+(D7F.f[1])[kzero]+(D7F.f[2])[kw]+(D7F.f[3])[kzero]+(D7F.f[4])[ks]+(D7F.f[5])[kzero]+(D7F.f[6])[kb];

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   = f7_E-f7_W;
      My   = f7_N-f7_S;
      Mz   = f7_T-f7_B;

      real Diff_Conc_X_FNEB = (Conc_F_NEB * vx1 - Mx) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Y_FNEB = (Conc_F_NEB * vx2 - My) * (c3o1*omegaD_F) / (c1o1 + ae_F);
      real Diff_Conc_Z_FNEB = (Conc_F_NEB * vx3 - Mz) * (c3o1*omegaD_F) / (c1o1 + ae_F);

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      //linear
      //real Diff_Conc_XX = zero;
      //real Diff_Conc_YY = zero;
      //real Diff_Conc_ZZ = zero;

      //quadratic
      real Diff_Conc_XX = ((Diff_Conc_X_FNEB + Diff_Conc_X_FSEB + Diff_Conc_X_FNET + Diff_Conc_X_FSET) - (Diff_Conc_X_FNWB + Diff_Conc_X_FSWB + Diff_Conc_X_FNWT + Diff_Conc_X_FSWT)) * c1o4;
      real Diff_Conc_YY = ((Diff_Conc_Y_FNEB + Diff_Conc_Y_FNWB + Diff_Conc_Y_FNET + Diff_Conc_Y_FNWT) - (Diff_Conc_Y_FSEB + Diff_Conc_Y_FSWB + Diff_Conc_Y_FSET + Diff_Conc_Y_FSWT)) * c1o4;
      real Diff_Conc_ZZ = ((Diff_Conc_Z_FSET + Diff_Conc_Z_FSWT + Diff_Conc_Z_FNET + Diff_Conc_Z_FNWT) - (Diff_Conc_Z_FSEB + Diff_Conc_Z_FSWB + Diff_Conc_Z_FNEB + Diff_Conc_Z_FNWB)) * c1o4;


      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Position C 0.5, 0.5, 0.5
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //x = zero;
      //y = zero;
      //z = zero;

      //////////////////////////////////////////////////////////////////////////
      //index 0
      kzero= posC[k];
      kw   = neighborCX[kzero];
      ks   = neighborCY[kzero];
      kb   = neighborCZ[kzero];
      ksw  = neighborCY[kw];
      kbw  = neighborCZ[kw];
      kbs  = neighborCZ[ks];
      kbsw = neighborCZ[ksw];
      ////////////////////////////////////////////////////////////////////////////////
      vx1=feC[kzero]+fneC[kzero]+fseC[ks]+fteC[kzero]+fbeC[kb]-fwC[kw]-fnwC[kw]-fswC[ksw]-ftwC[kw]-fbwC[kbw]+ftneC[kzero]-ftswC[ksw]+ftseC[ks]-ftnwC[kw]+fbneC[kb]-fbswC[kbsw]+fbseC[kbs]-fbnwC[kbw];
      vx2=fnC[kzero]+fneC[kzero]+fnwC[kw]+ftnC[kzero]+fbnC[kb]-fsC[ks]-fseC[ks]-fswC[ksw]-ftsC[ks]-fbsC[kbs]+ftneC[kzero]-ftswC[ksw]-ftseC[ks]+ftnwC[kw]+fbneC[kb]-fbswC[kbsw]-fbseC[kbs]+fbnwC[kbw];
      vx3=ftC[kzero]+fteC[kzero]+ftwC[kw]+ftnC[kzero]+ftsC[ks]-fbC[kb]-fbeC[kb]-fbwC[kbw]-fbnC[kb]-fbsC[kbs]+ftneC[kzero]+ftswC[ksw]+ftseC[ks]+ftnwC[kw]-fbneC[kb]-fbswC[kbsw]-fbseC[kbs]-fbnwC[kbw];

      Conc_C_C = c1o8 * (Conc_F_SWB+Conc_F_SWT+Conc_F_SEB+Conc_F_SET+Conc_F_NWB+Conc_F_NWT+Conc_F_NEB+Conc_F_NET) - c4o32 * (Diff_Conc_XX + Diff_Conc_YY + Diff_Conc_ZZ);

      real Diff_Conc_X_C =c1o4 * (Conc_F_NEB - Conc_F_NWB + Conc_F_NET - Conc_F_NWT + Conc_F_SEB - Conc_F_SWB + Conc_F_SET - Conc_F_SWT);
      real Diff_Conc_Y_C =c1o4 * (Conc_F_NEB - Conc_F_SEB + Conc_F_NET - Conc_F_SET + Conc_F_NWB - Conc_F_SWB + Conc_F_NWT - Conc_F_SWT);
      real Diff_Conc_Z_C =c1o4 * (Conc_F_NET - Conc_F_NEB + Conc_F_NWT - Conc_F_NWB + Conc_F_SET - Conc_F_SEB + Conc_F_SWT - Conc_F_SWB);

      Mx = Conc_C_C*vx1-(c1o1+ae)/(c3o1*omegaD_C)*c2o1/*c1o2*/*Diff_Conc_X_C;
      My = Conc_C_C*vx2-(c1o1+ae)/(c3o1*omegaD_C)*c2o1/*c1o2*/*Diff_Conc_Y_C;
      Mz = Conc_C_C*vx3-(c1o1+ae)/(c3o1*omegaD_C)*c2o1/*c1o2*/*Diff_Conc_Z_C;
      Mxx= Conc_C_C*((c1o1+ae)/c3o1+(vx1*vx1));
      Myy= Conc_C_C*((c1o1+ae)/c3o1+(vx2*vx2));
      Mzz= Conc_C_C*((c1o1+ae)/c3o1+(vx3*vx3));
      M0 = Conc_C_C;

      (D7C.f[0])[kzero] = M0-Mzz-Mxx-Myy;
      (D7C.f[1])[kzero] =  c1o2*Mx +c1o2*Mxx;
      (D7C.f[2])[kw   ] =  c1o2*Mxx-c1o2*Mx;
      (D7C.f[3])[kzero] =  c1o2*My +c1o2*Myy;
      (D7C.f[4])[ks   ] =  c1o2*Myy-c1o2*My;
      (D7C.f[5])[kzero] =  c1o2*Mzz+c1o2*Mz;
      (D7C.f[6])[kb   ] = -c1o2*Mz +c1o2*Mzz;
   }
}
//////////////////////////////////////////////////////////////////////////


































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFCThS27(     real* DC, 
                                             real* DF, 
                                             real* DD27C, 
                                             real* DD27F, 
                                             unsigned int* neighborCX,
                                             unsigned int* neighborCY,
                                             unsigned int* neighborCZ,
                                             unsigned int* neighborFX,
                                             unsigned int* neighborFY,
                                             unsigned int* neighborFZ,
                                             unsigned int size_MatC, 
                                             unsigned int size_MatF, 
                                             bool isEvenTimestep,
                                             unsigned int* posC, 
                                             unsigned int* posFSWB, 
                                             unsigned int kFC, 
                                             real nu,
                                             real diffusivity_coarse,
											 OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, //*fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   //fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, //*fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      //fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      //fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }

   Distributions27 D27F;
   D27F.f[DIR_P00   ] = &DD27F[DIR_P00   *size_MatF];
   D27F.f[DIR_M00   ] = &DD27F[DIR_M00   *size_MatF];
   D27F.f[DIR_0P0   ] = &DD27F[DIR_0P0   *size_MatF];
   D27F.f[DIR_0M0   ] = &DD27F[DIR_0M0   *size_MatF];
   D27F.f[DIR_00P   ] = &DD27F[DIR_00P   *size_MatF];
   D27F.f[DIR_00M   ] = &DD27F[DIR_00M   *size_MatF];
   D27F.f[DIR_PP0  ] = &DD27F[DIR_PP0  *size_MatF];
   D27F.f[DIR_MM0  ] = &DD27F[DIR_MM0  *size_MatF];
   D27F.f[DIR_PM0  ] = &DD27F[DIR_PM0  *size_MatF];
   D27F.f[DIR_MP0  ] = &DD27F[DIR_MP0  *size_MatF];
   D27F.f[DIR_P0P  ] = &DD27F[DIR_P0P  *size_MatF];
   D27F.f[DIR_M0M  ] = &DD27F[DIR_M0M  *size_MatF];
   D27F.f[DIR_P0M  ] = &DD27F[DIR_P0M  *size_MatF];
   D27F.f[DIR_M0P  ] = &DD27F[DIR_M0P  *size_MatF];
   D27F.f[DIR_0PP  ] = &DD27F[DIR_0PP  *size_MatF];
   D27F.f[DIR_0MM  ] = &DD27F[DIR_0MM  *size_MatF];
   D27F.f[DIR_0PM  ] = &DD27F[DIR_0PM  *size_MatF];
   D27F.f[DIR_0MP  ] = &DD27F[DIR_0MP  *size_MatF];
   D27F.f[DIR_000] = &DD27F[DIR_000*size_MatF];
   D27F.f[DIR_PPP ] = &DD27F[DIR_PPP *size_MatF];
   D27F.f[DIR_MMP ] = &DD27F[DIR_MMP *size_MatF];
   D27F.f[DIR_PMP ] = &DD27F[DIR_PMP *size_MatF];
   D27F.f[DIR_MPP ] = &DD27F[DIR_MPP *size_MatF];
   D27F.f[DIR_PPM ] = &DD27F[DIR_PPM *size_MatF];
   D27F.f[DIR_MMM ] = &DD27F[DIR_MMM *size_MatF];
   D27F.f[DIR_PMM ] = &DD27F[DIR_PMM *size_MatF];
   D27F.f[DIR_MPM ] = &DD27F[DIR_MPM *size_MatF];

   Distributions27 D27C;
   if (isEvenTimestep==true)
   {
      D27C.f[DIR_P00   ] = &DD27C[DIR_P00   *size_MatC];
      D27C.f[DIR_M00   ] = &DD27C[DIR_M00   *size_MatC];
      D27C.f[DIR_0P0   ] = &DD27C[DIR_0P0   *size_MatC];
      D27C.f[DIR_0M0   ] = &DD27C[DIR_0M0   *size_MatC];
      D27C.f[DIR_00P   ] = &DD27C[DIR_00P   *size_MatC];
      D27C.f[DIR_00M   ] = &DD27C[DIR_00M   *size_MatC];
      D27C.f[DIR_PP0  ] = &DD27C[DIR_PP0  *size_MatC];
      D27C.f[DIR_MM0  ] = &DD27C[DIR_MM0  *size_MatC];
      D27C.f[DIR_PM0  ] = &DD27C[DIR_PM0  *size_MatC];
      D27C.f[DIR_MP0  ] = &DD27C[DIR_MP0  *size_MatC];
      D27C.f[DIR_P0P  ] = &DD27C[DIR_P0P  *size_MatC];
      D27C.f[DIR_M0M  ] = &DD27C[DIR_M0M  *size_MatC];
      D27C.f[DIR_P0M  ] = &DD27C[DIR_P0M  *size_MatC];
      D27C.f[DIR_M0P  ] = &DD27C[DIR_M0P  *size_MatC];
      D27C.f[DIR_0PP  ] = &DD27C[DIR_0PP  *size_MatC];
      D27C.f[DIR_0MM  ] = &DD27C[DIR_0MM  *size_MatC];
      D27C.f[DIR_0PM  ] = &DD27C[DIR_0PM  *size_MatC];
      D27C.f[DIR_0MP  ] = &DD27C[DIR_0MP  *size_MatC];
      D27C.f[DIR_000] = &DD27C[DIR_000*size_MatC];
      D27C.f[DIR_PPP ] = &DD27C[DIR_PPP *size_MatC];
      D27C.f[DIR_MMP ] = &DD27C[DIR_MMP *size_MatC];
      D27C.f[DIR_PMP ] = &DD27C[DIR_PMP *size_MatC];
      D27C.f[DIR_MPP ] = &DD27C[DIR_MPP *size_MatC];
      D27C.f[DIR_PPM ] = &DD27C[DIR_PPM *size_MatC];
      D27C.f[DIR_MMM ] = &DD27C[DIR_MMM *size_MatC];
      D27C.f[DIR_PMM ] = &DD27C[DIR_PMM *size_MatC];
      D27C.f[DIR_MPM ] = &DD27C[DIR_MPM *size_MatC];
   }
   else
   {
      D27C.f[DIR_M00   ] = &DD27C[DIR_P00   *size_MatC];
      D27C.f[DIR_P00   ] = &DD27C[DIR_M00   *size_MatC];
      D27C.f[DIR_0M0   ] = &DD27C[DIR_0P0   *size_MatC];
      D27C.f[DIR_0P0   ] = &DD27C[DIR_0M0   *size_MatC];
      D27C.f[DIR_00M   ] = &DD27C[DIR_00P   *size_MatC];
      D27C.f[DIR_00P   ] = &DD27C[DIR_00M   *size_MatC];
      D27C.f[DIR_MM0  ] = &DD27C[DIR_PP0  *size_MatC];
      D27C.f[DIR_PP0  ] = &DD27C[DIR_MM0  *size_MatC];
      D27C.f[DIR_MP0  ] = &DD27C[DIR_PM0  *size_MatC];
      D27C.f[DIR_PM0  ] = &DD27C[DIR_MP0  *size_MatC];
      D27C.f[DIR_M0M  ] = &DD27C[DIR_P0P  *size_MatC];
      D27C.f[DIR_P0P  ] = &DD27C[DIR_M0M  *size_MatC];
      D27C.f[DIR_M0P  ] = &DD27C[DIR_P0M  *size_MatC];
      D27C.f[DIR_P0M  ] = &DD27C[DIR_M0P  *size_MatC];
      D27C.f[DIR_0MM  ] = &DD27C[DIR_0PP  *size_MatC];
      D27C.f[DIR_0PP  ] = &DD27C[DIR_0MM  *size_MatC];
      D27C.f[DIR_0MP  ] = &DD27C[DIR_0PM  *size_MatC];
      D27C.f[DIR_0PM  ] = &DD27C[DIR_0MP  *size_MatC];
      D27C.f[DIR_000] = &DD27C[DIR_000*size_MatC];
      D27C.f[DIR_MMM ] = &DD27C[DIR_PPP *size_MatC];
      D27C.f[DIR_PPM ] = &DD27C[DIR_MMP *size_MatC];
      D27C.f[DIR_MPM ] = &DD27C[DIR_PMP *size_MatC];
      D27C.f[DIR_PMM ] = &DD27C[DIR_MPP *size_MatC];
      D27C.f[DIR_MMP ] = &DD27C[DIR_PPM *size_MatC];
      D27C.f[DIR_PPP ] = &DD27C[DIR_MMM *size_MatC];
      D27C.f[DIR_MPP ] = &DD27C[DIR_PMM *size_MatC];
      D27C.f[DIR_PMP ] = &DD27C[DIR_MPM *size_MatC];
   }

   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real       /* drho,*/vx1,vx2,vx3,cu_sq;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,/*f_ZERO,*/f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;

   real f27E,f27W,f27N,f27S,f27T,f27B,f27NE,f27SW,f27SE,f27NW,f27TE,f27BW,f27BE,f27TW,f27TN,f27BS,f27BN,f27TS,f27ZERO,f27TNE,f27TSW,f27TSE,f27TNW,f27BNE,f27BSW,f27BSE,f27BNW;
   real Mx,My,Mz/*,Mxx,Myy,Mzz,M0*/; 
   //real Conc_C_C;
   real Conc_F_SWB, Conc_F_SWT, Conc_F_SET, Conc_F_SEB, Conc_F_NWB, Conc_F_NWT, Conc_F_NET, Conc_F_NEB;

   real omegaD_C     = c2o1 / (c6o1 * diffusivity_coarse + c1o1);
   real omegaD_F     = c2o1 / (c6o1 * diffusivity_coarse*c2o1 + c1o1);
   //real omegaD     = -three + sqrt(three);
   //real Lam         = -(c1o2+one/omegaD);
   //real nue_d       = Lam/three;
   //real ae          = zero;
   //real ae_F        = zero;
   //real ae          = diffusivity_fine/nue_d - one;
   //real ae_F        = (diffusivity_fine/two)/nue_d - one;

   // real x,       y,       z;
   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;

   if(k<kFC){
      //////////////////////////////////////////////////////////////////////////
      xoff    = offFC.xOffFC[k];
      yoff    = offFC.yOffFC[k];
      zoff    = offFC.zOffFC[k];
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_SWB = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FSWB = (Conc_F_SWB * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FSWB = (Conc_F_SWB * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FSWB = (Conc_F_SWB * vx3 - Mz) * (c3o1*omegaD_F);




      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_SWT = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FSWT = (Conc_F_SWT * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FSWT = (Conc_F_SWT * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FSWT = (Conc_F_SWT * vx3 - Mz) * (c3o1*omegaD_F);




      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_SET = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FSET = (Conc_F_SET * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FSET = (Conc_F_SET * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FSET = (Conc_F_SET * vx3 - Mz) * (c3o1*omegaD_F);




      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_SEB = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FSEB = (Conc_F_SEB * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FSEB = (Conc_F_SEB * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FSEB = (Conc_F_SEB * vx3 - Mz) * (c3o1*omegaD_F);




      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_NWB = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FNWB = (Conc_F_NWB * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FNWB = (Conc_F_NWB * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FNWB = (Conc_F_NWB * vx3 - Mz) * (c3o1*omegaD_F);




      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_NWT = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FNWT = (Conc_F_NWT * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FNWT = (Conc_F_NWT * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FNWT = (Conc_F_NWT * vx3 - Mz) * (c3o1*omegaD_F);




      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_NET = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FNET = (Conc_F_NET * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FNET = (Conc_F_NET * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FNET = (Conc_F_NET * vx3 - Mz) * (c3o1*omegaD_F);




      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      //f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];
      //////////////////////////////////////////////////////////////////////////////////
      f27E    =  (D27F.f[DIR_P00   ])[kzero];//ke
      f27W    =  (D27F.f[DIR_M00   ])[kw   ];
      f27N    =  (D27F.f[DIR_0P0   ])[kzero];//kn
      f27S    =  (D27F.f[DIR_0M0   ])[ks   ];
      f27T    =  (D27F.f[DIR_00P   ])[kzero];//kt
      f27B    =  (D27F.f[DIR_00M   ])[kb   ];
      f27NE   =  (D27F.f[DIR_PP0  ])[kzero];//kne
      f27SW   =  (D27F.f[DIR_MM0  ])[ksw  ];
      f27SE   =  (D27F.f[DIR_PM0  ])[ks   ];//kse
      f27NW   =  (D27F.f[DIR_MP0  ])[kw   ];//knw
      f27TE   =  (D27F.f[DIR_P0P  ])[kzero];//kte
      f27BW   =  (D27F.f[DIR_M0M  ])[kbw  ];
      f27BE   =  (D27F.f[DIR_P0M  ])[kb   ];//kbe
      f27TW   =  (D27F.f[DIR_M0P  ])[kw   ];//ktw
      f27TN   =  (D27F.f[DIR_0PP  ])[kzero];//ktn
      f27BS   =  (D27F.f[DIR_0MM  ])[kbs  ];
      f27BN   =  (D27F.f[DIR_0PM  ])[kb   ];//kbn
      f27TS   =  (D27F.f[DIR_0MP  ])[ks   ];//kts
      f27ZERO =  (D27F.f[DIR_000])[kzero];//kzero
      f27TNE   = (D27F.f[DIR_PPP ])[kzero];//ktne
      f27TSW   = (D27F.f[DIR_MMP ])[ksw  ];//ktsw
      f27TSE   = (D27F.f[DIR_PMP ])[ks   ];//ktse
      f27TNW   = (D27F.f[DIR_MPP ])[kw   ];//ktnw
      f27BNE   = (D27F.f[DIR_PPM ])[kb   ];//kbne
      f27BSW   = (D27F.f[DIR_MMM ])[kbsw ];
      f27BSE   = (D27F.f[DIR_PMM ])[kbs  ];//kbse
      f27BNW   = (D27F.f[DIR_MPM ])[kbw  ];//kbnw

      Conc_F_NEB = f27E + f27W + f27N + f27S + f27T + f27B + f27NE + f27SW + f27SE + f27NW + 
                   f27TE + f27BW + f27BE + f27TW + f27TN + f27BS + f27BN + f27TS + f27ZERO + 
                   f27TNE + f27TSW + f27TSE + f27TNW + f27BNE + f27BSW + f27BSE + f27BNW;

      vx1  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      Mx   =f27E+f27NE+f27SE+f27TE+f27BE-f27W-f27NW-f27SW-f27TW-f27BW+f27TNE-f27TSW+f27TSE-f27TNW+f27BNE-f27BSW+f27BSE-f27BNW;
      My   =f27N+f27NE+f27NW+f27TN+f27BN-f27S-f27SE-f27SW-f27TS-f27BS+f27TNE-f27TSW-f27TSE+f27TNW+f27BNE-f27BSW-f27BSE+f27BNW;
      Mz   =f27T+f27TE+f27TW+f27TN+f27TS-f27B-f27BE-f27BW-f27BN-f27BS+f27TNE+f27TSW+f27TSE+f27TNW-f27BNE-f27BSW-f27BSE-f27BNW;

      real Diff_Conc_X_FNEB = (Conc_F_NEB * vx1 - Mx) * (c3o1*omegaD_F);
      real Diff_Conc_Y_FNEB = (Conc_F_NEB * vx2 - My) * (c3o1*omegaD_F);
      real Diff_Conc_Z_FNEB = (Conc_F_NEB * vx3 - Mz) * (c3o1*omegaD_F);




      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





      //linear
      //real Diff_Conc_XX = zero;
      //real Diff_Conc_YY = zero;
      //real Diff_Conc_ZZ = zero;





      //quadratic
      real Diff_Conc_XX = ((Diff_Conc_X_FNEB + Diff_Conc_X_FSEB + Diff_Conc_X_FNET + Diff_Conc_X_FSET) - (Diff_Conc_X_FNWB + Diff_Conc_X_FSWB + Diff_Conc_X_FNWT + Diff_Conc_X_FSWT)) * c1o4;
      real Diff_Conc_YY = ((Diff_Conc_Y_FNEB + Diff_Conc_Y_FNWB + Diff_Conc_Y_FNET + Diff_Conc_Y_FNWT) - (Diff_Conc_Y_FSEB + Diff_Conc_Y_FSWB + Diff_Conc_Y_FSET + Diff_Conc_Y_FSWT)) * c1o4;
      real Diff_Conc_ZZ = ((Diff_Conc_Z_FSET + Diff_Conc_Z_FSWT + Diff_Conc_Z_FNET + Diff_Conc_Z_FNWT) - (Diff_Conc_Z_FSEB + Diff_Conc_Z_FSWB + Diff_Conc_Z_FNEB + Diff_Conc_Z_FNWB)) * c1o4;


	  real dx = c1o4 * (Conc_F_NEB + Conc_F_NET - Conc_F_NWB - Conc_F_NWT + Conc_F_SEB + Conc_F_SET - Conc_F_SWB - Conc_F_SWT);
	  real dy = c1o4 * (Conc_F_NEB + Conc_F_NET + Conc_F_NWB + Conc_F_NWT - Conc_F_SEB - Conc_F_SET - Conc_F_SWB - Conc_F_SWT);
	  real dz = c1o4 * (-Conc_F_NEB + Conc_F_NET - Conc_F_NWB + Conc_F_NWT - Conc_F_SEB + Conc_F_SET - Conc_F_SWB + Conc_F_SWT);
	  real dxx = Diff_Conc_XX * c1o2;
	  real dyy = Diff_Conc_YY * c1o2;
	  real dzz = Diff_Conc_ZZ * c1o2;
	  real dxy = c1o2 * (Conc_F_NEB + Conc_F_NET - Conc_F_NWB - Conc_F_NWT - Conc_F_SEB - Conc_F_SET + Conc_F_SWB + Conc_F_SWT);
	  real dyz = c1o2 * (-Conc_F_NEB + Conc_F_NET - Conc_F_NWB + Conc_F_NWT + Conc_F_SEB - Conc_F_SET + Conc_F_SWB - Conc_F_SWT);
	  real dxz = c1o2 * (-Conc_F_NEB + Conc_F_NET + Conc_F_NWB - Conc_F_NWT - Conc_F_SEB + Conc_F_SET + Conc_F_SWB - Conc_F_SWT);
	  //real dxyz = -Conc_F_NEB + Conc_F_NET + Conc_F_NWB - Conc_F_NWT + Conc_F_SEB - Conc_F_SET - Conc_F_SWB + Conc_F_SWT;
	  real d0 = c1o8 * (-c2o1 * dxx - c2o1 * dyy - c2o1 * dzz + Conc_F_NEB + Conc_F_NET + Conc_F_NWB + Conc_F_NWT + Conc_F_SEB + Conc_F_SET + Conc_F_SWB + Conc_F_SWT);

     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot
      //
	  // X------X
	  // |      | 	
	  // |	 ---+-->X     ----> off-vector
	  // |		|  
	  // X------X   
	  //			
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      d0 = d0 + xoff * dx + yoff * dy + zoff * dz + xoff_sq * dxx + yoff_sq * dyy + zoff_sq * dzz + xoff*yoff*dxy + xoff*zoff*dxz + yoff*zoff*dyz;
      dx = dx + c2o1 * xoff * dxx + yoff * dxy + zoff * dxz;
      dy = dy + c2o1 * yoff * dyy + xoff * dxy + zoff * dyz;
      dz = dz + c2o1 * zoff * dzz + xoff * dxz + yoff * dyz;
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Position C 0.5, 0.5, 0.5
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //x = zero;
      //y = zero;
      //z = zero;

      //////////////////////////////////////////////////////////////////////////
      //index 0
      kzero= posC[k];
      kw   = neighborCX[kzero];
      ks   = neighborCY[kzero];
      kb   = neighborCZ[kzero];
      ksw  = neighborCY[kw];
      kbw  = neighborCZ[kw];
      kbs  = neighborCZ[ks];
      kbsw = neighborCZ[ksw];
      ////////////////////////////////////////////////////////////////////////////////
      vx1=feC[kzero]+fneC[kzero]+fseC[ks]+fteC[kzero]+fbeC[kb]-fwC[kw]-fnwC[kw]-fswC[ksw]-ftwC[kw]-fbwC[kbw]+ftneC[kzero]-ftswC[ksw]+ftseC[ks]-ftnwC[kw]+fbneC[kb]-fbswC[kbsw]+fbseC[kbs]-fbnwC[kbw];
      vx2=fnC[kzero]+fneC[kzero]+fnwC[kw]+ftnC[kzero]+fbnC[kb]-fsC[ks]-fseC[ks]-fswC[ksw]-ftsC[ks]-fbsC[kbs]+ftneC[kzero]-ftswC[ksw]-ftseC[ks]+ftnwC[kw]+fbneC[kb]-fbswC[kbsw]-fbseC[kbs]+fbnwC[kbw];
      vx3=ftC[kzero]+fteC[kzero]+ftwC[kw]+ftnC[kzero]+ftsC[ks]-fbC[kb]-fbeC[kb]-fbwC[kbw]-fbnC[kb]-fbsC[kbs]+ftneC[kzero]+ftswC[ksw]+ftseC[ks]+ftnwC[kw]-fbneC[kb]-fbswC[kbsw]-fbseC[kbs]-fbnwC[kbw];

      //Conc_C_C = c1o8 * (Conc_F_SWB+Conc_F_SWT+Conc_F_SEB+Conc_F_SET+Conc_F_NWB+Conc_F_NWT+Conc_F_NEB+Conc_F_NET) - c4o32 * (Diff_Conc_XX + Diff_Conc_YY + Diff_Conc_ZZ);

      //real Diff_Conc_X_C = c1o4 * (Conc_F_NEB - Conc_F_NWB + Conc_F_NET - Conc_F_NWT + Conc_F_SEB - Conc_F_SWB + Conc_F_SET - Conc_F_SWT);
      //real Diff_Conc_Y_C = c1o4 * (Conc_F_NEB - Conc_F_SEB + Conc_F_NET - Conc_F_SET + Conc_F_NWB - Conc_F_SWB + Conc_F_NWT - Conc_F_SWT);
      //real Diff_Conc_Z_C = c1o4 * (Conc_F_NET - Conc_F_NEB + Conc_F_NWT - Conc_F_NWB + Conc_F_SET - Conc_F_SEB + Conc_F_SWT - Conc_F_SWB);

      real Conc_C = d0;

      real Diff_Conc_X_C = dx;
      real Diff_Conc_Y_C = dy;
      real Diff_Conc_Z_C = dz;

      Mx = Conc_C*vx1-(c1o1)/(c3o1*omegaD_C)*c2o1*Diff_Conc_X_C;
      My = Conc_C*vx2-(c1o1)/(c3o1*omegaD_C)*c2o1*Diff_Conc_Y_C;
      Mz = Conc_C*vx3-(c1o1)/(c3o1*omegaD_C)*c2o1*Diff_Conc_Z_C;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      (D27C.f[DIR_000])[kzero] =   c8o27* Conc_C*(c1o1-cu_sq);
      (D27C.f[DIR_P00   ])[kzero] =   c2o27* (c3o1*( Mx        )+Conc_C*(c1o1+c9o2*( vx1        )*( vx1        )-cu_sq));
      (D27C.f[DIR_M00   ])[kw   ] =   c2o27* (c3o1*(-Mx        )+Conc_C*(c1o1+c9o2*(-vx1        )*(-vx1        )-cu_sq));
      (D27C.f[DIR_0P0   ])[kzero] =   c2o27* (c3o1*(     My    )+Conc_C*(c1o1+c9o2*(     vx2    )*(     vx2    )-cu_sq));
      (D27C.f[DIR_0M0   ])[ks   ] =   c2o27* (c3o1*(    -My    )+Conc_C*(c1o1+c9o2*(    -vx2    )*(    -vx2    )-cu_sq));
      (D27C.f[DIR_00P   ])[kzero] =   c2o27* (c3o1*(         Mz)+Conc_C*(c1o1+c9o2*(         vx3)*(         vx3)-cu_sq));
      (D27C.f[DIR_00M   ])[kb   ] =   c2o27* (c3o1*(        -Mz)+Conc_C*(c1o1+c9o2*(        -vx3)*(        -vx3)-cu_sq));
      (D27C.f[DIR_PP0  ])[kzero] =   c1o54* (c3o1*( Mx +My    )+Conc_C*(c1o1+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq));
      (D27C.f[DIR_MM0  ])[ksw  ] =   c1o54* (c3o1*(-Mx -My    )+Conc_C*(c1o1+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq));
      (D27C.f[DIR_PM0  ])[ks   ] =   c1o54* (c3o1*( Mx -My    )+Conc_C*(c1o1+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq));
      (D27C.f[DIR_MP0  ])[kw   ] =   c1o54* (c3o1*(-Mx +My    )+Conc_C*(c1o1+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq));
      (D27C.f[DIR_P0P  ])[kzero] =   c1o54* (c3o1*( Mx     +Mz)+Conc_C*(c1o1+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq));
      (D27C.f[DIR_M0M  ])[kbw  ] =   c1o54* (c3o1*(-Mx     -Mz)+Conc_C*(c1o1+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq));
      (D27C.f[DIR_P0M  ])[kb   ] =   c1o54* (c3o1*( Mx     -Mz)+Conc_C*(c1o1+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq));
      (D27C.f[DIR_M0P  ])[kw   ] =   c1o54* (c3o1*(-Mx     +Mz)+Conc_C*(c1o1+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq));
      (D27C.f[DIR_0PP  ])[kzero] =   c1o54* (c3o1*(     My +Mz)+Conc_C*(c1o1+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq));
      (D27C.f[DIR_0MM  ])[kbs  ] =   c1o54* (c3o1*(    -My -Mz)+Conc_C*(c1o1+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq));
      (D27C.f[DIR_0PM  ])[kb   ] =   c1o54* (c3o1*(     My -Mz)+Conc_C*(c1o1+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq));
      (D27C.f[DIR_0MP  ])[ks   ] =   c1o54* (c3o1*(    -My +Mz)+Conc_C*(c1o1+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq));
      (D27C.f[DIR_PPP ])[kzero] =   c1o216*(c3o1*( Mx +My +Mz)+Conc_C*(c1o1+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq));
      (D27C.f[DIR_MMM ])[kbsw ] =   c1o216*(c3o1*(-Mx -My -Mz)+Conc_C*(c1o1+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq));
      (D27C.f[DIR_PPM ])[kb   ] =   c1o216*(c3o1*( Mx +My -Mz)+Conc_C*(c1o1+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq));
      (D27C.f[DIR_MMP ])[ksw  ] =   c1o216*(c3o1*(-Mx -My +Mz)+Conc_C*(c1o1+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq));
      (D27C.f[DIR_PMP ])[ks   ] =   c1o216*(c3o1*( Mx -My +Mz)+Conc_C*(c1o1+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq));
      (D27C.f[DIR_MPM ])[kbw  ] =   c1o216*(c3o1*(-Mx +My -Mz)+Conc_C*(c1o1+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq));
      (D27C.f[DIR_PMM ])[kbs  ] =   c1o216*(c3o1*( Mx -My -Mz)+Conc_C*(c1o1+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq));
      (D27C.f[DIR_MPP ])[kw   ] =   c1o216*(c3o1*(-Mx +My +Mz)+Conc_C*(c1o1+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq));

   }
}
//////////////////////////////////////////////////////////////////////////


































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFCEff27(real* DC, 
                                        real* DF, 
                                        unsigned int* neighborCX,
                                        unsigned int* neighborCY,
                                        unsigned int* neighborCZ,
                                        unsigned int* neighborFX,
                                        unsigned int* neighborFY,
                                        unsigned int* neighborFZ,
                                        unsigned int size_MatC, 
                                        unsigned int size_MatF, 
                                        bool isEvenTimestep,
                                        unsigned int* posC, 
                                        unsigned int* posFSWB, 
                                        unsigned int kFC, 
                                        real omCoarse, 
                                        real omFine, 
                                        real nu, 
                                        unsigned int nxC, 
                                        unsigned int nyC, 
                                        unsigned int nxF, 
                                        unsigned int nyF,
                                        OffFC offFC)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
      *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
      *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   //real epsylon = one;
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   real op = c1o1;
   real cu_sq;

   real xoff,    yoff,    zoff;
   real xoff_sq, yoff_sq, zoff_sq;
   
   real        drho,vx1,vx2,vx3;
   real        drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz;

   //real x,y,z;

   if(k<kFC)
   {
      //////////////////////////////////////////////////////////////////////////
      xoff = offFC.xOffFC[k];
      yoff = offFC.yOffFC[k];
      zoff = offFC.zOffFC[k];      
      xoff_sq = xoff * xoff;
      yoff_sq = yoff * yoff;
      zoff_sq = zoff * zoff;
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWB*vx2_SWB));
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWB*vx3_SWB));
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWB*vx3_SWB));
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWB*vx1_SWB-vx2_SWB*vx2_SWB));
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWB*vx1_SWB-vx3_SWB*vx3_SWB));

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SWT*vx2_SWT));
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SWT*vx3_SWT));
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SWT*vx3_SWT));
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SWT*vx1_SWT-vx2_SWT*vx2_SWT));
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SWT*vx1_SWT-vx3_SWT*vx3_SWT));

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SET*vx2_SET));
      kyzFromfcNEQ_SET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SET*vx3_SET));
      kxzFromfcNEQ_SET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SET*vx3_SET));
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SET*vx1_SET-vx2_SET*vx2_SET));
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SET*vx1_SET-vx3_SET*vx3_SET));

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_SEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_SEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_SEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_SEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_SEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_SEB*vx2_SEB));
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_SEB*vx3_SEB));
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_SEB*vx3_SEB));
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_SEB*vx1_SEB-vx2_SEB*vx2_SEB));
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_SEB*vx1_SEB-vx3_SEB*vx3_SEB));

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWB*vx2_NWB));
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWB*vx3_NWB));
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWB*vx3_NWB));
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWB*vx1_NWB-vx2_NWB*vx2_NWB));
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWB*vx1_NWB-vx3_NWB*vx3_NWB));

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NWT  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NWT  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NWT*vx2_NWT));
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NWT*vx3_NWT));
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NWT*vx3_NWT));
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NWT*vx1_NWT-vx2_NWT*vx2_NWT));
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NWT*vx1_NWT-vx3_NWT*vx3_NWT));

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NET  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NET  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NET*vx2_NET));
      kyzFromfcNEQ_NET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NET*vx3_NET));
      kxzFromfcNEQ_NET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NET*vx3_NET));
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NET*vx1_NET-vx2_NET*vx2_NET));
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NET*vx1_NET-vx3_NET*vx3_NET));

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      //vx1_NEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      //vx2_NEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
	  //vx3_NEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;
      vx1_NEB  = ((f_TNE-f_BSW)+(f_TSE-f_BNW)+(f_BNE-f_TSW)+(f_BSE-f_TNW)) + (((f_NE-f_SW)+(f_TE-f_BW))+((f_SE-f_NW)+(f_BE-f_TW))) + (f_E-f_W);
	  vx2_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_BNE-f_TSW)+(f_BNW-f_TSE)) + (((f_NE-f_SW)+(f_TN-f_BS))+((f_BN-f_TS)+(f_NW-f_SE))) + (f_N-f_S);
	  vx3_NEB  = ((f_TNE-f_BSW)+(f_TNW-f_BSE)+(f_TSE-f_BNW)+(f_TSW-f_BNE)) + (((f_TE-f_BW)+(f_TN-f_BS))+((f_TW-f_BE)+(f_TS-f_BN))) + (f_T-f_B);
      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE-(vx1_NEB*vx2_NEB));
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW-(vx2_NEB*vx3_NEB));
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE-(vx1_NEB*vx3_NEB));
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE-(vx1_NEB*vx1_NEB-vx2_NEB*vx2_NEB));
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE-(vx1_NEB*vx1_NEB-vx3_NEB*vx3_NEB));

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //for all  _SWB _SET _NWT _NEB
      //Version 1  fixed
      ayz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      bxz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      cxy= kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ax = ayz + c4o1*( - vx1_SWB + vx1_SET - vx1_NWT + vx1_NEB);
      by = bxz + c4o1*( - vx2_SWB - vx2_SET + vx2_NWT + vx2_NEB);
      cz = cxy + c4o1*( - vx3_SWB + vx3_SET + vx3_NWT - vx3_NEB);
      axy= c2o1*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      axz= c2o1*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      bxy= c2o1*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      ay = axz + c4o1*( - vx1_SWB - vx1_SET + vx1_NWT + vx1_NEB);
      az = axy + c4o1*( - vx1_SWB + vx1_SET + vx1_NWT - vx1_NEB);
      bz = bxy + c4o1*( - vx2_SWB + vx2_SET + vx2_NWT - vx2_NEB);
      bx = c2o1*(kxyFromfcNEQ_SWB + kxyFromfcNEQ_SET + kxyFromfcNEQ_NWT + kxyFromfcNEQ_NEB) - ay;
      cy = c2o1*(kyzFromfcNEQ_SWB + kyzFromfcNEQ_SET + kyzFromfcNEQ_NWT + kyzFromfcNEQ_NEB) - bz;
      cx = c2o1*(kxzFromfcNEQ_SWB + kxzFromfcNEQ_SET + kxzFromfcNEQ_NWT + kxzFromfcNEQ_NEB) - az;
      byz= bx + c4o1*(    vx2_SWB - vx2_SET + vx2_NWT - vx2_NEB);
      cyz= cx + c4o1*(    vx3_SWB - vx3_SET + vx3_NWT - vx3_NEB);
      cxz= cy + c4o1*(    vx3_SWB + vx3_SET - vx3_NWT - vx3_NEB);
      axx= bz + c4o1*(    vx2_SWB - vx2_SET - vx2_NWT + vx2_NEB) + c2o1*(-kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_NEB);
      ayy= c4o1*( -vx2_SWB + vx2_SET + vx2_NWT - vx2_NEB) + c2o1*(-kxyFromfcNEQ_SWB - kxyFromfcNEQ_SET + kxyFromfcNEQ_NWT + kxyFromfcNEQ_NEB) - bz;
      azz= c4o1*( -vx3_SWB - vx3_SET + vx3_NWT + vx3_NEB) + c2o1*(-kxzFromfcNEQ_SWB + kxzFromfcNEQ_SET + kxzFromfcNEQ_NWT - kxzFromfcNEQ_NEB) - cy;
      bxx= c4o1*( -vx1_SWB + vx1_SET + vx1_NWT - vx1_NEB) + c2o1*(-kxyFromfcNEQ_SWB + kxyFromfcNEQ_SET - kxyFromfcNEQ_NWT + kxyFromfcNEQ_NEB) - az;
      byy= az + c4o1*(    vx1_SWB - vx1_SET - vx1_NWT + vx1_NEB) + c2o1*(kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_NEB);
      bzz= c4o1*( -vx3_SWB + vx3_SET - vx3_NWT + vx3_NEB) + c2o1*(-kyzFromfcNEQ_SWB + kyzFromfcNEQ_SET + kyzFromfcNEQ_NWT - kyzFromfcNEQ_NEB) - cx;
      cxx= c4o1*( -vx1_SWB - vx1_SET + vx1_NWT + vx1_NEB) + c2o1*(-kxzFromfcNEQ_SWB + kxzFromfcNEQ_SET - kxzFromfcNEQ_NWT + kxzFromfcNEQ_NEB) - ay;
      cyy= c4o1*( -vx2_SWB + vx2_SET - vx2_NWT + vx2_NEB) + c2o1*(-kyzFromfcNEQ_SWB - kyzFromfcNEQ_SET + kyzFromfcNEQ_NWT + kyzFromfcNEQ_NEB) - bx;
      czz= ay + c4o1*(vx1_SWB + vx1_SET - vx1_NWT - vx1_NEB) + c2o1*(kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_NEB);
      a0 = c8o1*( vx1_SWB + vx1_NWT + vx1_SET + vx1_NEB) + c2o1*( kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_NEB) + c2o1*(kxzFromfcNEQ_SWB - kxzFromfcNEQ_SET - kxzFromfcNEQ_NWT + kxzFromfcNEQ_NEB) - ayy;
      b0 = c8o1*( vx2_SWB + vx2_NWT + vx2_SET + vx2_NEB) + c2o1*(-kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_NEB) + c2o1*( kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_NEB) + c2o1*(kyzFromfcNEQ_SWB - kyzFromfcNEQ_SET - kyzFromfcNEQ_NWT + kyzFromfcNEQ_NEB) - bxx;
      c0 = c8o1*( vx3_SWB + vx3_NWT + vx3_SET + vx3_NEB) + c2o1*(-kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_NEB) + c2o1*(kxzFromfcNEQ_SWB - kxzFromfcNEQ_SET + kxzFromfcNEQ_NWT - kxzFromfcNEQ_NEB) - cyy;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //ayz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      //bxz= -kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //cxy= kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //axy= two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      //axz= two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      //bxy= two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //a0 = eight*( vx1_SWB + vx1_NWT + vx1_SET + vx1_NEB) + two*(vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + 2.*(kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB) + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //ax = four*(-vx1_SWB - vx1_NWT + vx1_SET + vx1_NEB) - kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      //ay = two*(-vx1_SWB + vx1_NWT - vx1_SET + vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      //az = two*(-vx1_SWB + vx1_NWT + vx1_SET - vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      //axx= two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //ayy= two*(-vx2_SWB + vx2_NWT + vx2_SET - vx2_NEB - vx3_SWB + vx3_NWT - vx3_SET + vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + two*(-kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB) - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      //azz= two*(-vx2_SWB + vx2_NWT + vx2_SET - vx2_NEB - vx3_SWB + vx3_NWT - vx3_SET + vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + two*(-kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB) - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB;
      //b0 = two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + four*(vx2_SWB + vx2_NWT + vx2_SET + vx2_NEB) + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + two*(kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB) + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + two*(kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB);
      //bx = two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB - vx2_SWB - vx2_NWT + vx2_SET + vx2_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      //by = four*(-vx2_SWB + vx2_NWT - vx2_SET + vx2_NEB) - kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //bz = two*(-vx2_SWB + vx2_NWT + vx2_SET - vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //bxx= two*(-vx1_SWB + vx1_NWT + vx1_SET - vx1_NEB - vx3_SWB - vx3_NWT + vx3_SET + vx3_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + two*(-kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB) - kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB;
      //byy= two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB  + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      //bzz= two*(-vx1_SWB + vx1_NWT + vx1_SET - vx1_NEB - vx3_SWB - vx3_NWT + vx3_SET + vx3_NEB) - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB - kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB + two*(-kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB);
      //byz= two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      //c0 = two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) + eight*(vx3_SWB + vx3_NWT + vx3_SET + vx3_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + two*(-kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB) + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB + two*(kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB);
      //cx = two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB - vx3_SWB - vx3_NWT + vx3_SET + vx3_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      //cy = two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB - vx3_SWB + vx3_NWT - vx3_SET + vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //cz = four*(-vx3_SWB + vx3_NWT + vx3_SET - vx3_NEB) + kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //cxx= two*(-vx1_SWB + vx1_NWT - vx1_SET + vx1_NEB - vx2_SWB - vx2_NWT + vx2_SET + vx2_NEB) + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB - kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + two*(-kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB);
      //cyy= two*(-vx1_SWB + vx1_NWT - vx1_SET + vx1_NEB - vx2_SWB - vx2_NWT + vx2_SET + vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + two*(-kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB);
      //czz= two*( vx1_SWB - vx1_NWT + vx1_SET - vx1_NEB + vx2_SWB + vx2_NWT - vx2_SET - vx2_NEB) - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + two*(kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB) + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB;
      //cxz= two*( vx2_SWB - vx2_NWT - vx2_SET + vx2_NEB + vx3_SWB - vx3_NWT + vx3_SET - vx3_NEB) - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
      //cyz= two*( vx1_SWB - vx1_NWT - vx1_SET + vx1_NEB + vx3_SWB + vx3_NWT - vx3_SET - vx3_NEB) + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // (_SWT _SEB _NWB _NET)
      //merged
      real tayz = kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      real tbxz = kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      real tcxy =-kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET; 
      real tax  = c4o1*(-vx1_SWT + vx1_SEB - vx1_NWB + vx1_NET) - tayz;
      real tby  = c4o1*(-vx2_SWT - vx2_SEB + vx2_NWB + vx2_NET) - tbxz;
      real tcz  = c4o1*( vx3_SWT - vx3_SEB - vx3_NWB + vx3_NET) - tcxy;
      real taxy = c2o1*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      real taxz = c2o1*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      real tbxy = c2o1*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      real tay  = c4o1*(-vx1_SWT - vx1_SEB + vx1_NWB + vx1_NET) - taxz;
      real taz  = c4o1*( vx1_SWT - vx1_SEB - vx1_NWB + vx1_NET) - taxy;
      real tbz  = c4o1*( vx2_SWT - vx2_SEB - vx2_NWB + vx2_NET) - tbxy;
      real tbx  = c2o1*(kxyFromfcNEQ_SWT + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NWB + kxyFromfcNEQ_NET) - tay;
      real tcy  = c2o1*(kyzFromfcNEQ_SWT + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NWB + kyzFromfcNEQ_NET) - tbz;
      real tcx  = c2o1*(kxzFromfcNEQ_SWT + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NWB + kxzFromfcNEQ_NET) - taz;
      real tbyz = c4o1*(-vx2_SWT + vx2_SEB - vx2_NWB + vx2_NET) - tbx;
      real tcyz = c4o1*(-vx3_SWT + vx3_SEB - vx3_NWB + vx3_NET) - tcx;
      real tcxz = c4o1*(-vx3_SWT - vx3_SEB + vx3_NWB + vx3_NET) - tcy;
      real taxx = c4o1*( vx2_SWT - vx2_SEB - vx2_NWB + vx2_NET) + c2o1*(-kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NET) - tbz;
      real tayy = c4o1*(-vx2_SWT + vx2_SEB + vx2_NWB - vx2_NET) + c2o1*(-kxyFromfcNEQ_SWT    - kxyFromfcNEQ_SEB    + kxyFromfcNEQ_NWB    + kxyFromfcNEQ_NET   ) + tbz;
      real tazz = c4o1*( vx3_SWT + vx3_SEB - vx3_NWB - vx3_NET) + c2o1*( kxzFromfcNEQ_SWT    - kxzFromfcNEQ_SEB    - kxzFromfcNEQ_NWB    + kxzFromfcNEQ_NET   ) + tcy;
      real tbxx = c4o1*(-vx1_SWT + vx1_SEB + vx1_NWB - vx1_NET) + c2o1*(-kxyFromfcNEQ_SWT    + kxyFromfcNEQ_SEB    - kxyFromfcNEQ_NWB    + kxyFromfcNEQ_NET   ) + taz;
      real tbyy = c4o1*( vx1_SWT - vx1_SEB - vx1_NWB + vx1_NET) + c2o1*( kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_NET) - taz;
      real tbzz = c4o1*( vx3_SWT - vx3_SEB + vx3_NWB - vx3_NET) + c2o1*( kyzFromfcNEQ_SWT    - kyzFromfcNEQ_SEB    - kyzFromfcNEQ_NWB    + kyzFromfcNEQ_NET   ) + tcx;
      real tcxx = c4o1*( vx1_SWT + vx1_SEB - vx1_NWB - vx1_NET) + c2o1*(-kxzFromfcNEQ_SWT    + kxzFromfcNEQ_SEB    - kxzFromfcNEQ_NWB    + kxzFromfcNEQ_NET   ) + tay;
      real tcyy = c4o1*( vx2_SWT - vx2_SEB + vx2_NWB - vx2_NET) + c2o1*(-kyzFromfcNEQ_SWT    - kyzFromfcNEQ_SEB    + kyzFromfcNEQ_NWB    + kyzFromfcNEQ_NET   ) + tbx;
      real tczz = c4o1*(-vx1_SWT - vx1_SEB + vx1_NWB + vx1_NET) + c2o1*(-kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NET) - tay;
      real ta0  = c8o1*( vx1_SWT + vx1_NWB + vx1_SEB + vx1_NET) + c2o1*( kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_NET) + c2o1*(-kxzFromfcNEQ_SWT + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NWB - kxzFromfcNEQ_NET   ) - tayy;
      real tb0  = c8o1*( vx2_SWT + vx2_NWB + vx2_SEB + vx2_NET) + c2o1*(-kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_NET) + c2o1*( kxyFromfcNEQ_SWT - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NWB - kxyFromfcNEQ_NET   ) - tbzz;
      real tc0  = c8o1*( vx3_SWT + vx3_NWB + vx3_SEB + vx3_NET) + c2o1*(-kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_NET) + c2o1*( kxzFromfcNEQ_SWT - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NWB - kxzFromfcNEQ_NET   ) - tcyy;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0  +=  ta0   ;
      ax  +=  tax   ;
      ay  +=  tay   ;
      az  +=  taz   ;
      axx +=  taxx  ;
      ayy +=  tayy  ;
      azz +=  tazz  ;
      axy +=  taxy  ;
      axz +=  taxz  ;
      ayz +=  tayz  ;
      b0  +=  tb0   ;
      bx  +=  tbx   ;
      by  +=  tby   ;
      bz  +=  tbz   ;
      bxx +=  tbxx  ;
      byy +=  tbyy  ;
      bzz +=  tbzz  ;
      bxy +=  tbxy  ;
      bxz +=  tbxz  ;
      byz +=  tbyz  ;
      c0  +=  tc0   ;
      cx  +=  tcx   ;
      cy  +=  tcy   ;
      cz  +=  tcz   ;
      cxx +=  tcxx  ;
      cyy +=  tcyy  ;
      czz +=  tczz  ;
      cxy +=  tcxy  ;
      cxz +=  tcxz  ;
      cyz +=  tcyz  ;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //a0  += eight*( vx1_SWT + vx1_NWB + vx1_SEB + vx1_NET) + two*(vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET) - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //ax  += four*(-vx1_SWT - vx1_NWB + vx1_SEB + vx1_NET) - kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //ay  += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET + vx2_SWT + vx2_NWB - vx2_SEB - vx2_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET;
      //az  += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET + vx3_SWT + vx3_NWB - vx3_SEB - vx3_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET;
      //axx += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //ayy += two*(-vx2_SWT + vx2_NWB + vx2_SEB - vx2_NET + vx3_SWT - vx3_NWB + vx3_SEB - vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(-kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET) + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //azz += two*(-vx2_SWT + vx2_NWB + vx2_SEB - vx2_NET + vx3_SWT - vx3_NWB + vx3_SEB - vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + two*( kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET) + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //axy += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      //axz += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      //ayz += kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //b0  += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET + four*(vx2_SWT + vx2_NWB + vx2_SEB + vx2_NET) - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET) - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET + two*(-kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET);
      //bx  += two*( vx1_SWT - vx1_NWB + vx1_SEB - vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET;
      //by  += four*(-vx2_SWT + vx2_NWB - vx2_SEB + vx2_NET) - kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //bz  += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET + vx3_SWT - vx3_NWB + vx3_SEB - vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //bxx += two*(-vx1_SWT + vx1_NWB + vx1_SEB - vx1_NET + vx3_SWT + vx3_NWB - vx3_SEB - vx3_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET + two*(-kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET) + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET;
      //byy += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      //bzz += two*(-vx1_SWT + vx1_NWB + vx1_SEB - vx1_NET + vx3_SWT + vx3_NWB - vx3_SEB - vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + two*(kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET);
      //bxy += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //bxz += kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //byz += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      //c0  += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + eight*(vx3_SWT + vx3_NWB + vx3_SEB + vx3_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + two*(kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET) - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET + two*(kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET);
      //cx  += two*(-vx1_SWT + vx1_NWB + vx1_SEB - vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) - kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET;
      //cy  += two*(-vx2_SWT + vx2_NWB + vx2_SEB - vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET - kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //cz  += four*( vx3_SWT - vx3_NWB - vx3_SEB + vx3_NET) + kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //cxx += two*( vx1_SWT - vx1_NWB + vx1_SEB - vx1_NET + vx2_SWT + vx2_NWB - vx2_SEB - vx2_NET) - kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + two*(-kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET);
      //cyy += two*( vx1_SWT - vx1_NWB + vx1_SEB - vx1_NET + vx2_SWT + vx2_NWB - vx2_SEB - vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + two*(-kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET);
      //czz += two*(-vx1_SWT + vx1_NWB - vx1_SEB + vx1_NET - vx2_SWT - vx2_NWB + vx2_SEB + vx2_NET) + kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB - kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + two*(-kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET) - kxyFromfcNEQ_SWT - kxyFromfcNEQ_NWB - kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET;
      //cxy += -kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - kxyFromfcNEQ_NET - kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET;
      //cxz += two*( vx2_SWT - vx2_NWB - vx2_SEB + vx2_NET - vx3_SWT + vx3_NWB - vx3_SEB + vx3_NET) - kxxMyyFromfcNEQ_SWT - kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET - kyzFromfcNEQ_SWT - kyzFromfcNEQ_NWB - kyzFromfcNEQ_SEB - kyzFromfcNEQ_NET;
      //cyz += two*( vx1_SWT - vx1_NWB - vx1_SEB + vx1_NET - vx3_SWT - vx3_NWB + vx3_SEB + vx3_NET) + kxxMzzFromfcNEQ_SWT - kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - kxxMzzFromfcNEQ_NET - kxzFromfcNEQ_SWT - kxzFromfcNEQ_NWB - kxzFromfcNEQ_SEB - kxzFromfcNEQ_NET;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0  *= 0.015625f;// /=two; && /= thirtytwo;
      ax  *= 0.0625f;  // /=two; && /= eight;
      ay  *= 0.0625f;  // /=two; && /= eight;
      az  *= 0.0625f;  // /=two; && /= eight;
      axx *= 0.0625f;  // /=two; && /= eight;
      ayy *= 0.0625f;  // /=two; && /= eight;
      azz *= 0.0625f;  // /=two; && /= eight;
      axy *= 0.125f;   // /=two; && /= four;
      axz *= 0.125f;   // /=two; && /= four;
      ayz *= 0.125f;   // /=two; && /= four;
      b0  *= 0.015625f;// /=two; && /= thirtytwo;
      bx  *= 0.0625f;  // /=two; && /= eight;
      by  *= 0.0625f;  // /=two; && /= eight;
      bz  *= 0.0625f;  // /=two; && /= eight;
      bxx *= 0.0625f;  // /=two; && /= eight;
      byy *= 0.0625f;  // /=two; && /= eight;
      bzz *= 0.0625f;  // /=two; && /= eight;
      bxy *= 0.125f;   // /=two; && /= four;
      bxz *= 0.125f;   // /=two; && /= four;
      byz *= 0.125f;   // /=two; && /= four;
      c0  *= 0.015625f;// /=two; && /= thirtytwo;
      cx  *= 0.0625f;  // /=two; && /= eight;
      cy  *= 0.0625f;  // /=two; && /= eight;
      cz  *= 0.0625f;  // /=two; && /= eight;
      cxx *= 0.0625f;  // /=two; && /= eight;
      cyy *= 0.0625f;  // /=two; && /= eight;
      czz *= 0.0625f;  // /=two; && /= eight;
      cxy *= 0.125f;   // /=two; && /= four;
      cxz *= 0.125f;   // /=two; && /= four;
      cyz *= 0.125f;   // /=two; && /= four;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //
      // Bernd das Brot
      //
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      a0 = a0 + xoff * ax + yoff * ay + zoff * az + xoff_sq * axx + yoff_sq * ayy + zoff_sq * azz;
      ax = ax + c2o1 * xoff * axx + yoff * axy + zoff * axz;
      ay = ay + c2o1 * yoff * ayy + xoff * axy + zoff * ayz;
      az = az + c2o1 * zoff * azz + xoff * axz + yoff * ayz;
      b0 = b0 + xoff * bx + yoff * by + zoff * bz + xoff_sq * bxx + yoff_sq * byy + zoff_sq * bzz;
      bx = bx + c2o1 * xoff * bxx + yoff * bxy + zoff * bxz;
      by = by + c2o1 * yoff * byy + xoff * bxy + zoff * byz;
      bz = bz + c2o1 * zoff * bzz + xoff * bxz + yoff * byz;
      c0 = c0 + xoff * cx + yoff * cy + zoff * cz + xoff_sq * cxx + yoff_sq * cyy + zoff_sq * czz;
      cx = cx + c2o1 * xoff * cxx + yoff * cxy + zoff * cxz;
      cy = cy + c2o1 * yoff * cyy + xoff * cxy + zoff * cyz;
      cz = cz + c2o1 * zoff * czz + xoff * cxz + yoff * cyz;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Position C 0.5, 0.5, 0.5
      //x = zero;
      //y = zero;
      //z = zero;

      //drho = c1o8*(drho_SWB + drho_NWB + drho_NEB + drho_SEB + drho_SWT + drho_NWT + drho_NET + drho_SET);
      drho = drho_NET * (c1o8 - c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
             drho_NWT * (c1o8 + c1o4 * xoff - c1o4 * yoff - c1o4 * zoff) + 
             drho_SET * (c1o8 - c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
             drho_SWT * (c1o8 + c1o4 * xoff + c1o4 * yoff - c1o4 * zoff) + 
             drho_NEB * (c1o8 - c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
             drho_NWB * (c1o8 + c1o4 * xoff - c1o4 * yoff + c1o4 * zoff) + 
             drho_SEB * (c1o8 - c1o4 * xoff + c1o4 * yoff + c1o4 * zoff) + 
             drho_SWB * (c1o8 + c1o4 * xoff + c1o4 * yoff + c1o4 * zoff);
      vx1  = a0;
      vx2  = b0;
      vx3  = c0;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_W    =   feq_E   + c2o27* (c6o1*(-vx1        ));
      feq_S    =   feq_N   + c2o27* (c6o1*(    -vx2    ));
      feq_B    =   feq_T   + c2o27* (c6o1*(        -vx3));
      feq_SW   =   feq_NE  + c1o54* (c6o1*(-vx1-vx2    ));
      feq_NW   =   feq_SE  + c1o54* (c6o1*(-vx1+vx2    ));
      feq_BW   =   feq_TE  + c1o54* (c6o1*(-vx1    -vx3));
      feq_TW   =   feq_BE  + c1o54* (c6o1*(-vx1    +vx3));
      feq_BS   =   feq_TN  + c1o54* (c6o1*(    -vx2-vx3));
      feq_TS   =   feq_BN  + c1o54* (c6o1*(    -vx2+vx3));
      feq_BSW  =   feq_TNE + c1o216*(c6o1*(-vx1-vx2-vx3));
      feq_TSW  =   feq_BNE + c1o216*(c6o1*(-vx1-vx2+vx3));
      feq_BNW  =   feq_TSE + c1o216*(c6o1*(-vx1+vx2-vx3));
      feq_TNW  =   feq_BSE + c1o216*(c6o1*(-vx1+vx2+vx3));

      f_E    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c8o1*ax*op + c4o1*by*op + c4o1*cz*op)/(c54o1*o*op));
      f_N    = f_E + eps_new *((c2o1*(ax - by))/(c9o1*o));
      f_T    = f_E + eps_new *((c2o1*(ax - cz))/(c9o1*o));
      f_NE   = eps_new *(-(c5o1*cz*o + c3o1*(ay + bx)*op - c2o1*cz*op + ax*(c5o1*o + op) + by*(c5o1*o + op))/(c54o1*o*op));
      f_SE   = f_NE + eps_new *((  ay + bx )/(c9o1*o)); 
      f_TE   = eps_new *(-(c5o1*cz*o + by*(c5o1*o - c2o1*op) + c3o1*(az + cx)*op + cz*op + ax*(c5o1*o + op))/(c54o1*o*op));
      f_BE   = f_TE + eps_new *((  az + cx )/(c9o1*o));
      f_TN   = eps_new *(-(c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c2o1*ax*op + by*op + c3o1*bz*op + c3o1*cy*op + cz*op)/(c54o1*o*op));
      f_BN   = f_TN + eps_new *((  bz + cy )/(c9o1*o));
      f_ZERO = eps_new *((c5o1*(ax + by + cz))/(c9o1*op));
      f_TNE  = eps_new *(-(ay + az + bx + bz + cx + cy)/(c72o1*o));
      f_TSW  = - eps_new *((ay + bx)/(c36o1*o)) - f_TNE;
      f_TSE  = - eps_new *((az + cx)/(c36o1*o)) - f_TNE;
      f_TNW  = - eps_new *((bz + cy)/(c36o1*o)) - f_TNE;

      //////////////////////////////////////////////////////////////////////////
      //index 0
      kzero= posC[k];
      kw   = neighborCX[kzero];
      ks   = neighborCY[kzero];
      kb   = neighborCZ[kzero];
      ksw  = neighborCY[kw];
      kbw  = neighborCZ[kw];
      kbs  = neighborCZ[ks];
      kbsw = neighborCZ[ksw];
      ////////////////////////////////////////////////////////////////////////////////
      feC[kzero]   = f_E    + feq_E;
      fwC[kw]      = f_E    + feq_W;
      fnC[kzero]   = f_N    + feq_N;
      fsC[ks]      = f_N    + feq_S;
      ftC[kzero]   = f_T    + feq_T;
      fbC[kb]      = f_T    + feq_B;
      fneC[kzero]  = f_NE   + feq_NE;
      fswC[ksw]    = f_NE   + feq_SW;
      fseC[ks]     = f_SE   + feq_SE;
      fnwC[kw]     = f_SE   + feq_NW;
      fteC[kzero]  = f_TE   + feq_TE;
      fbwC[kbw]    = f_TE   + feq_BW;
      fbeC[kb]     = f_BE   + feq_BE;
      ftwC[kw]     = f_BE   + feq_TW;
      ftnC[kzero]  = f_TN   + feq_TN;
      fbsC[kbs]    = f_TN   + feq_BS;
      fbnC[kb]     = f_BN   + feq_BN;
      ftsC[ks]     = f_BN   + feq_TS;
      fzeroC[kzero]= f_ZERO + feq_ZERO;
      ftneC[kzero] = f_TNE  + feq_TNE;
      ftswC[ksw]   = f_TSW  + feq_TSW;
      ftseC[ks]    = f_TSE  + feq_TSE;
      ftnwC[kw]    = f_TNW  + feq_TNW;
      fbneC[kb]    = f_TSW  + feq_BNE;
      fbswC[kbsw]  = f_TNE  + feq_BSW;
      fbseC[kbs]   = f_TNW  + feq_BSE;
      fbnwC[kbw]   = f_TSE  + feq_BNW;
   }
}
//////////////////////////////////////////////////////////////////////////


































//////////////////////////////////////////////////////////////////////////
__global__ void scaleFC27(real* DC, 
                                     real* DF, 
                                     unsigned int* neighborCX,
                                     unsigned int* neighborCY,
                                     unsigned int* neighborCZ,
                                     unsigned int* neighborFX,
                                     unsigned int* neighborFY,
                                     unsigned int* neighborFZ,
										       unsigned int size_MatC, 
										       unsigned int size_MatF, 
										       bool isEvenTimestep,
                                     unsigned int* posC, 
                                     unsigned int* posFSWB, 
                                     unsigned int kFC, 
										       real omCoarse, 
										       real omFine, 
										       real nu, 
										       unsigned int nxC, 
										       unsigned int nyC, 
										       unsigned int nxF, 
										       unsigned int nyF)
{
   real *feF, *fwF, *fnF, *fsF, *ftF, *fbF, *fneF, *fswF, *fseF, *fnwF, *fteF, *fbwF, *fbeF, *ftwF, *ftnF, *fbsF, *fbnF, *ftsF, *fzeroF, 
         *ftneF, *ftswF, *ftseF, *ftnwF, *fbneF, *fbswF, *fbseF, *fbnwF;

   feF    = &DF[DIR_P00   *size_MatF];
   fwF    = &DF[DIR_M00   *size_MatF];
   fnF    = &DF[DIR_0P0   *size_MatF];
   fsF    = &DF[DIR_0M0   *size_MatF];
   ftF    = &DF[DIR_00P   *size_MatF];
   fbF    = &DF[DIR_00M   *size_MatF];
   fneF   = &DF[DIR_PP0  *size_MatF];
   fswF   = &DF[DIR_MM0  *size_MatF];
   fseF   = &DF[DIR_PM0  *size_MatF];
   fnwF   = &DF[DIR_MP0  *size_MatF];
   fteF   = &DF[DIR_P0P  *size_MatF];
   fbwF   = &DF[DIR_M0M  *size_MatF];
   fbeF   = &DF[DIR_P0M  *size_MatF];
   ftwF   = &DF[DIR_M0P  *size_MatF];
   ftnF   = &DF[DIR_0PP  *size_MatF];
   fbsF   = &DF[DIR_0MM  *size_MatF];
   fbnF   = &DF[DIR_0PM  *size_MatF];
   ftsF   = &DF[DIR_0MP  *size_MatF];
   fzeroF = &DF[DIR_000*size_MatF];
   ftneF  = &DF[DIR_PPP *size_MatF];
   ftswF  = &DF[DIR_MMP *size_MatF];
   ftseF  = &DF[DIR_PMP *size_MatF];
   ftnwF  = &DF[DIR_MPP *size_MatF];
   fbneF  = &DF[DIR_PPM *size_MatF];
   fbswF  = &DF[DIR_MMM *size_MatF];
   fbseF  = &DF[DIR_PMM *size_MatF];
   fbnwF  = &DF[DIR_MPM *size_MatF];

   real *feC, *fwC, *fnC, *fsC, *ftC, *fbC, *fneC, *fswC, *fseC, *fnwC, *fteC, *fbwC, *fbeC, *ftwC, *ftnC, *fbsC, *fbnC, *ftsC, *fzeroC,
         *ftneC, *ftswC, *ftseC, *ftnwC, *fbneC, *fbswC, *fbseC, *fbnwC;

   if (isEvenTimestep==true)
   {
      feC    = &DC[DIR_P00   *size_MatC];
      fwC    = &DC[DIR_M00   *size_MatC];
      fnC    = &DC[DIR_0P0   *size_MatC];
      fsC    = &DC[DIR_0M0   *size_MatC];
      ftC    = &DC[DIR_00P   *size_MatC];
      fbC    = &DC[DIR_00M   *size_MatC];
      fneC   = &DC[DIR_PP0  *size_MatC];
      fswC   = &DC[DIR_MM0  *size_MatC];
      fseC   = &DC[DIR_PM0  *size_MatC];
      fnwC   = &DC[DIR_MP0  *size_MatC];
      fteC   = &DC[DIR_P0P  *size_MatC];
      fbwC   = &DC[DIR_M0M  *size_MatC];
      fbeC   = &DC[DIR_P0M  *size_MatC];
      ftwC   = &DC[DIR_M0P  *size_MatC];
      ftnC   = &DC[DIR_0PP  *size_MatC];
      fbsC   = &DC[DIR_0MM  *size_MatC];
      fbnC   = &DC[DIR_0PM  *size_MatC];
      ftsC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      ftneC  = &DC[DIR_PPP *size_MatC];
      ftswC  = &DC[DIR_MMP *size_MatC];
      ftseC  = &DC[DIR_PMP *size_MatC];
      ftnwC  = &DC[DIR_MPP *size_MatC];
      fbneC  = &DC[DIR_PPM *size_MatC];
      fbswC  = &DC[DIR_MMM *size_MatC];
      fbseC  = &DC[DIR_PMM *size_MatC];
      fbnwC  = &DC[DIR_MPM *size_MatC];
   } 
   else
   {
      fwC    = &DC[DIR_P00   *size_MatC];
      feC    = &DC[DIR_M00   *size_MatC];
      fsC    = &DC[DIR_0P0   *size_MatC];
      fnC    = &DC[DIR_0M0   *size_MatC];
      fbC    = &DC[DIR_00P   *size_MatC];
      ftC    = &DC[DIR_00M   *size_MatC];
      fswC   = &DC[DIR_PP0  *size_MatC];
      fneC   = &DC[DIR_MM0  *size_MatC];
      fnwC   = &DC[DIR_PM0  *size_MatC];
      fseC   = &DC[DIR_MP0  *size_MatC];
      fbwC   = &DC[DIR_P0P  *size_MatC];
      fteC   = &DC[DIR_M0M  *size_MatC];
      ftwC   = &DC[DIR_P0M  *size_MatC];
      fbeC   = &DC[DIR_M0P  *size_MatC];
      fbsC   = &DC[DIR_0PP  *size_MatC];
      ftnC   = &DC[DIR_0MM  *size_MatC];
      ftsC   = &DC[DIR_0PM  *size_MatC];
      fbnC   = &DC[DIR_0MP  *size_MatC];
      fzeroC = &DC[DIR_000*size_MatC];
      fbswC  = &DC[DIR_PPP *size_MatC];
      fbneC  = &DC[DIR_MMP *size_MatC];
      fbnwC  = &DC[DIR_PMP *size_MatC];
      fbseC  = &DC[DIR_MPP *size_MatC];
      ftswC  = &DC[DIR_PPM *size_MatC];
      ftneC  = &DC[DIR_MMM *size_MatC];
      ftnwC  = &DC[DIR_PMM *size_MatC];
      ftseC  = &DC[DIR_MPM *size_MatC];
   }
   ////////////////////////////////////////////////////////////////////////////////
   const unsigned  ix = threadIdx.x;  // Globaler x-Index 
   const unsigned  iy = blockIdx.x;   // Globaler y-Index 
   const unsigned  iz = blockIdx.y;   // Globaler z-Index 

   const unsigned nx = blockDim.x;
   const unsigned ny = gridDim.x;

   const unsigned k = nx*(ny*iz + iy) + ix;
   //////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   real epsylon = c1o1;
   real eps_new = c2o1;
   real omegaS = omFine;//-omFine;
   real o  = omCoarse;//-omCoarse;
   real op = c1o1;
   real cu_sq;

   real        drho,vx1,vx2,vx3;
   real        drho_SWT,vx1_SWT,vx2_SWT,vx3_SWT;
   real        drho_NWT,vx1_NWT,vx2_NWT,vx3_NWT;
   real        drho_NET,vx1_NET,vx2_NET,vx3_NET;
   real        drho_SET,vx1_SET,vx2_SET,vx3_SET;
   real        drho_SWB,vx1_SWB,vx2_SWB,vx3_SWB;
   real        drho_NWB,vx1_NWB,vx2_NWB,vx3_NWB;
   real        drho_NEB,vx1_NEB,vx2_NEB,vx3_NEB;
   real        drho_SEB,vx1_SEB,vx2_SEB,vx3_SEB;
   real        f_E,f_W,f_N,f_S,f_T,f_B,f_NE,f_SW,f_SE,f_NW,f_TE,f_BW,f_BE,f_TW,f_TN,f_BS,f_BN,f_TS,f_ZERO,f_TNE, f_TSW, f_TSE, f_TNW, f_BNE, f_BSW, f_BSE, f_BNW;
   real        feq_E,feq_W,feq_N,feq_S,feq_T,feq_B,feq_NE,feq_SW,feq_SE,feq_NW,feq_TE,feq_BW,feq_BE,feq_TW,feq_TN,feq_BS,feq_BN,feq_TS,feq_ZERO,feq_TNE, feq_TSW, feq_TSE, feq_TNW, feq_BNE, feq_BSW, feq_BSE, feq_BNW;
   real        kxyFromfcNEQ_SWT, kyzFromfcNEQ_SWT, kxzFromfcNEQ_SWT, kxxMyyFromfcNEQ_SWT, kxxMzzFromfcNEQ_SWT;
   real        kxyFromfcNEQ_NWT, kyzFromfcNEQ_NWT, kxzFromfcNEQ_NWT, kxxMyyFromfcNEQ_NWT, kxxMzzFromfcNEQ_NWT;
   real        kxyFromfcNEQ_NET, kyzFromfcNEQ_NET, kxzFromfcNEQ_NET, kxxMyyFromfcNEQ_NET, kxxMzzFromfcNEQ_NET;
   real        kxyFromfcNEQ_SET, kyzFromfcNEQ_SET, kxzFromfcNEQ_SET, kxxMyyFromfcNEQ_SET, kxxMzzFromfcNEQ_SET;
   real        kxyFromfcNEQ_SWB, kyzFromfcNEQ_SWB, kxzFromfcNEQ_SWB, kxxMyyFromfcNEQ_SWB, kxxMzzFromfcNEQ_SWB;
   real        kxyFromfcNEQ_NWB, kyzFromfcNEQ_NWB, kxzFromfcNEQ_NWB, kxxMyyFromfcNEQ_NWB, kxxMzzFromfcNEQ_NWB;
   real        kxyFromfcNEQ_NEB, kyzFromfcNEQ_NEB, kxzFromfcNEQ_NEB, kxxMyyFromfcNEQ_NEB, kxxMzzFromfcNEQ_NEB;
   real        kxyFromfcNEQ_SEB, kyzFromfcNEQ_SEB, kxzFromfcNEQ_SEB, kxxMyyFromfcNEQ_SEB, kxxMzzFromfcNEQ_SEB;
   real        a0, ax, ay, az, axx, ayy, azz, axy, axz, ayz, b0, bx, by, bz, bxx, byy, bzz, bxy, bxz, byz, c0, cx, cy, cz, cxx, cyy, czz, cxy, cxz, cyz;

   real x,y,z;

   if(k<kFC){
      //////////////////////////////////////////////////////////////////////////
      //SWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      unsigned int k0zero= posFSWB[k];
      unsigned int k0w   = neighborFX[k0zero];
      unsigned int k0s   = neighborFY[k0zero];
      unsigned int k0b   = neighborFZ[k0zero];
      unsigned int k0sw  = neighborFY[k0w];
      unsigned int k0bw  = neighborFZ[k0w];
      unsigned int k0bs  = neighborFZ[k0s];
      unsigned int k0bsw = neighborFZ[k0sw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      unsigned int kzero= k0zero;
      unsigned int kw   = k0w;   
      unsigned int ks   = k0s;   
      unsigned int kb   = k0b;   
      unsigned int ksw  = k0sw;  
      unsigned int kbw  = k0bw;  
      unsigned int kbs  = k0bs;  
      unsigned int kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_SWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_SWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_SWB;
      vx1 = vx1_SWB;
      vx2 = vx2_SWB;
      vx3 = vx3_SWB;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;

      kxyFromfcNEQ_SWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_SWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_SWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_SWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      //////////////////////////////////////////////////////////////////////////
      //SWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_SWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_SWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_SWT;
      vx1 = vx1_SWT;
      vx2 = vx2_SWT;
      vx3 = vx3_SWT;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;


      kxyFromfcNEQ_SWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_SWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_SWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_SWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      //////////////////////////////////////////////////////////////////////////
      //SET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_SET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_SET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_SET;
      vx1 = vx1_SET;
      vx2 = vx2_SET;
      vx3 = vx3_SET;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;

      kxyFromfcNEQ_SET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_SET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_SET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_SET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_SET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      //////////////////////////////////////////////////////////////////////////
      //SEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_SEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_SEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_SEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_SEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_SEB;
      vx1 = vx1_SEB;
      vx2 = vx2_SEB;
      vx3 = vx3_SEB;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;

      kxyFromfcNEQ_SEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_SEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_SEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_SEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      //////////////////////////////////////////////////////////////////////////
      //NWB//
      //////////////////////////////////////////////////////////////////////////
      //index 0
      k0zero= k0s;
      k0w   = k0sw;
      k0s   = neighborFY[k0s];
      k0b   = k0bs;
      k0sw  = neighborFY[k0sw];
      k0bw  = k0bsw;
      k0bs  = neighborFY[k0bs];
      k0bsw = neighborFY[k0bsw];
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= k0zero;
      kw   = k0w;   
      ks   = k0s;   
      kb   = k0b;   
      ksw  = k0sw;  
      kbw  = k0bw;  
      kbs  = k0bs;  
      kbsw = k0bsw; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_NWB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_NWB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_NWB;
      vx1 = vx1_NWB;
      vx2 = vx2_NWB;
      vx3 = vx3_NWB;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;

      kxyFromfcNEQ_NWB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_NWB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_NWB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_NWB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      //////////////////////////////////////////////////////////////////////////
      //NWT//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kb;
      kw   = kbw;   
      ks   = kbs;   
      kb   = neighborFZ[kb];   
      ksw  = kbsw;  
      kbw  = neighborFZ[kbw];  
      kbs  = neighborFZ[kbs];  
      kbsw = neighborFZ[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NWT = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NWT  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_NWT  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_NWT  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_NWT;
      vx1 = vx1_NWT;
      vx2 = vx2_NWT;
      vx3 = vx3_NWT;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;


      kxyFromfcNEQ_NWT    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_NWT    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_NWT = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_NWT = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      //////////////////////////////////////////////////////////////////////////
      //NET//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kzero= kw;
      kw   = neighborFX[kw];   
      ks   = ksw;   
      kb   = kbw;   
      ksw  = neighborFX[ksw];  
      kbw  = neighborFX[kbw];  
      kbs  = kbsw;  
      kbsw = neighborFX[kbsw]; 
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NET = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NET  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_NET  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_NET  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_NET;
      vx1 = vx1_NET;
      vx2 = vx2_NET;
      vx3 = vx3_NET;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;


      kxyFromfcNEQ_NET    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_NET    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_NET    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_NET = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_NET = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      //////////////////////////////////////////////////////////////////////////
      //NEB//
      //////////////////////////////////////////////////////////////////////////
      //index 
      kb   = kzero;   
      kbw  = kw;  
      kbs  = ks;  
      kbsw = ksw; 
      kzero= k0w;
      kw   = neighborFX[k0w];   
      ks   = k0sw;   
      ksw  = neighborFX[k0sw];  
      ////////////////////////////////////////////////////////////////////////////////
      f_E    = feF[kzero];
      f_W    = fwF[kw];
      f_N    = fnF[kzero];
      f_S    = fsF[ks];
      f_T    = ftF[kzero];
      f_B    = fbF[kb];
      f_NE   = fneF[kzero];
      f_SW   = fswF[ksw];
      f_SE   = fseF[ks];
      f_NW   = fnwF[kw];
      f_TE   = fteF[kzero];
      f_BW   = fbwF[kbw];
      f_BE   = fbeF[kb];
      f_TW   = ftwF[kw];
      f_TN   = ftnF[kzero];
      f_BS   = fbsF[kbs];
      f_BN   = fbnF[kb];
      f_TS   = ftsF[ks];
      f_ZERO = fzeroF[kzero];
      f_TNE  = ftneF[kzero];
      f_TSW  = ftswF[ksw];
      f_TSE  = ftseF[ks];
      f_TNW  = ftnwF[kw];
      f_BNE  = fbneF[kb];
      f_BSW  = fbswF[kbsw];
      f_BSE  = fbseF[kbs];
      f_BNW  = fbnwF[kbw];

      drho_NEB = f_E+f_W+f_N+f_S+f_T+f_B+f_NE+f_SW+f_SE+f_NW+f_TE+f_BW+f_BE+f_TW+f_TN+f_BS+f_BN+f_TS+f_ZERO+f_TNE+f_TSW+f_TSE+f_TNW+f_BNE+f_BSW+f_BSE+f_BNW;
      vx1_NEB  = f_E+f_NE+f_SE+f_TE+f_BE-f_W-f_NW-f_SW-f_TW-f_BW+f_TNE-f_TSW+f_TSE-f_TNW+f_BNE-f_BSW+f_BSE-f_BNW;
      vx2_NEB  = f_N+f_NE+f_NW+f_TN+f_BN-f_S-f_SE-f_SW-f_TS-f_BS+f_TNE-f_TSW-f_TSE+f_TNW+f_BNE-f_BSW-f_BSE+f_BNW;
      vx3_NEB  = f_T+f_TE+f_TW+f_TN+f_TS-f_B-f_BE-f_BW-f_BN-f_BS+f_TNE+f_TSW+f_TSE+f_TNW-f_BNE-f_BSW-f_BSE-f_BNW;

      drho = drho_NEB;
      vx1 = vx1_NEB;
      vx2 = vx2_NEB;
      vx3 = vx3_NEB;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = f_E - feq_E;
      f_W    = f_W - feq_W;
      f_N    = f_N - feq_N;
      f_S    = f_S - feq_S;
      f_T    = f_T - feq_T;
      f_B    = f_B - feq_B;
      f_NE   = f_NE - feq_NE;
      f_SW   = f_SW - feq_SW;
      f_SE   = f_SE - feq_SE;
      f_NW   = f_NW - feq_NW;
      f_TE   = f_TE - feq_TE;
      f_BW   = f_BW - feq_BW;
      f_BE   = f_BE - feq_BE;
      f_TW   = f_TW - feq_TW;
      f_TN   = f_TN - feq_TN;
      f_BS   = f_BS - feq_BS;
      f_BN   = f_BN - feq_BN;
      f_TS   = f_TS - feq_TS;
      f_ZERO = f_ZERO - feq_ZERO;
      f_TNE  = f_TNE  - feq_TNE;
      f_TSW  = f_TSW  - feq_TSW;
      f_TSE  = f_TSE  - feq_TSE;
      f_TNW  = f_TNW  - feq_TNW;
      f_BNE  = f_BNE  - feq_BNE;
      f_BSW  = f_BSW  - feq_BSW;
      f_BSE  = f_BSE  - feq_BSE;
      f_BNW  = f_BNW  - feq_BNW;

      kxyFromfcNEQ_NEB    = -c3o1*omegaS*(f_SW+f_BSW+f_TSW-f_NW-f_BNW-f_TNW-f_SE-f_BSE-f_TSE+f_NE+f_BNE+f_TNE);
      kyzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BS+f_BSE+f_BSW-f_TS-f_TSE-f_TSW-f_BN-f_BNE-f_BNW+f_TN+f_TNE+f_TNW);
      kxzFromfcNEQ_NEB    = -c3o1*omegaS*(f_BW+f_BSW+f_BNW-f_TW-f_TSW-f_TNW-f_BE-f_BSE-f_BNE+f_TE+f_TSE+f_TNE);
      kxxMyyFromfcNEQ_NEB = -c3o2*omegaS*(f_BW+f_W+f_TW-f_BS-f_S-f_TS-f_BN-f_N-f_TN+f_BE+f_E+f_TE);
      kxxMzzFromfcNEQ_NEB = -c3o2*omegaS*(f_SW+f_W+f_NW-f_BS-f_TS-f_B-f_T-f_BN-f_TN+f_SE+f_E+f_NE);

      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //for all
      //Version 1
	  a0 = c8o1*vx1_SWB + c8o1*vx1_NWT + c8o1*vx1_SET + c8o1*vx1_NEB + c2o1*vx2_SWB - c2o1*vx2_NWT - c2o1*vx2_SET + c2o1*vx2_NEB + c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET - c2o1*vx3_NEB + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + c2o1*kxyFromfcNEQ_SWB - c2o1*kxyFromfcNEQ_NWT + c2o1*kxyFromfcNEQ_SET - c2o1*kxyFromfcNEQ_NEB + c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_NWT - c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB;
	  ax = (-c4o1*vx1_SWB - c4o1*vx1_NWT + c4o1*vx1_SET + c4o1*vx1_NEB - kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB)/epsylon;
	  ay = (-c2o1*vx1_SWB + c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB + c2o1*vx2_SWB + c2o1*vx2_NWT - c2o1*vx2_SET - c2o1*vx2_NEB - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB)/epsylon;
	  az = (-c2o1*vx1_SWB + c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB + c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET - c2o1*vx3_NEB - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB)/epsylon;
	  axx= (c2o1*vx2_SWB - c2o1*vx2_NWT - c2o1*vx2_SET + c2o1*vx2_NEB + c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET - c2o1*vx3_NEB - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  ayy= (-c2o1*vx2_SWB + c2o1*vx2_NWT + c2o1*vx2_SET - c2o1*vx2_NEB - c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET + c2o1*vx3_NEB - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_NWT - c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  azz= (-c2o1*vx2_SWB + c2o1*vx2_NWT + c2o1*vx2_SET - c2o1*vx2_NEB - c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET + c2o1*vx3_NEB + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_NWT + c2o1*kxzFromfcNEQ_SET - c2o1*kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  axy= (c2o1*vx1_SWB - c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB + c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET - c2o1*vx3_NEB - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB)/(epsylon*epsylon);
	  axz= (c2o1*vx1_SWB - c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB + c2o1*vx2_SWB + c2o1*vx2_NWT - c2o1*vx2_SET - c2o1*vx2_NEB - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB)/(epsylon*epsylon);
	  ayz= (-kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT - kyzFromfcNEQ_SET - kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  b0 = c2o1*vx1_SWB - c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB + c8o1*vx2_SWB + c8o1*vx2_NWT + c8o1*vx2_SET + c8o1*vx2_NEB + c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET - c2o1*vx3_NEB - c2o1*kxxMyyFromfcNEQ_SWB + c2o1*kxxMyyFromfcNEQ_NWT - c2o1*kxxMyyFromfcNEQ_SET + c2o1*kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + c2o1*kxyFromfcNEQ_SWB + c2o1*kxyFromfcNEQ_NWT - c2o1*kxyFromfcNEQ_SET - c2o1*kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_NWT - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_NEB;
	  bx = (c2o1*vx1_SWB - c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB - c2o1*vx2_SWB - c2o1*vx2_NWT + c2o1*vx2_SET + c2o1*vx2_NEB + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB)/epsylon;
	  by = (-c4o1*vx2_SWB + c4o1*vx2_NWT - c4o1*vx2_SET + c4o1*vx2_NEB - kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/epsylon;
	  bz = (-c2o1*vx2_SWB + c2o1*vx2_NWT + c2o1*vx2_SET - c2o1*vx2_NEB + c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET - c2o1*vx3_NEB + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/epsylon;
	  bxx= (-c2o1*vx1_SWB + c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB - c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET + c2o1*vx3_NEB + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB - c2o1*kxyFromfcNEQ_SWB - c2o1*kxyFromfcNEQ_NWT + c2o1*kxyFromfcNEQ_SET + c2o1*kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB)/(epsylon*epsylon);
	  byy= (c2o1*vx1_SWB - c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB + c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET - c2o1*vx3_NEB + c2o1*kxxMyyFromfcNEQ_SWB - c2o1*kxxMyyFromfcNEQ_NWT + c2o1*kxxMyyFromfcNEQ_SET - c2o1*kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB)/(epsylon*epsylon);
	  bzz= (-c2o1*vx1_SWB + c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB - c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET + c2o1*vx3_NEB - kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB - kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_NWT + c2o1*kyzFromfcNEQ_SET - c2o1*kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  bxy= (c2o1*vx2_SWB - c2o1*vx2_NWT - c2o1*vx2_SET + c2o1*vx2_NEB + c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET - c2o1*vx3_NEB + kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET + kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  bxz= (-kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB + kxzFromfcNEQ_SWB - kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET - kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  byz= (c2o1*vx1_SWB - c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB + c2o1*vx2_SWB + c2o1*vx2_NWT - c2o1*vx2_SET - c2o1*vx2_NEB + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB)/(epsylon*epsylon);
	  c0 = c2o1*vx1_SWB - c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB + c2o1*vx2_SWB + c2o1*vx2_NWT - c2o1*vx2_SET - c2o1*vx2_NEB + c8o1*vx3_SWB + c8o1*vx3_NWT + c8o1*vx3_SET + c8o1*vx3_NEB + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB - c2o1*kxxMzzFromfcNEQ_SWB + c2o1*kxxMzzFromfcNEQ_NWT + c2o1*kxxMzzFromfcNEQ_SET - c2o1*kxxMzzFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB + c2o1*kxzFromfcNEQ_SWB + c2o1*kxzFromfcNEQ_NWT - c2o1*kxzFromfcNEQ_SET - c2o1*kxzFromfcNEQ_NEB + c2o1*kyzFromfcNEQ_SWB - c2o1*kyzFromfcNEQ_NWT + c2o1*kyzFromfcNEQ_SET - c2o1*kyzFromfcNEQ_NEB;
	  cx = (c2o1*vx1_SWB - c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB - c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET + c2o1*vx3_NEB + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB)/epsylon;
	  cy = (c2o1*vx2_SWB - c2o1*vx2_NWT - c2o1*vx2_SET + c2o1*vx2_NEB - c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET + c2o1*vx3_NEB - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/epsylon;
	  cz = (-c4o1*vx3_SWB + c4o1*vx3_NWT + c4o1*vx3_SET - c4o1*vx3_NEB + kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/epsylon;
	  cxx= (-c2o1*vx1_SWB + c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB - c2o1*vx2_SWB - c2o1*vx2_NWT + c2o1*vx2_SET + c2o1*vx2_NEB + kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT - kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB - kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - c2o1*kxzFromfcNEQ_SWB - c2o1*kxzFromfcNEQ_NWT + c2o1*kxzFromfcNEQ_SET + c2o1*kxzFromfcNEQ_NEB)/(epsylon*epsylon);
	  cyy= (-c2o1*vx1_SWB + c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB - c2o1*vx2_SWB - c2o1*vx2_NWT + c2o1*vx2_SET + c2o1*vx2_NEB - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB - kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET - kxyFromfcNEQ_NEB - c2o1*kyzFromfcNEQ_SWB + c2o1*kyzFromfcNEQ_NWT - c2o1*kyzFromfcNEQ_SET + c2o1*kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  czz= (c2o1*vx1_SWB - c2o1*vx1_NWT + c2o1*vx1_SET - c2o1*vx1_NEB + c2o1*vx2_SWB + c2o1*vx2_NWT - c2o1*vx2_SET - c2o1*vx2_NEB - kxxMyyFromfcNEQ_SWB + kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET - kxxMyyFromfcNEQ_NEB + c2o1*kxxMzzFromfcNEQ_SWB - c2o1*kxxMzzFromfcNEQ_NWT - c2o1*kxxMzzFromfcNEQ_SET + c2o1*kxxMzzFromfcNEQ_NEB + kxyFromfcNEQ_SWB + kxyFromfcNEQ_NWT + kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB)/(epsylon*epsylon);
	  cxy= (kxyFromfcNEQ_SWB - kxyFromfcNEQ_NWT - kxyFromfcNEQ_SET + kxyFromfcNEQ_NEB - kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT - kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB - kyzFromfcNEQ_SWB - kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  cxz= (c2o1*vx2_SWB - c2o1*vx2_NWT - c2o1*vx2_SET + c2o1*vx2_NEB + c2o1*vx3_SWB - c2o1*vx3_NWT + c2o1*vx3_SET - c2o1*vx3_NEB - kxxMyyFromfcNEQ_SWB - kxxMyyFromfcNEQ_NWT + kxxMyyFromfcNEQ_SET + kxxMyyFromfcNEQ_NEB + kxxMzzFromfcNEQ_SWB + kxxMzzFromfcNEQ_NWT - kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kyzFromfcNEQ_SWB + kyzFromfcNEQ_NWT + kyzFromfcNEQ_SET + kyzFromfcNEQ_NEB)/(epsylon*epsylon);
	  cyz= (c2o1*vx1_SWB - c2o1*vx1_NWT - c2o1*vx1_SET + c2o1*vx1_NEB + c2o1*vx3_SWB + c2o1*vx3_NWT - c2o1*vx3_SET - c2o1*vx3_NEB + kxxMzzFromfcNEQ_SWB - kxxMzzFromfcNEQ_NWT + kxxMzzFromfcNEQ_SET - kxxMzzFromfcNEQ_NEB + kxzFromfcNEQ_SWB + kxzFromfcNEQ_NWT + kxzFromfcNEQ_SET + kxzFromfcNEQ_NEB)/(epsylon*epsylon);
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Version2
	  //a0 = eight*vx1_SWT + eight*vx1_NWB + eight*vx1_SEB + eight*vx1_NET + two*vx2_SWT - two*vx2_NWB - two*vx2_SEB + two*vx2_NET - two*vx3_SWT + two*vx3_NWB - two*vx3_SEB + two*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET + two*kxyFromfcNEQ_SWT - two*kxyFromfcNEQ_NWB + two*kxyFromfcNEQ_SEB - two*kxyFromfcNEQ_NET - two*kxzFromfcNEQ_SWT + two*kxzFromfcNEQ_NWB + two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_NET - one*kyzFromfcNEQ_SWT - one*kyzFromfcNEQ_NWB - one*kyzFromfcNEQ_SEB - one*kyzFromfcNEQ_NET;
	  //ax = (-four*vx1_SWT - four*vx1_NWB + four*vx1_SEB + four*vx1_NET - one*kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - one*kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - one*kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - one*kxzFromfcNEQ_NET - one*kyzFromfcNEQ_SWT - one*kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/epsylon;
	  //ay = (-two*vx1_SWT + two*vx1_NWB - two*vx1_SEB + two*vx1_NET + two*vx2_SWT + two*vx2_NWB - two*vx2_SEB - two*vx2_NET - one*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET)/epsylon;
	  //az = (two*vx1_SWT - two*vx1_NWB - two*vx1_SEB + two*vx1_NET + two*vx3_SWT + two*vx3_NWB - two*vx3_SEB - two*vx3_NET + kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET)/epsylon;
	  //axx = (two*vx2_SWT - two*vx2_NWB - two*vx2_SEB + two*vx2_NET - two*vx3_SWT + two*vx3_NWB - two*vx3_SEB + two*vx3_NET - one*kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - one*kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - one*kyzFromfcNEQ_SWT - one*kyzFromfcNEQ_NWB - one*kyzFromfcNEQ_SEB - one*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //ayy = (-two*vx2_SWT + two*vx2_NWB + two*vx2_SEB - two*vx2_NET + two*vx3_SWT - two*vx3_NWB + two*vx3_SEB - two*vx3_NET - one*kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET - two*kxyFromfcNEQ_SWT + two*kxyFromfcNEQ_NWB - two*kxyFromfcNEQ_SEB + two*kxyFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //azz = (-two*vx2_SWT + two*vx2_NWB + two*vx2_SEB - two*vx2_NET + two*vx3_SWT - two*vx3_NWB + two*vx3_SEB - two*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET - one*kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + two*kxzFromfcNEQ_SWT - two*kxzFromfcNEQ_NWB - two*kxzFromfcNEQ_SEB + two*kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //axy = (two*vx1_SWT - two*vx1_NWB - two*vx1_SEB + two*vx1_NET - two*vx3_SWT - two*vx3_NWB + two*vx3_SEB + two*vx3_NET - one*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - one*kxzFromfcNEQ_SWT - one*kxzFromfcNEQ_NWB - one*kxzFromfcNEQ_SEB - one*kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  //axz = (-two*vx1_SWT + two*vx1_NWB - two*vx1_SEB + two*vx1_NET - two*vx2_SWT - two*vx2_NWB + two*vx2_SEB + two*vx2_NET + kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - one*kxyFromfcNEQ_SWT - one*kxyFromfcNEQ_NWB - one*kxyFromfcNEQ_SEB - one*kxyFromfcNEQ_NET)/(epsylon*epsylon);
	  //ayz = (kxyFromfcNEQ_SWT - one*kxyFromfcNEQ_NWB - one*kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - one*kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - one*kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - one*kyzFromfcNEQ_SEB - one*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //b0 = two*vx1_SWT - two*vx1_NWB - two*vx1_SEB + two*vx1_NET + eight*vx2_SWT + eight*vx2_NWB + eight*vx2_SEB + eight*vx2_NET - two*vx3_SWT - two*vx3_NWB + two*vx3_SEB + two*vx3_NET - two*kxxMyyFromfcNEQ_SWT + two*kxxMyyFromfcNEQ_NWB - two*kxxMyyFromfcNEQ_SEB + two*kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET + two*kxyFromfcNEQ_SWT + two*kxyFromfcNEQ_NWB - two*kxyFromfcNEQ_SEB - two*kxyFromfcNEQ_NET - one*kxzFromfcNEQ_SWT - one*kxzFromfcNEQ_NWB - one*kxzFromfcNEQ_SEB - one*kxzFromfcNEQ_NET - two*kyzFromfcNEQ_SWT + two*kyzFromfcNEQ_NWB + two*kyzFromfcNEQ_SEB - two*kyzFromfcNEQ_NET;
	  //bx = (two*vx1_SWT - two*vx1_NWB + two*vx1_SEB - two*vx1_NET - two*vx2_SWT - two*vx2_NWB + two*vx2_SEB + two*vx2_NET + kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET)/epsylon;
	  //by = (-four*vx2_SWT + four*vx2_NWB - four*vx2_SEB + four*vx2_NET - one*kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - one*kxyFromfcNEQ_NET - one*kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - one*kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - one*kyzFromfcNEQ_SEB - one*kyzFromfcNEQ_NET)/epsylon;
	  //bz = (two*vx2_SWT - two*vx2_NWB - two*vx2_SEB + two*vx2_NET + two*vx3_SWT - two*vx3_NWB + two*vx3_SEB - two*vx3_NET - one*kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/epsylon;
	  //bxx = (-two*vx1_SWT + two*vx1_NWB + two*vx1_SEB - two*vx1_NET + two*vx3_SWT + two*vx3_NWB - two*vx3_SEB - two*vx3_NET + kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET - two*kxyFromfcNEQ_SWT - two*kxyFromfcNEQ_NWB + two*kxyFromfcNEQ_SEB + two*kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  //byy = (two*vx1_SWT - two*vx1_NWB - two*vx1_SEB + two*vx1_NET - two*vx3_SWT - two*vx3_NWB + two*vx3_SEB + two*vx3_NET + two*kxxMyyFromfcNEQ_SWT - two*kxxMyyFromfcNEQ_NWB + two*kxxMyyFromfcNEQ_SEB - two*kxxMyyFromfcNEQ_NET - one*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - one*kxzFromfcNEQ_SWT - one*kxzFromfcNEQ_NWB - one*kxzFromfcNEQ_SEB - one*kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  //bzz = (-two*vx1_SWT + two*vx1_NWB + two*vx1_SEB - two*vx1_NET + two*vx3_SWT + two*vx3_NWB - two*vx3_SEB - two*vx3_NET - one*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + two*kyzFromfcNEQ_SWT - two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_SEB + two*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //bxy = (two*vx2_SWT - two*vx2_NWB - two*vx2_SEB + two*vx2_NET - two*vx3_SWT + two*vx3_NWB - two*vx3_SEB + two*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET - one*kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - one*kyzFromfcNEQ_SWT - one*kyzFromfcNEQ_NWB - one*kyzFromfcNEQ_SEB - one*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //bxz = (kxyFromfcNEQ_SWT - one*kxyFromfcNEQ_NWB - one*kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - one*kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - one*kxzFromfcNEQ_NET - one*kyzFromfcNEQ_SWT - one*kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //byz = (-two*vx1_SWT + two*vx1_NWB - two*vx1_SEB + two*vx1_NET - two*vx2_SWT - two*vx2_NWB + two*vx2_SEB + two*vx2_NET - one*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET - one*kxyFromfcNEQ_SWT - one*kxyFromfcNEQ_NWB - one*kxyFromfcNEQ_SEB - one*kxyFromfcNEQ_NET)/(epsylon*epsylon);
	  //c0 = -two*vx1_SWT + two*vx1_NWB - two*vx1_SEB + two*vx1_NET - two*vx2_SWT - two*vx2_NWB + two*vx2_SEB + two*vx2_NET + eight*vx3_SWT + eight*vx3_NWB + eight*vx3_SEB + eight*vx3_NET - one*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET + two*kxxMzzFromfcNEQ_SWT - two*kxxMzzFromfcNEQ_NWB - two*kxxMzzFromfcNEQ_SEB + two*kxxMzzFromfcNEQ_NET - one*kxyFromfcNEQ_SWT - one*kxyFromfcNEQ_NWB - one*kxyFromfcNEQ_SEB - one*kxyFromfcNEQ_NET + two*kxzFromfcNEQ_SWT + two*kxzFromfcNEQ_NWB - two*kxzFromfcNEQ_SEB - two*kxzFromfcNEQ_NET + two*kyzFromfcNEQ_SWT - two*kyzFromfcNEQ_NWB + two*kyzFromfcNEQ_SEB - two*kyzFromfcNEQ_NET;
	  //cx = (-two*vx1_SWT + two*vx1_NWB + two*vx1_SEB - two*vx1_NET - two*vx3_SWT - two*vx3_NWB + two*vx3_SEB + two*vx3_NET - one*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET)/epsylon;
	  //cy = (-two*vx2_SWT + two*vx2_NWB + two*vx2_SEB - two*vx2_NET - two*vx3_SWT + two*vx3_NWB - two*vx3_SEB + two*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET - one*kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/epsylon;
	  //cz = (four*vx3_SWT - four*vx3_NWB - four*vx3_SEB + four*vx3_NET + kxyFromfcNEQ_SWT - one*kxyFromfcNEQ_NWB - one*kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - one*kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - one*kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - one*kyzFromfcNEQ_SEB - one*kyzFromfcNEQ_NET)/epsylon;
	  //cxx = (two*vx1_SWT - two*vx1_NWB + two*vx1_SEB - two*vx1_NET + two*vx2_SWT + two*vx2_NWB - two*vx2_SEB - two*vx2_NET - one*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - one*kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - two*kxzFromfcNEQ_SWT - two*kxzFromfcNEQ_NWB + two*kxzFromfcNEQ_SEB + two*kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  //cyy = (two*vx1_SWT - two*vx1_NWB + two*vx1_SEB - two*vx1_NET + two*vx2_SWT + two*vx2_NWB - two*vx2_SEB - two*vx2_NET + kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - two*kyzFromfcNEQ_SWT + two*kyzFromfcNEQ_NWB - two*kyzFromfcNEQ_SEB + two*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //czz = (-two*vx1_SWT + two*vx1_NWB - two*vx1_SEB + two*vx1_NET - two*vx2_SWT - two*vx2_NWB + two*vx2_SEB + two*vx2_NET + kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB - one*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - two*kxxMzzFromfcNEQ_SWT + two*kxxMzzFromfcNEQ_NWB + two*kxxMzzFromfcNEQ_SEB - two*kxxMzzFromfcNEQ_NET - one*kxyFromfcNEQ_SWT - one*kxyFromfcNEQ_NWB - one*kxyFromfcNEQ_SEB - one*kxyFromfcNEQ_NET)/(epsylon*epsylon);
	  //cxy = (-one*kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - one*kxyFromfcNEQ_NET - one*kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - one*kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET - one*kyzFromfcNEQ_SWT - one*kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //cxz = (two*vx2_SWT - two*vx2_NWB - two*vx2_SEB + two*vx2_NET - two*vx3_SWT + two*vx3_NWB - two*vx3_SEB + two*vx3_NET - one*kxxMyyFromfcNEQ_SWT - one*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - one*kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET - one*kyzFromfcNEQ_SWT - one*kyzFromfcNEQ_NWB - one*kyzFromfcNEQ_SEB - one*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  //cyz = (two*vx1_SWT - two*vx1_NWB - two*vx1_SEB + two*vx1_NET - two*vx3_SWT - two*vx3_NWB + two*vx3_SEB + two*vx3_NET + kxxMzzFromfcNEQ_SWT - one*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - one*kxxMzzFromfcNEQ_NET - one*kxzFromfcNEQ_SWT - one*kxzFromfcNEQ_NWB - one*kxzFromfcNEQ_SEB - one*kxzFromfcNEQ_NET)/(epsylon*epsylon);
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //merged
	  a0 += c8o1*vx1_SWT + c8o1*vx1_NWB + c8o1*vx1_SEB + c8o1*vx1_NET + c2o1*vx2_SWT - c2o1*vx2_NWB - c2o1*vx2_SEB + c2o1*vx2_NET - c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB + c2o1*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET + c2o1*kxyFromfcNEQ_SWT - c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_NET - c2o1*kxzFromfcNEQ_SWT + c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_NET - c1o1*kyzFromfcNEQ_SWT - c1o1*kyzFromfcNEQ_NWB - c1o1*kyzFromfcNEQ_SEB - c1o1*kyzFromfcNEQ_NET;
	  ax += (-c4o1*vx1_SWT - c4o1*vx1_NWB + c4o1*vx1_SEB + c4o1*vx1_NET - c1o1*kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - c1o1*kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - c1o1*kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - c1o1*kxzFromfcNEQ_NET - c1o1*kyzFromfcNEQ_SWT - c1o1*kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/epsylon;
	  ay += (-c2o1*vx1_SWT + c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET + c2o1*vx2_SWT + c2o1*vx2_NWB - c2o1*vx2_SEB - c2o1*vx2_NET - c1o1*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET)/epsylon;
	  az += (c2o1*vx1_SWT - c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET + c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB - c2o1*vx3_NET + kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET)/epsylon;
	  axx += (c2o1*vx2_SWT - c2o1*vx2_NWB - c2o1*vx2_SEB + c2o1*vx2_NET - c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB + c2o1*vx3_NET - c1o1*kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - c1o1*kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - c1o1*kyzFromfcNEQ_SWT - c1o1*kyzFromfcNEQ_NWB - c1o1*kyzFromfcNEQ_SEB - c1o1*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  ayy += (-c2o1*vx2_SWT + c2o1*vx2_NWB + c2o1*vx2_SEB - c2o1*vx2_NET + c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB - c2o1*vx3_NET - c1o1*kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET - c2o1*kxyFromfcNEQ_SWT + c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  azz += (-c2o1*vx2_SWT + c2o1*vx2_NWB + c2o1*vx2_SEB - c2o1*vx2_NET + c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB - c2o1*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET - c1o1*kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + c2o1*kxzFromfcNEQ_SWT - c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_SEB + c2o1*kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  axy += (c2o1*vx1_SWT - c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET - c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB + c2o1*vx3_NET - c1o1*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - c1o1*kxzFromfcNEQ_SWT - c1o1*kxzFromfcNEQ_NWB - c1o1*kxzFromfcNEQ_SEB - c1o1*kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  axz += (-c2o1*vx1_SWT + c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET - c2o1*vx2_SWT - c2o1*vx2_NWB + c2o1*vx2_SEB + c2o1*vx2_NET + kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - c1o1*kxyFromfcNEQ_SWT - c1o1*kxyFromfcNEQ_NWB - c1o1*kxyFromfcNEQ_SEB - c1o1*kxyFromfcNEQ_NET)/(epsylon*epsylon);
	  ayz += (kxyFromfcNEQ_SWT - c1o1*kxyFromfcNEQ_NWB - c1o1*kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - c1o1*kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - c1o1*kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - c1o1*kyzFromfcNEQ_SEB - c1o1*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  b0 += c2o1*vx1_SWT - c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET + c8o1*vx2_SWT + c8o1*vx2_NWB + c8o1*vx2_SEB + c8o1*vx2_NET - c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB + c2o1*vx3_NET - c2o1*kxxMyyFromfcNEQ_SWT + c2o1*kxxMyyFromfcNEQ_NWB - c2o1*kxxMyyFromfcNEQ_SEB + c2o1*kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET + c2o1*kxyFromfcNEQ_SWT + c2o1*kxyFromfcNEQ_NWB - c2o1*kxyFromfcNEQ_SEB - c2o1*kxyFromfcNEQ_NET - c1o1*kxzFromfcNEQ_SWT - c1o1*kxzFromfcNEQ_NWB - c1o1*kxzFromfcNEQ_SEB - c1o1*kxzFromfcNEQ_NET - c2o1*kyzFromfcNEQ_SWT + c2o1*kyzFromfcNEQ_NWB + c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_NET;
	  bx += (c2o1*vx1_SWT - c2o1*vx1_NWB + c2o1*vx1_SEB - c2o1*vx1_NET - c2o1*vx2_SWT - c2o1*vx2_NWB + c2o1*vx2_SEB + c2o1*vx2_NET + kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET)/epsylon;
	  by += (-c4o1*vx2_SWT + c4o1*vx2_NWB - c4o1*vx2_SEB + c4o1*vx2_NET - c1o1*kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - c1o1*kxyFromfcNEQ_NET - c1o1*kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - c1o1*kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - c1o1*kyzFromfcNEQ_SEB - c1o1*kyzFromfcNEQ_NET)/epsylon;
	  bz += (c2o1*vx2_SWT - c2o1*vx2_NWB - c2o1*vx2_SEB + c2o1*vx2_NET + c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB - c2o1*vx3_NET - c1o1*kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/epsylon;
	  bxx += (-c2o1*vx1_SWT + c2o1*vx1_NWB + c2o1*vx1_SEB - c2o1*vx1_NET + c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB - c2o1*vx3_NET + kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET - c2o1*kxyFromfcNEQ_SWT - c2o1*kxyFromfcNEQ_NWB + c2o1*kxyFromfcNEQ_SEB + c2o1*kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  byy += (c2o1*vx1_SWT - c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET - c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB + c2o1*vx3_NET + c2o1*kxxMyyFromfcNEQ_SWT - c2o1*kxxMyyFromfcNEQ_NWB + c2o1*kxxMyyFromfcNEQ_SEB - c2o1*kxxMyyFromfcNEQ_NET - c1o1*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - c1o1*kxzFromfcNEQ_SWT - c1o1*kxzFromfcNEQ_NWB - c1o1*kxzFromfcNEQ_SEB - c1o1*kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  bzz += (-c2o1*vx1_SWT + c2o1*vx1_NWB + c2o1*vx1_SEB - c2o1*vx1_NET + c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB - c2o1*vx3_NET - c1o1*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_SWT - c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  bxy += (c2o1*vx2_SWT - c2o1*vx2_NWB - c2o1*vx2_SEB + c2o1*vx2_NET - c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB + c2o1*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET - c1o1*kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET - c1o1*kyzFromfcNEQ_SWT - c1o1*kyzFromfcNEQ_NWB - c1o1*kyzFromfcNEQ_SEB - c1o1*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  bxz += (kxyFromfcNEQ_SWT - c1o1*kxyFromfcNEQ_NWB - c1o1*kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - c1o1*kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - c1o1*kxzFromfcNEQ_NET - c1o1*kyzFromfcNEQ_SWT - c1o1*kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  byz += (-c2o1*vx1_SWT + c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET - c2o1*vx2_SWT - c2o1*vx2_NWB + c2o1*vx2_SEB + c2o1*vx2_NET - c1o1*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET - c1o1*kxyFromfcNEQ_SWT - c1o1*kxyFromfcNEQ_NWB - c1o1*kxyFromfcNEQ_SEB - c1o1*kxyFromfcNEQ_NET)/(epsylon*epsylon);
	  c0 += -c2o1*vx1_SWT + c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET - c2o1*vx2_SWT - c2o1*vx2_NWB + c2o1*vx2_SEB + c2o1*vx2_NET + c8o1*vx3_SWT + c8o1*vx3_NWB + c8o1*vx3_SEB + c8o1*vx3_NET - c1o1*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET + c2o1*kxxMzzFromfcNEQ_SWT - c2o1*kxxMzzFromfcNEQ_NWB - c2o1*kxxMzzFromfcNEQ_SEB + c2o1*kxxMzzFromfcNEQ_NET - c1o1*kxyFromfcNEQ_SWT - c1o1*kxyFromfcNEQ_NWB - c1o1*kxyFromfcNEQ_SEB - c1o1*kxyFromfcNEQ_NET + c2o1*kxzFromfcNEQ_SWT + c2o1*kxzFromfcNEQ_NWB - c2o1*kxzFromfcNEQ_SEB - c2o1*kxzFromfcNEQ_NET + c2o1*kyzFromfcNEQ_SWT - c2o1*kyzFromfcNEQ_NWB + c2o1*kyzFromfcNEQ_SEB - c2o1*kyzFromfcNEQ_NET;
	  cx += (-c2o1*vx1_SWT + c2o1*vx1_NWB + c2o1*vx1_SEB - c2o1*vx1_NET - c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB + c2o1*vx3_NET - c1o1*kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET)/epsylon;
	  cy += (-c2o1*vx2_SWT + c2o1*vx2_NWB + c2o1*vx2_SEB - c2o1*vx2_NET - c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB + c2o1*vx3_NET + kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET - c1o1*kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB + kxxMzzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/epsylon;
	  cz += (c4o1*vx3_SWT - c4o1*vx3_NWB - c4o1*vx3_SEB + c4o1*vx3_NET + kxyFromfcNEQ_SWT - c1o1*kxyFromfcNEQ_NWB - c1o1*kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET + kxzFromfcNEQ_SWT - c1o1*kxzFromfcNEQ_NWB + kxzFromfcNEQ_SEB - c1o1*kxzFromfcNEQ_NET + kyzFromfcNEQ_SWT + kyzFromfcNEQ_NWB - c1o1*kyzFromfcNEQ_SEB - c1o1*kyzFromfcNEQ_NET)/epsylon;
	  cxx += (c2o1*vx1_SWT - c2o1*vx1_NWB + c2o1*vx1_SEB - c2o1*vx1_NET + c2o1*vx2_SWT + c2o1*vx2_NWB - c2o1*vx2_SEB - c2o1*vx2_NET - c1o1*kxxMyyFromfcNEQ_SWT + kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB - c1o1*kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - c2o1*kxzFromfcNEQ_SWT - c2o1*kxzFromfcNEQ_NWB + c2o1*kxzFromfcNEQ_SEB + c2o1*kxzFromfcNEQ_NET)/(epsylon*epsylon);
	  cyy += (c2o1*vx1_SWT - c2o1*vx1_NWB + c2o1*vx1_SEB - c2o1*vx1_NET + c2o1*vx2_SWT + c2o1*vx2_NWB - c2o1*vx2_SEB - c2o1*vx2_NET + kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB + kxyFromfcNEQ_NET - c2o1*kyzFromfcNEQ_SWT + c2o1*kyzFromfcNEQ_NWB - c2o1*kyzFromfcNEQ_SEB + c2o1*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  czz += (-c2o1*vx1_SWT + c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET - c2o1*vx2_SWT - c2o1*vx2_NWB + c2o1*vx2_SEB + c2o1*vx2_NET + kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB - c1o1*kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET - c2o1*kxxMzzFromfcNEQ_SWT + c2o1*kxxMzzFromfcNEQ_NWB + c2o1*kxxMzzFromfcNEQ_SEB - c2o1*kxxMzzFromfcNEQ_NET - c1o1*kxyFromfcNEQ_SWT - c1o1*kxyFromfcNEQ_NWB - c1o1*kxyFromfcNEQ_SEB - c1o1*kxyFromfcNEQ_NET)/(epsylon*epsylon);
	  cxy += (-c1o1*kxyFromfcNEQ_SWT + kxyFromfcNEQ_NWB + kxyFromfcNEQ_SEB - c1o1*kxyFromfcNEQ_NET - c1o1*kxzFromfcNEQ_SWT + kxzFromfcNEQ_NWB - c1o1*kxzFromfcNEQ_SEB + kxzFromfcNEQ_NET - c1o1*kyzFromfcNEQ_SWT - c1o1*kyzFromfcNEQ_NWB + kyzFromfcNEQ_SEB + kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  cxz += (c2o1*vx2_SWT - c2o1*vx2_NWB - c2o1*vx2_SEB + c2o1*vx2_NET - c2o1*vx3_SWT + c2o1*vx3_NWB - c2o1*vx3_SEB + c2o1*vx3_NET - c1o1*kxxMyyFromfcNEQ_SWT - c1o1*kxxMyyFromfcNEQ_NWB + kxxMyyFromfcNEQ_SEB + kxxMyyFromfcNEQ_NET + kxxMzzFromfcNEQ_SWT + kxxMzzFromfcNEQ_NWB - c1o1*kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET - c1o1*kyzFromfcNEQ_SWT - c1o1*kyzFromfcNEQ_NWB - c1o1*kyzFromfcNEQ_SEB - c1o1*kyzFromfcNEQ_NET)/(epsylon*epsylon);
	  cyz += (c2o1*vx1_SWT - c2o1*vx1_NWB - c2o1*vx1_SEB + c2o1*vx1_NET - c2o1*vx3_SWT - c2o1*vx3_NWB + c2o1*vx3_SEB + c2o1*vx3_NET + kxxMzzFromfcNEQ_SWT - c1o1*kxxMzzFromfcNEQ_NWB + kxxMzzFromfcNEQ_SEB - c1o1*kxxMzzFromfcNEQ_NET - c1o1*kxzFromfcNEQ_SWT - c1o1*kxzFromfcNEQ_NWB - c1o1*kxzFromfcNEQ_SEB - c1o1*kxzFromfcNEQ_NET)/(epsylon*epsylon);
      a0  /= c2o1;
      ax  /= c2o1;
      ay  /= c2o1;
      az  /= c2o1;
      axx /= c2o1;
      ayy /= c2o1;
      azz /= c2o1;
      axy /= c2o1;
      axz /= c2o1;
      ayz /= c2o1;
      b0  /= c2o1;
      bx  /= c2o1;
      by  /= c2o1;
      bz  /= c2o1;
      bxx /= c2o1;
      byy /= c2o1;
      bzz /= c2o1;
      bxy /= c2o1;
      bxz /= c2o1;
      byz /= c2o1;
      c0  /= c2o1;
      cx  /= c2o1;
      cy  /= c2o1;
      cz  /= c2o1;
      cxx /= c2o1;
      cyy /= c2o1;
      czz /= c2o1;
      cxy /= c2o1;
      cxz /= c2o1;
      cyz /= c2o1;
      //////////////////////////////////////////////////////////////////////////
      a0  /= c32o1;
      ax  /= c8o1;
      ay  /= c8o1;
      az  /= c8o1;
      axx /= c8o1;
      ayy /= c8o1;
      azz /= c8o1;
      axy /= c4o1;
      axz /= c4o1;
      ayz /= c4o1;
      b0  /= c32o1;
      bx  /= c8o1;
      by  /= c8o1;
      bz  /= c8o1;
      bxx /= c8o1;
      byy /= c8o1;
      bzz /= c8o1;
      bxy /= c4o1;
      bxz /= c4o1;
      byz /= c4o1;
      c0  /= c32o1;
      cx  /= c8o1;
      cy  /= c8o1;
      cz  /= c8o1;
      cxx /= c8o1;
      cyy /= c8o1;
      czz /= c8o1;
      cxy /= c4o1;
      cxz /= c4o1;
      cyz /= c4o1;
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      //Position C 0.5, 0.5, 0.5
      x = c0o1;
      y = c0o1;
      z = c0o1;

      //drho = (drho_SWB + drho_NWB + drho_NEB + drho_SEB + drho_SWT + drho_NWT + drho_NET + drho_SET)/8.;
	  drho = (drho_NEB*(c1o1 + c2o1*x + c2o1*y + c4o1*x*y - c2o1*z - c4o1*x*z - c4o1*y*z - c8o1*x*y*z) + 
		  drho_SET*(c1o1 + c2o1*x - c2o1*y - c4o1*x*y + c2o1*z + c4o1*x*z - c4o1*y*z - c8o1*x*y*z) + 
		  drho_NWT*(c1o1 - c2o1*x + c2o1*y - c4o1*x*y + c2o1*z - c4o1*x*z + c4o1*y*z - c8o1*x*y*z) + 
		  drho_SWB*(c1o1 - c2o1*x - c2o1*y + c4o1*x*y - c2o1*z + c4o1*x*z + c4o1*y*z - c8o1*x*y*z) + 
		  drho_SWT*(c1o1 - c2o1*x - c2o1*y + c4o1*x*y + c2o1*z - c4o1*x*z - c4o1*y*z + c8o1*x*y*z) + 
		  drho_NWB*(c1o1 - c2o1*x + c2o1*y - c4o1*x*y - c2o1*z + c4o1*x*z - c4o1*y*z + c8o1*x*y*z) + 
		  drho_SEB*(c1o1 + c2o1*x - c2o1*y - c4o1*x*y - c2o1*z - c4o1*x*z + c4o1*y*z + c8o1*x*y*z) + 
		  drho_NET*(c1o1 + c2o1*x + c2o1*y + c4o1*x*y + c2o1*z + c4o1*x*z + c4o1*y*z + c8o1*x*y*z))/c8o1;
      vx1  = a0 + ax*x + ay*y + az*z + axx*x*x + ayy*y*y + azz*z*z + axy*x*y + axz*x*z + ayz*y*z;
      vx2  = b0 + bx*x + by*y + bz*z + bxx*x*x + byy*y*y + bzz*z*z + bxy*x*y + bxz*x*z + byz*y*z;
      vx3  = c0 + cx*x + cy*y + cz*z + cxx*x*x + cyy*y*y + czz*z*z + cxy*x*y + cxz*x*z + cyz*y*z;

      cu_sq=c3o2*(vx1*vx1+vx2*vx2+vx3*vx3);

      feq_ZERO =   c8o27* (drho-cu_sq);
      feq_E    =   c2o27* (drho+c3o1*( vx1        )+c9o2*( vx1        )*( vx1        )-cu_sq);
      feq_W    =   c2o27* (drho+c3o1*(-vx1        )+c9o2*(-vx1        )*(-vx1        )-cu_sq);
      feq_N    =   c2o27* (drho+c3o1*(    vx2     )+c9o2*(     vx2    )*(     vx2    )-cu_sq);
      feq_S    =   c2o27* (drho+c3o1*(   -vx2     )+c9o2*(    -vx2    )*(    -vx2    )-cu_sq);
      feq_T    =   c2o27* (drho+c3o1*(         vx3)+c9o2*(         vx3)*(         vx3)-cu_sq);
      feq_B    =   c2o27* (drho+c3o1*(        -vx3)+c9o2*(        -vx3)*(        -vx3)-cu_sq);
      feq_NE   =   c1o54* (drho+c3o1*( vx1+vx2    )+c9o2*( vx1+vx2    )*( vx1+vx2    )-cu_sq);
      feq_SW   =   c1o54* (drho+c3o1*(-vx1-vx2    )+c9o2*(-vx1-vx2    )*(-vx1-vx2    )-cu_sq);
      feq_SE   =   c1o54* (drho+c3o1*( vx1-vx2    )+c9o2*( vx1-vx2    )*( vx1-vx2    )-cu_sq);
      feq_NW   =   c1o54* (drho+c3o1*(-vx1+vx2    )+c9o2*(-vx1+vx2    )*(-vx1+vx2    )-cu_sq);
      feq_TE   =   c1o54* (drho+c3o1*( vx1    +vx3)+c9o2*( vx1    +vx3)*( vx1    +vx3)-cu_sq);
      feq_BW   =   c1o54* (drho+c3o1*(-vx1    -vx3)+c9o2*(-vx1    -vx3)*(-vx1    -vx3)-cu_sq);
      feq_BE   =   c1o54* (drho+c3o1*( vx1    -vx3)+c9o2*( vx1    -vx3)*( vx1    -vx3)-cu_sq);
      feq_TW   =   c1o54* (drho+c3o1*(-vx1    +vx3)+c9o2*(-vx1    +vx3)*(-vx1    +vx3)-cu_sq);
      feq_TN   =   c1o54* (drho+c3o1*(     vx2+vx3)+c9o2*(     vx2+vx3)*(     vx2+vx3)-cu_sq);
      feq_BS   =   c1o54* (drho+c3o1*(    -vx2-vx3)+c9o2*(    -vx2-vx3)*(    -vx2-vx3)-cu_sq);
      feq_BN   =   c1o54* (drho+c3o1*(     vx2-vx3)+c9o2*(     vx2-vx3)*(     vx2-vx3)-cu_sq);
      feq_TS   =   c1o54* (drho+c3o1*(    -vx2+vx3)+c9o2*(    -vx2+vx3)*(    -vx2+vx3)-cu_sq);
      feq_TNE  =   c1o216*(drho+c3o1*( vx1+vx2+vx3)+c9o2*( vx1+vx2+vx3)*( vx1+vx2+vx3)-cu_sq);
      feq_BSW  =   c1o216*(drho+c3o1*(-vx1-vx2-vx3)+c9o2*(-vx1-vx2-vx3)*(-vx1-vx2-vx3)-cu_sq);
      feq_BNE  =   c1o216*(drho+c3o1*( vx1+vx2-vx3)+c9o2*( vx1+vx2-vx3)*( vx1+vx2-vx3)-cu_sq);
      feq_TSW  =   c1o216*(drho+c3o1*(-vx1-vx2+vx3)+c9o2*(-vx1-vx2+vx3)*(-vx1-vx2+vx3)-cu_sq);
      feq_TSE  =   c1o216*(drho+c3o1*( vx1-vx2+vx3)+c9o2*( vx1-vx2+vx3)*( vx1-vx2+vx3)-cu_sq);
      feq_BNW  =   c1o216*(drho+c3o1*(-vx1+vx2-vx3)+c9o2*(-vx1+vx2-vx3)*(-vx1+vx2-vx3)-cu_sq);
      feq_BSE  =   c1o216*(drho+c3o1*( vx1-vx2-vx3)+c9o2*( vx1-vx2-vx3)*( vx1-vx2-vx3)-cu_sq);
      feq_TNW  =   c1o216*(drho+c3o1*(-vx1+vx2+vx3)+c9o2*(-vx1+vx2+vx3)*(-vx1+vx2+vx3)-cu_sq);

      f_E    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c8o1*ax*op + c4o1*by*op + c4o1*cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x - 16*axx*op*x + c4o1*bxy*op*x + c4o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y - c8o1*axy*op*y + c8o1*byy*op*y + c4o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + c4o1*(-c2o1*axz + byz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_W    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c8o1*ax*op + c4o1*by*op + c4o1*cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x - 16*axx*op*x + c4o1*bxy*op*x + c4o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y - c8o1*axy*op*y + c8o1*byy*op*y + c4o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + c4o1*(-c2o1*axz + byz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_N    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o + c4o1*ax*op - c8o1*by*op + c4o1*cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c8o1*axx*op*x - c8o1*bxy*op*x + c4o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + c4o1*axy*op*y - 16*byy*op*y + c4o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + c4o1*(axz - c2o1*byz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_S    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o + c4o1*ax*op - c8o1*by*op + c4o1*cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c8o1*axx*op*x - c8o1*bxy*op*x + c4o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + c4o1*axy*op*y - 16*byy*op*y + c4o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + c4o1*(axz - c2o1*byz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_T    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o + c4o1*ax*op + c4o1*by*op - c8o1*cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c8o1*axx*op*x + c4o1*bxy*op*x - c8o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + c4o1*axy*op*y + c8o1*byy*op*y - c8o1*cyz*op*y +  (c5o1*(axz + byz + c2o1*czz)*o + c4o1*(axz + byz - c4o1*czz)*op)*z)/(c72o1*o*op));
      f_B    = eps_new *((c5o1*ax*o + c5o1*by*o + c5o1*cz*o + c4o1*ax*op + c4o1*by*op - c8o1*cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c8o1*axx*op*x + c4o1*bxy*op*x - c8o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + c4o1*axy*op*y + c8o1*byy*op*y - c8o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + c4o1*(axz + byz - c4o1*czz)*op)*z)/(c72o1*o*op));
      f_NE   = eps_new *(-(c5o1*cz*o + c3o1*(ay + bx)*op - c2o1*cz*op + ax*(c5o1*o + op) + by*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x + c3o1*axy*op*x + c6o1*bxx*op*x + bxy*op*x - c2o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y + c6o1*ayy*op*y + c3o1*bxy*op*y + c2o1*byy*op*y - c2o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (axz + c3o1*ayz + c3o1*bxz + byz - c4o1*czz)*op)*z)/(c72o1*o*op));
      f_SW   = eps_new *(-(c5o1*cz*o + c3o1*(ay + bx)*op - c2o1*cz*op + ax*(c5o1*o + op) + by*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x + c3o1*axy*op*x + c6o1*bxx*op*x + bxy*op*x - c2o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y + c6o1*ayy*op*y + c3o1*bxy*op*y + c2o1*byy*op*y - c2o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (axz + c3o1*ayz + c3o1*bxz + byz - c4o1*czz)*op)*z)/(c72o1*o*op));
      f_SE   = eps_new *(-(c5o1*cz*o - c3o1*(ay + bx)*op - c2o1*cz*op + ax*(c5o1*o + op) + by*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x - c3o1*axy*op*x - c6o1*bxx*op*x + bxy*op*x - c2o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y - c6o1*ayy*op*y - c3o1*bxy*op*y + c2o1*byy*op*y - c2o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (axz - c3o1*ayz - c3o1*bxz + byz - c4o1*czz)*op)*z)/(c72o1*o*op)); 
      f_NW   = eps_new *(-(c5o1*cz*o - c3o1*(ay + bx)*op - c2o1*cz*op + ax*(c5o1*o + op) + by*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x - c3o1*axy*op*x - c6o1*bxx*op*x + bxy*op*x - c2o1*cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y - c6o1*ayy*op*y - c3o1*bxy*op*y + c2o1*byy*op*y - c2o1*cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (axz - c3o1*ayz - c3o1*bxz + byz - c4o1*czz)*op)*z)/(c72o1*o*op));
      f_TE   = eps_new *(-(c5o1*cz*o + by*(c5o1*o - c2o1*op) + c3o1*(az + cx)*op + cz*op + ax*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x + c3o1*axz*op*x - c2o1*bxy*op*x + c6o1*cxx*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y + c3o1*ayz*op*y - c4o1*byy*op*y + c3o1*cxy*op*y + cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (axz + c6o1*azz - c2o1*byz + c3o1*cxz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_BW   = eps_new *(-(c5o1*cz*o + by*(c5o1*o - c2o1*op) + c3o1*(az + cx)*op + cz*op + ax*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x + c3o1*axz*op*x - c2o1*bxy*op*x + c6o1*cxx*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y + c3o1*ayz*op*y - c4o1*byy*op*y + c3o1*cxy*op*y + cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (axz + c6o1*azz - c2o1*byz + c3o1*cxz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_BE   = eps_new *(-(c5o1*cz*o + by*(c5o1*o - c2o1*op) - c3o1*(az + cx)*op + cz*op + ax*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x - c3o1*axz*op*x - c2o1*bxy*op*x - c6o1*cxx*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y - c3o1*ayz*op*y - c4o1*byy*op*y - c3o1*cxy*op*y + cyz*op*y + c5o1*axz*o*z + c5o1*byz*o*z + c10o1*czz*o*z + axz*op*z - c6o1*azz*op*z - c2o1*byz*op*z - c3o1*cxz*op*z + c2o1*czz*op*z)/(c72o1*o*op));
      f_TW   = eps_new *(-(c5o1*cz*o + by*(c5o1*o - c2o1*op) - c3o1*(az + cx)*op + cz*op + ax*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x + c2o1*axx*op*x - c3o1*axz*op*x - c2o1*bxy*op*x - c6o1*cxx*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y + axy*op*y - c3o1*ayz*op*y - c4o1*byy*op*y - c3o1*cxy*op*y + cyz*op*y + c5o1*axz*o*z + c5o1*byz*o*z + c10o1*czz*o*z + axz*op*z - c6o1*azz*op*z - c2o1*byz*op*z - c3o1*cxz*op*z + c2o1*czz*op*z)/(c72o1*o*op));
      f_TN   = eps_new *(-(c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c2o1*ax*op + by*op + c3o1*bz*op + c3o1*cy*op + cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x - c4o1*axx*op*x + bxy*op*x + c3o1*bxz*op*x + c3o1*cxy*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y - c2o1*axy*op*y + c2o1*byy*op*y + c3o1*byz*op*y + c6o1*cyy*op*y + cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (-c2o1*axz + byz + c6o1*bzz + c3o1*cyz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_BS   = eps_new *(-(c5o1*ax*o + c5o1*by*o + c5o1*cz*o - c2o1*ax*op + by*op + c3o1*bz*op + c3o1*cy*op + cz*op + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x - c4o1*axx*op*x + bxy*op*x + c3o1*bxz*op*x + c3o1*cxy*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y - c2o1*axy*op*y + c2o1*byy*op*y + c3o1*byz*op*y + c6o1*cyy*op*y + cyz*op*y + (c5o1*(axz + byz + c2o1*czz)*o + (-c2o1*axz + byz + c6o1*bzz + c3o1*cyz + c2o1*czz)*op)*z)/(c72o1*o*op));
      f_BN   = eps_new *(-(c5o1*cz*o + ax*(c5o1*o - c2o1*op) - c3o1*(bz + cy)*op + cz*op + by*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x - c4o1*axx*op*x + bxy*op*x - c3o1*bxz*op*x - c3o1*cxy*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y - c2o1*axy*op*y + c2o1*byy*op*y - c3o1*byz*op*y - c6o1*cyy*op*y + cyz*op*y + c5o1*axz*o*z + c5o1*byz*o*z + c10o1*czz*o*z - c2o1*axz*op*z + byz*op*z - c6o1*bzz*op*z - c3o1*cyz*op*z + c2o1*czz*op*z)/(c72o1*o*op));
      f_TS   = eps_new *(-(c5o1*cz*o + ax*(c5o1*o - c2o1*op) - c3o1*(bz + cy)*op + cz*op + by*(c5o1*o + op) + c10o1*axx*o*x + c5o1*bxy*o*x + c5o1*cxz*o*x - c4o1*axx*op*x + bxy*op*x - c3o1*bxz*op*x - c3o1*cxy*op*x + cxz*op*x + c5o1*axy*o*y + c10o1*byy*o*y + c5o1*cyz*o*y - c2o1*axy*op*y + c2o1*byy*op*y - c3o1*byz*op*y - c6o1*cyy*op*y + cyz*op*y + c5o1*axz*o*z + c5o1*byz*o*z + c10o1*czz*o*z - c2o1*axz*op*z + byz*op*z - c6o1*bzz*op*z - c3o1*cyz*op*z + c2o1*czz*op*z)/(c72o1*o*op));
      f_ZERO = eps_new *((c5o1*(ax + by + cz + (c2o1*axx + bxy + cxz)*x + (axy + c2o1*byy + cyz)*y + (axz + byz + c2o1*czz)*z))/(9.*op));
      f_TNE  = eps_new *(-(ay + az + bx + bz + cx + cy + axy*x + axz*x + c2o1*bxx*x + bxz*x + c2o1*cxx*x + cxy*x + (c2o1*ayy + ayz + bxy + byz)*y + cxy*y + c2o1*cyy*y + (ayz + c2o1*azz)*z + (bxz + c2o1*bzz + cxz + cyz)*z)/(c72o1*o));
      f_TSW  = eps_new *((-ay + az - bx + bz + cx + cy - axy*x + axz*x - c2o1*bxx*x + bxz*x + c2o1*cxx*x + cxy*x - c2o1*ayy*y + ayz*y - bxy*y + byz*y + cxy*y + c2o1*cyy*y + (-ayz + c2o1*azz - bxz + c2o1*bzz + cxz + cyz)*z)/(c72o1*o));
      f_TSE  = eps_new *((ay - az + bx + bz - cx + cy + axy*x - axz*x + c2o1*bxx*x + bxz*x - c2o1*cxx*x + cxy*x + c2o1*ayy*y - ayz*y + bxy*y + byz*y - cxy*y + c2o1*cyy*y + (ayz - c2o1*azz + bxz + c2o1*bzz - cxz + cyz)*z)/(c72o1*o));
      f_TNW  = eps_new *((ay + az + bx - bz + cx - cy + axy*x + axz*x + c2o1*bxx*x - bxz*x + c2o1*cxx*x - cxy*x + c2o1*ayy*y + ayz*y + bxy*y - byz*y + cxy*y - c2o1*cyy*y + (ayz + c2o1*azz + bxz - c2o1*bzz + cxz - cyz)*z)/(c72o1*o));
      f_BNE  = eps_new *((-ay + az - bx + bz + cx + cy - axy*x + axz*x - c2o1*bxx*x + bxz*x + c2o1*cxx*x + cxy*x - c2o1*ayy*y + ayz*y - bxy*y + byz*y + cxy*y + c2o1*cyy*y + (-ayz + c2o1*azz - bxz + c2o1*bzz + cxz + cyz)*z)/(c72o1*o));
      f_BSW  = eps_new *(-(ay + az + bx + bz + cx + cy + axy*x + axz*x + c2o1*bxx*x + bxz*x + c2o1*cxx*x + cxy*x + (c2o1*ayy + ayz + bxy + byz)*y + cxy*y + c2o1*cyy*y + (ayz + c2o1*azz)*z + (bxz + c2o1*bzz + cxz + cyz)*z)/(c72o1*o));
      f_BSE  = eps_new *((ay + az + bx - bz + cx - cy + axy*x + axz*x + c2o1*bxx*x - bxz*x + c2o1*cxx*x - cxy*x + c2o1*ayy*y + ayz*y + bxy*y - byz*y + cxy*y - c2o1*cyy*y + (ayz + c2o1*azz + bxz - c2o1*bzz + cxz - cyz)*z)/(c72o1*o));
      f_BNW  = eps_new *((ay - az + bx + bz - cx + cy + axy*x - axz*x + c2o1*bxx*x + bxz*x - c2o1*cxx*x + cxy*x + c2o1*ayy*y - ayz*y + bxy*y + byz*y - cxy*y + c2o1*cyy*y + (ayz - c2o1*azz + bxz + c2o1*bzz - cxz + cyz)*z)/(c72o1*o));

      //////////////////////////////////////////////////////////////////////////
      //index 0
      kzero= posC[k];
      kw   = neighborCX[kzero];
      ks   = neighborCY[kzero];
      kb   = neighborCZ[kzero];
      ksw  = neighborCY[kw];
      kbw  = neighborCZ[kw];
      kbs  = neighborCZ[ks];
      kbsw = neighborCZ[ksw];
      ////////////////////////////////////////////////////////////////////////////////
      feC[kzero]   = f_E    + feq_E;
      fwC[kw]      = f_W    + feq_W;
      fnC[kzero]   = f_N    + feq_N;
      fsC[ks]      = f_S    + feq_S;
      ftC[kzero]   = f_T    + feq_T;
      fbC[kb]      = f_B    + feq_B;
      fneC[kzero]  = f_NE   + feq_NE;
      fswC[ksw]    = f_SW   + feq_SW;
      fseC[ks]     = f_SE   + feq_SE;
      fnwC[kw]     = f_NW   + feq_NW;
      fteC[kzero]  = f_TE   + feq_TE;
      fbwC[kbw]    = f_BW   + feq_BW;
      fbeC[kb]     = f_BE   + feq_BE;
      ftwC[kw]     = f_TW   + feq_TW;
      ftnC[kzero]  = f_TN   + feq_TN;
      fbsC[kbs]    = f_BS   + feq_BS;
      fbnC[kb]     = f_BN   + feq_BN;
      ftsC[ks]     = f_TS   + feq_TS;
      fzeroC[kzero]= f_ZERO + feq_ZERO;
      ftneC[kzero] = f_TNE  + feq_TNE;
      ftswC[ksw]   = f_TSW  + feq_TSW;
      ftseC[ks]    = f_TSE  + feq_TSE;
      ftnwC[kw]    = f_TNW  + feq_TNW;
      fbneC[kb]    = f_BNE  + feq_BNE;
      fbswC[kbsw]  = f_BSW  + feq_BSW;
      fbseC[kbs]   = f_BSE  + feq_BSE;
      fbnwC[kbw]   = f_BNW  + feq_BNW;
   }
}
