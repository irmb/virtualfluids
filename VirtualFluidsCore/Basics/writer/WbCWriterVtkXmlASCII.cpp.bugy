#include <basics/writer/WbCWriterVtkXmlASCII.h>
#include <basics/utilities/UbLogger.h>
#include <cstring>

using namespace std;

/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::pvdEndTag ="   </Collection>\n</VTKFile>";
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeCollection(const std::string& filename, const std::vector<std::string>& filenames, const double& timeStep, const bool& sepGroups)
{
   std::string vtkfilename=filename+".pvd";
   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");

   if(vtkfile == NULL)
   { 
      string path = UbSystem::getPathFromString(vtkfilename);
      if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");	}
      if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   std::string endian;
   if(UbSystem::isLittleEndian()) endian = "LittleEndian";
   else                           endian = "BigEndian";
   fprintf(vtkfile,"<VTKFile type=\"Collection\" version=\"0.1\" byte_order=\"%s\" >\n",endian);
   fputs("   <Collection>\n",vtkfile);
   
   int group = 0, part=0;
   for(std::size_t i=0; i<filenames.size(); i++)
   {
	  fprintf(vtkfile,"       <DataSet timestep=\"%g\" group=\"%d\" part=\"%d\" file=\"%s\"/>\n",timeStep,group,part,filenames[i]);
      if(sepGroups) group++;
      else          part++;
   }
   fprintf(vtkfile,"%s",pvdEndTag.c_str());
   fclose(vtkfile);

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::addFilesToCollection(const std::string& filename, const std::vector<std::string>& filenames, const double& timeStep, const bool& sepGroups)
{
   std::string vtkfilename=filename;
   FILE * test;
   test = fopen(vtkfilename.c_str(), "r");

   if(test == NULL)
   {
      vtkfilename += ".pvd";
      test = fopen(vtkfilename.c_str(), "r");
      if(test == NULL) return this->writeCollection(filename,filenames,timeStep,sepGroups);
   }

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "r+");
   fseek(vtkfile,-(int)pvdEndTag.size()-1,SEEK_END);								

   int group = 0;
   for(std::size_t i=0; i<filenames.size(); i++)
   {
	  fprintf(vtkfile,"       <DataSet timestep=\"%g\" group=\"%d\" part=\"%d\" file=\"%s\"/>\n",timeStep,group,i,filenames[i]);
      if(sepGroups) group++;
   }
   fprintf(vtkfile,"%s",pvdEndTag.c_str());

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeParallelFile(const string& filename,vector<string>& pieceSources, vector<string>& pointDataNames, vector<string>& cellDataNames)
{
   string vtkfilename=filename+".pvtu";
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeParallelFile to "<<vtkfilename<<" - start");
   
   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
      string path = UbSystem::getPathFromString(vtkfilename);
      if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");	}
      if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   //VTK FILE
   fputs("<VTKFile type=\"PUnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\">\n  <PUnstructuredGrid GhostLevel=\"0\">\n    <PPoints>\n      <PDataArray type=\"Float32\" NumberOfComponents=\"3\"/>\n    </PPoints>\n    <PPointData>\n",vtkfile);
   for(size_t s=0; s<pointDataNames.size(); s++)
	   fprintf(vtkfile, "      <PDataArray type=\"Float32\" Name=\"%s\"/>\n", pointDataNames[s]);
   fputs("    </PPointData>\n",vtkfile);
   if (cellDataNames.size() > 0)
   {
	  fputs("    <PCellData>\n",vtkfile);
      for(size_t s=0; s<cellDataNames.size(); s++)
         fprintf(vtkfile, "      <PDataArray type=\"Float32\" Name=\"%s\"/>\n", cellDataNames[s]);
	  fputs("    </PCellData>\n",vtkfile);
   }

   for(size_t s=0; s<pieceSources.size(); s++)
	  fprintf(vtkfile, "    <Piece Source=\"%s\"/>\n", pieceSources[s]);
   fputs("  </PUnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeParallelFile to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeQuads(const string& filename,vector< UbTupleFloat3 >& nodes, vector< UbTupleInt4 >& cells)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuads to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
      string path = UbSystem::getPathFromString(vtkfilename);
      if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
      if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile,"<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n", nofNodes, nofCells);

   //POINTS SECTION
   fputs("      <Points>\n         <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile, "%g %g %g   ", val<1>(nodes[n]),val<2>(nodes[n]), val<3>(nodes[n]));
   fputs("\n         </DataArray>\n      </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("      <Cells>\n         <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d %d   ",val<1>(cells[c]),val<2>(cells[c]),val<4>(cells[c]),val<3>(cells[c]));
   fputs("\n      </DataArray>\n         <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*4);

   fputs("\n         </DataArray>\n      <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("8 ",vtkfile);

   fputs("\n      </DataArray>\n      </Cells>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuads to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeQuadsWithNodeData(const string& filename,vector< UbTupleFloat3 >& nodes, vector< UbTupleInt4 >& cells, vector< string >& datanames, vector< vector< double > >& nodedata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuadsWithNodeData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
      string path = UbSystem::getPathFromString(vtkfilename);
      if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
      if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile,"<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofCells);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile, "%g %g %g   ", val<1>(nodes[n]),val<2>(nodes[n]), val<3>(nodes[n]));		 
   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d %d   ",val<1>(cells[c]),val<2>(cells[c]),val<4>(cells[c]),val<3>(cells[c]));
   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*4);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("8 ",vtkfile);
   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write data section
   fputs("         <PointData Scalars=\"Scalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\"> \n",datanames[s]);

      for(int d=0; d<(int)nodedata[s].size(); d++)
		  fprintf(vtkfile,"%g ",nodedata[s][d]);
	  fputs("\n          </DataArray>\n",vtkfile);
    }
   fputs("         </PointData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuadsWithNodeData to "<<vtkfilename<<" - end");
   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeQuadsWithCellData(const string& filename,vector< UbTupleFloat3 >& nodes, vector< UbTupleInt4 >& cells, vector< string >& datanames, vector< vector< double > >& celldata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuadsWithCellData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
      string path = UbSystem::getPathFromString(vtkfilename);
      if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
      if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile, "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofCells);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));

   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d %d   ",val<1>(cells[c]),val<2>(cells[c]),val<4>(cells[c]),val<3>(cells[c]));
   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*4);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("8 ",vtkfile);
   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write data section
   fputs("         <CellData Scalars=\"Scalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\"> \n",datanames[s]);

      for(int d=0; d<(int)celldata[s].size(); d++)
		  fprintf(vtkfile,"%g ",celldata[s][d]);

	  fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </CellData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);

   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuadsWithCellData to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
string WbCWriterVtkXmlASCII::writeQuadsWithNodeAndCellData(const string& filename,vector< UbTupleFloat3 >& nodes, vector< UbTupleInt4 >& cells, 
                                                          vector< string >& nodedatanames, vector< vector< double > >& nodedata, vector< string >& celldatanames,
                                                          vector< vector< double > >& celldata                                                                       )
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuadsWithNodeAndCellData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile, "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofCells);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));

   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d %d   ",val<1>(cells[c]),val<2>(cells[c]),val<4>(cells[c]),val<3>(cells[c]));
   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*4);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("8 ",vtkfile);
   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write PointData section
   fputs("         <PointData Scalars=\"PScalars\"> \n",vtkfile);
   for(int s=0; s<(int)nodedatanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\">\n",nodedatanames[s]);

	   for(int d=0; d<(int)nodedata[s].size(); d++)
		   fprintf(vtkfile,"%g ",nodedata[s][d]);
	   
	   fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </PointData>\n",vtkfile);

   //write celldata section
   fputs("         <CellData Scalars=\"CScalars\"> \n",vtkfile);
   for(int s=0; s<(int)celldatanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\">\n",celldatanames[s]);

	   for(int d=0; d<(int)celldata[s].size(); d++)
		   fprintf(vtkfile,"%g ",celldata[s][d]);

	   fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </CellData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeQuadsWithNodeAndCellData to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeLines(const string& filename,vector<UbTupleFloat3 >& nodes, vector<UbTupleInt2 >& lines) 
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeLines to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofLines = (int)lines.size(); 

   //VTK FILE
   fprintf(vtkfile, "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofLines);

   //POINTS SECTION
   fputs("         <Points>\n         <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));

   fputs("\n         </DataArray>\n      </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("      <Cells>\n         <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofLines; c++)
	   fprintf(vtkfile,"%d %d  ",val<1>(lines[c]),val<2>(lines[c]));
   fputs("\n      </DataArray>\n         <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n",vtkfile);
   for(int c=1; c<=nofLines; c++)
	   fprintf(vtkfile,"%d ",c*2);

   fputs("\n         </DataArray>\n      <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofLines; c++)
	   fputs("3 ",vtkfile);
   fputs("\n      </DataArray>\n      </Cells>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeLines to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeLinesWithNodeData(const string& filename,vector<UbTupleFloat3 >& nodes, vector<UbTupleInt2 >& lines, std::vector< std::string >& datanames, std::vector< std::vector< double > >& nodedata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeLinesWithNodeData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofLines = (int)lines.size(); 

   //VTK FILE
   fprintf(vtkfile, "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofLines);

   //POINTS SECTION
   fputs("      <Points>\n         <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));

   fputs("\n         </DataArray>\n      </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("      <Cells>\n         <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofLines; c++)
	   fprintf(vtkfile,"%d %d  ",val<1>(lines[c]),val<2>(lines[c]));
   fputs("\n      </DataArray>\n         <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n",vtkfile);
   for(int c=1; c<=nofLines; c++)
	   fprintf(vtkfile,"%d ",c*2);

   fputs("\n         </DataArray>\n      <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofLines; c++)
	   fputs("3 ",vtkfile);
   fputs("\n      </DataArray>\n      </Cells>\n",vtkfile);

   //write data section
   fputs("         <PointData Scalars=\"Scalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\"> \n",datanames[s]);

	   for(int d=0; d<(int)nodedata[s].size(); d++)
		   fprintf(vtkfile,"%g ",nodedata[s][d]);

	   fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </PointData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeLinesWithNodeData to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeTriangles(const string& filename,vector<UbTupleFloat3 >& nodes, vector<UbTupleInt3 >& triangles)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeTriangles to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofTriangles= (int)triangles.size(); 

   //VTK FILE
   fprintf(vtkfile, "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofTriangles);

   //POINTS SECTION
   fputs("      <Points>\n         <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));

   fputs("\n         </DataArray>\n      </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("      <Cells>\n         <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofTriangles; c++)
	   fprintf(vtkfile,"%d %d %d  ",val<1>(triangles[c]),val<2>(triangles[c]),val<3>(triangles[c]));
   fputs("\n      </DataArray>\n         <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n",vtkfile);
   for(int c=1; c<nofTriangles+1; c++)
	   fprintf(vtkfile,"%d ",c*3);

   fputs("\n         </DataArray>\n      <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n",vtkfile);

   for(int c=0; c<nofTriangles; c++)
	   fputs("5 ",vtkfile);
   fputs("\n      </DataArray>\n      </Cells>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeTriangles to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeTrianglesWithNodeData(const std::string& filename,std::vector< UbTupleFloat3 >& nodes, std::vector< UbTupleInt3 >& cells, std::vector< std::string >& datanames, std::vector< std::vector< double > >& nodedata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeTrianglesWithNodeData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile, "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofCells);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));

   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d   ",val<1>(cells[c]),val<2>(cells[c]),val<3>(cells[c]));
   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*3);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("5 ",vtkfile);
   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write data section
   fputs("         <PointData Scalars=\"Scalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\"> \n",datanames[s]);

	   for(int d=0; d<(int)nodedata[s].size(); d++)
		   fprintf(vtkfile,"%g ",nodedata[s][d]);

	   fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </PointData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeTrianglesWithNodeData to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeOctsWithCellData(const string& filename,vector< UbTupleFloat3 >& nodes, vector< UbTupleInt8 >& cells, vector< string >& datanames, vector< vector< double > >& celldata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeOctsWithCellData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile, "<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofCells);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));

   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d %d %d %d %d %d  ",val<1>(cells[c]),val<2>(cells[c]),val<4>(cells[c]),val<3>(cells[c]),val<5>(cells[c]),val<6>(cells[c]),val<8>(cells[c]),val<7>(cells[c]));
   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*8);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("11 ",vtkfile);
   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write data section
   fputs("         <CellData Scalars=\"Scalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\"> \n",datanames[s]);

	   for(int d=0; d<(int)celldata[s].size(); d++)
		   fprintf(vtkfile,"%g ",celldata[s][d]);

	   fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </CellData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeOctsWithCellData to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeOctsWithNodeData(const string& filename,vector< UbTupleFloat3 >& nodes, vector< UbTupleInt8 >& cells, vector< string >& datanames, vector< vector< double > >& nodedata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeOctsWithNodeData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
      string path = UbSystem::getPathFromString(vtkfilename);
      if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
      if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile,"<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofCells);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
		fprintf(vtkfile,"%g %g %g ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));
   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d %d %d %d %d %d  ",val<1>(cells[c]),val<2>(cells[c]),val<4>(cells[c]),val<3>(cells[c]),val<5>(cells[c]),val<6>(cells[c]),val<8>(cells[c]),val<7>(cells[c]));

   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*8);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("11 ",vtkfile);

   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write PointData section
   fputs("         <PointData Scalars=\"PScalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
       fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\">",datanames[s]);

      for(int d=0; d<(int)nodedata[s].size(); d++)
      {
         //out<<base64_encode((unsigned char*)(&nodedata[s][d]),sizeof(float));
         //out.write((char*)&nodedata[s][d],sizeof(float));
		  fprintf(vtkfile,"%g ",nodedata[s][d]);
      }
	  fputs("</DataArray>\n",vtkfile);
   }
   fputs("         </PointData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeOctsWithNodeData to "<<vtkfilename<<" - end");

   return vtkfilename;
}
/*===============================================================================*/
std::string WbCWriterVtkXmlASCII::writeOcts(const string& filename,vector< UbTupleFloat3 >& nodes, vector< UbTupleInt8 >& cells)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeOcts to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 
   int nofCells = (int)cells.size(); 

   //VTK FILE
   fprintf(vtkfile,"<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofCells);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));
   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fprintf(vtkfile,"%d %d %d %d %d %d %d %d   ",val<1>(cells[c]),val<2>(cells[c]),val<4>(cells[c]),val<3>(cells[c]),val<5>(cells[c]),val<6>(cells[c]),val<8>(cells[c]),val<7>(cells[c]));

   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);
   for(int c=1; c<nofCells+1; c++)
	   fprintf(vtkfile,"%d ",c*8);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofCells; c++)
	   fputs("11 ",vtkfile);

   fputs("\n            </DataArray>\n         </Cells>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeOcts to "<<vtkfilename<<" - end");

   return vtkfilename;
}
std::string WbCWriterVtkXmlASCII::writeNodes(const std::string& filename,std::vector< UbTupleFloat3 >& nodes)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeLines to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 

   //VTK FILE
   fprintf(vtkfile,"<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofNodes);

   //POINTS SECTION
   fputs("      <Points>\n         <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));
   fputs("\n         </DataArray>\n      </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("      <Cells>\n         <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n",vtkfile);

   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%d  ",n);
   fputs("\n      </DataArray>\n         <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n",vtkfile);

   for(int n=1; n<=nofNodes; n++)
	   fprintf(vtkfile,"%d ",n);

   fputs("\n         </DataArray>\n      <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n",vtkfile);

   for(int n=0; n<nofNodes; n++)
	   fputs("1 ",vtkfile);

   fputs("\n      </DataArray>\n      </Cells>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeLines to "<<vtkfilename<<" - end");

   return vtkfilename;
}
std::string WbCWriterVtkXmlASCII::writeNodesWithNodeData(const std::string& filename,std::vector< UbTupleFloat3 >& nodes, std::vector<std::string >& datanames, std::vector<std::vector<double > >& nodedata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeNodesWithNodeData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 

   //VTK FILE
   fprintf(vtkfile,"<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofNodes);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float32\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));
   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofNodes; c++)
	   fprintf(vtkfile,"%d   ",c);
   fputs("\n            </DataArray>\n            <DataArray type=\"Int32\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);

   for(int c=1; c<nofNodes+1; c++)
	   fprintf(vtkfile,"%d ",c);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int n=0; n<nofNodes; n++)
	   fputs("1 ",vtkfile);

   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write data section
   fputs("         <PointData Scalars=\"Scalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float32\" Name=\"%s\" format=\"ascii\"> \n",datanames[s]);

	   for(int d=0; d<(int)nodedata[s].size(); d++)
		   fprintf(vtkfile,"%g ",nodedata[s][d]);

	   fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </PointData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeNodesWithNodeData to "<<vtkfilename<<" - end");

   return vtkfilename;
}

//////////////////////////////////////////////////////////////////////////
std::string WbCWriterVtkXmlASCII::writeNodesWithNodeDataDouble(const std::string& filename,std::vector< UbTupleDouble3 >& nodes, std::vector<std::string >& datanames, std::vector<std::vector<double > >& nodedata)
{
   string vtkfilename=filename+getFileExtension();
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeNodesWithNodeData to "<<vtkfilename<<" - start");

   FILE * vtkfile;
   vtkfile = fopen(vtkfilename.c_str(), "w");
   if(vtkfile == NULL)
   { 
	   string path = UbSystem::getPathFromString(vtkfilename);
	   if(path.size()>0){UbSystem::makeDirectory(path);vtkfile = fopen(vtkfilename.c_str(), "w");}
	   if(vtkfile == NULL) throw UbException(UB_EXARGS,"couldn't open file "+vtkfilename);
   }

   int nofNodes = (int)nodes.size(); 

   //VTK FILE
   fprintf(vtkfile,"<VTKFile type=\"UnstructuredGrid\" version=\"0.1\" byte_order=\"LittleEndian\" >\n   <UnstructuredGrid>\n      <Piece NumberOfPoints=\"%d\"	NumberOfCells=\"%d\">   \n",nofNodes,nofNodes);

   //POINTS SECTION
   fputs("         <Points>\n            <DataArray type=\"Float64\" NumberOfComponents=\"3\" format=\"ascii\">\n               ",vtkfile);
   for(int n=0; n<nofNodes; n++)
	   fprintf(vtkfile,"%g %g %g   ",val<1>(nodes[n]),val<2>(nodes[n]),val<3>(nodes[n]));
   fputs("\n            </DataArray>\n         </Points>\n",vtkfile);

   //CELLS SECTION
   fputs("         <Cells>\n            <DataArray type=\"Int32\" Name=\"connectivity\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofNodes; c++)
	   fprintf(vtkfile,"%d   ",c);
   fputs("\n            </DataArray>\n            <DataArray type=\"Int64\" Name=\"offsets\" format=\"ascii\">\n              ",vtkfile);

   for(int c=1; c<nofNodes+1; c++)
	   fprintf(vtkfile,"%d ",c);

   fputs("\n            </DataArray>\n            <DataArray type=\"UInt8\" Name=\"types\" format=\"ascii\">\n              ",vtkfile);

   for(int c=0; c<nofNodes; c++)
	   fputs("1 ",vtkfile);

   fputs("\n            </DataArray>\n         </Cells>\n",vtkfile);

   //write data section
   fputs("         <PointData Scalars=\"Scalars\"> \n",vtkfile);
   for(int s=0; s<(int)datanames.size(); ++s)
   {
	   fprintf(vtkfile,"           <DataArray type=\"Float64\" Name=\"%s\" format=\"ascii\"> \n",datanames[s]);

	   for(int d=0; d<(int)nodedata[s].size(); d++)
		   fprintf(vtkfile,"%g ",nodedata[s][d]);

	   fputs("\n          </DataArray>\n",vtkfile);
   }
   fputs("         </PointData>\n      </Piece>\n   </UnstructuredGrid>\n</VTKFile>\n",vtkfile);
   fclose(vtkfile);
   UBLOG(logDEBUG1,"WbWriterVtkXmlASCII::writeNodesWithNodeData to "<<vtkfilename<<" - end");

   return vtkfilename;
}
